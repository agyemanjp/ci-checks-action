export declare type Primitive = number | string | symbol;
declare type UnwrapIterable1<T> = T extends Iterable<infer X> ? X : T;
declare type UnwrapIterable2<T> = T extends Iterable<infer X> ? UnwrapIterable1<X> : T;
declare type UnwrapIterable3<T> = T extends Iterable<infer X> ? UnwrapIterable2<X> : T;
export declare type UnwrapNestedIterable<T> = T extends Iterable<infer X> ? UnwrapIterable3<X> : T;
export declare type Tuple<X, Y> = [X, Y];
export declare const Tuple: new <X, Y>(x: X, y: Y) => [X, Y];
export declare type Ranker<X = unknown> = (a: X, b: X) => number;
export declare type Comparer<X = unknown> = (a: X, b: X) => boolean;
export declare type Projector<X = unknown, Y = unknown> = (value: X) => Y;
export declare type Predicate<X = unknown> = (value: X) => boolean;
export declare type Reducer<X = unknown, Y = unknown> = (prev: Y, current: X) => Y;
export declare function take<T>(iterable: Iterable<T>, n: number): Iterable<T>;
export declare function skip<T>(iterable: Iterable<T>, n: number): Iterable<T>;
export declare function reduce<X, Y>(iterable: Iterable<X>, initial: Y, reducer: Reducer<X, Y>): Iterable<Y>;
export declare function map<X, Y>(iterable: Iterable<X>, projector: Projector<X, Y>): Iterable<Y>;
export declare function chunk<T>(arr: Iterable<T>, chunkSize: number): Iterable<T[]>;
export declare function first<T>(iterable: Iterable<T>): T | undefined;
export declare function last<T>(iterable: Iterable<T>): T | undefined;
export declare function sum(iterable: Iterable<number>): number;
export declare function flatten<X>(target: Iterable<X>): Iterable<UnwrapNestedIterable<X>>;
export declare const Dictionary: <K extends string, V>(source: Iterable<Tuple<K, V>> | Record<K, V>) => {
    keys: () => string[];
    values: () => unknown[];
    entries: () => Tuple<K, V>[];
    map: <Y>(projector: Projector<V, Y>) => {
        keys: () => string[];
        values: () => unknown[];
        entries: () => Tuple<K, Y>[];
        map: <Y_1>(projector: Projector<Y, Y_1>) => {
            keys: () => string[];
            values: () => unknown[];
            entries: () => Tuple<K, Y_1>[];
            map: <Y_2>(projector: Projector<Y_1, Y_2>) => {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Y_2>[];
                map: <Y_3>(projector: Projector<Y_2, Y_3>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_3>[];
                    map: <Y_4>(projector: Projector<Y_3, Y_4>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_4>[];
                        map: <Y_5>(projector: Projector<Y_4, Y_5>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_5>[];
                            map: <Y_6>(projector: Projector<Y_5, Y_6>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_6>[];
                                map: <Y_7>(projector: Projector<Y_6, Y_7>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_7>[];
                                    map: <Y_8>(projector: Projector<Y_7, Y_8>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_8>[];
                                        map: <Y_9>(projector: Projector<Y_8, Y_9>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_9>[];
                                            map: <Y_10>(projector: Projector<Y_9, Y_10>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_9>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_8>[K]>[];
                                            map: <Y_11>(projector: Projector<Record<K, Y_8>[K], Y_11>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_8>[K]>;
                                        };
                                        asObject(): Record<K, Y_8>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_7>[K]>[];
                                        map: <Y_12>(projector: Projector<Record<K, Y_7>[K], Y_12>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_12>[];
                                            map: <Y_13>(projector: Projector<Y_12, Y_13>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_12>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_7>[K]>[K]>[];
                                            map: <Y_14>(projector: Projector<Record<K, Record<K, Y_7>[K]>[K], Y_14>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_7>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_7>[K]>;
                                    };
                                    asObject(): Record<K, Y_7>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_6>[K]>[];
                                    map: <Y_15>(projector: Projector<Record<K, Y_6>[K], Y_15>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_15>[];
                                        map: <Y_16>(projector: Projector<Y_15, Y_16>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_16>[];
                                            map: <Y_17>(projector: Projector<Y_16, Y_17>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_16>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_15>[K]>[];
                                            map: <Y_18>(projector: Projector<Record<K, Y_15>[K], Y_18>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_15>[K]>;
                                        };
                                        asObject(): Record<K, Y_15>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_6>[K]>[K]>[];
                                        map: <Y_19>(projector: Projector<Record<K, Record<K, Y_6>[K]>[K], Y_19>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_19>[];
                                            map: <Y_20>(projector: Projector<Y_19, Y_20>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_19>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_6>[K]>[K]>[K]>[];
                                            map: <Y_21>(projector: Projector<Record<K, Record<K, Record<K, Y_6>[K]>[K]>[K], Y_21>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_6>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_6>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_6>[K]>;
                                };
                                asObject(): Record<K, Y_6>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_5>[K]>[];
                                map: <Y_22>(projector: Projector<Record<K, Y_5>[K], Y_22>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_22>[];
                                    map: <Y_23>(projector: Projector<Y_22, Y_23>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_23>[];
                                        map: <Y_24>(projector: Projector<Y_23, Y_24>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_24>[];
                                            map: <Y_25>(projector: Projector<Y_24, Y_25>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_24>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_23>[K]>[];
                                            map: <Y_26>(projector: Projector<Record<K, Y_23>[K], Y_26>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_23>[K]>;
                                        };
                                        asObject(): Record<K, Y_23>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_22>[K]>[];
                                        map: <Y_27>(projector: Projector<Record<K, Y_22>[K], Y_27>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_27>[];
                                            map: <Y_28>(projector: Projector<Y_27, Y_28>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_27>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_22>[K]>[K]>[];
                                            map: <Y_29>(projector: Projector<Record<K, Record<K, Y_22>[K]>[K], Y_29>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_22>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_22>[K]>;
                                    };
                                    asObject(): Record<K, Y_22>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_5>[K]>[K]>[];
                                    map: <Y_30>(projector: Projector<Record<K, Record<K, Y_5>[K]>[K], Y_30>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_30>[];
                                        map: <Y_31>(projector: Projector<Y_30, Y_31>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_31>[];
                                            map: <Y_32>(projector: Projector<Y_31, Y_32>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_31>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_30>[K]>[];
                                            map: <Y_33>(projector: Projector<Record<K, Y_30>[K], Y_33>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_30>[K]>;
                                        };
                                        asObject(): Record<K, Y_30>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K]>[];
                                        map: <Y_34>(projector: Projector<Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K], Y_34>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_34>[];
                                            map: <Y_35>(projector: Projector<Y_34, Y_35>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_34>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K]>[K]>[];
                                            map: <Y_36>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K]>[K], Y_36>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_5>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_5>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_5>[K]>;
                            };
                            asObject(): Record<K, Y_5>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_4>[K]>[];
                            map: <Y_37>(projector: Projector<Record<K, Y_4>[K], Y_37>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_37>[];
                                map: <Y_38>(projector: Projector<Y_37, Y_38>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_38>[];
                                    map: <Y_39>(projector: Projector<Y_38, Y_39>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_39>[];
                                        map: <Y_40>(projector: Projector<Y_39, Y_40>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_40>[];
                                            map: <Y_41>(projector: Projector<Y_40, Y_41>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_40>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_39>[K]>[];
                                            map: <Y_42>(projector: Projector<Record<K, Y_39>[K], Y_42>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_39>[K]>;
                                        };
                                        asObject(): Record<K, Y_39>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_38>[K]>[];
                                        map: <Y_43>(projector: Projector<Record<K, Y_38>[K], Y_43>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_43>[];
                                            map: <Y_44>(projector: Projector<Y_43, Y_44>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_43>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_38>[K]>[K]>[];
                                            map: <Y_45>(projector: Projector<Record<K, Record<K, Y_38>[K]>[K], Y_45>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_38>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_38>[K]>;
                                    };
                                    asObject(): Record<K, Y_38>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_37>[K]>[];
                                    map: <Y_46>(projector: Projector<Record<K, Y_37>[K], Y_46>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_46>[];
                                        map: <Y_47>(projector: Projector<Y_46, Y_47>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_47>[];
                                            map: <Y_48>(projector: Projector<Y_47, Y_48>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_47>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_46>[K]>[];
                                            map: <Y_49>(projector: Projector<Record<K, Y_46>[K], Y_49>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_46>[K]>;
                                        };
                                        asObject(): Record<K, Y_46>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_37>[K]>[K]>[];
                                        map: <Y_50>(projector: Projector<Record<K, Record<K, Y_37>[K]>[K], Y_50>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_50>[];
                                            map: <Y_51>(projector: Projector<Y_50, Y_51>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_50>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_37>[K]>[K]>[K]>[];
                                            map: <Y_52>(projector: Projector<Record<K, Record<K, Record<K, Y_37>[K]>[K]>[K], Y_52>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_37>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_37>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_37>[K]>;
                                };
                                asObject(): Record<K, Y_37>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_4>[K]>[K]>[];
                                map: <Y_53>(projector: Projector<Record<K, Record<K, Y_4>[K]>[K], Y_53>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_53>[];
                                    map: <Y_54>(projector: Projector<Y_53, Y_54>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_54>[];
                                        map: <Y_55>(projector: Projector<Y_54, Y_55>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_55>[];
                                            map: <Y_56>(projector: Projector<Y_55, Y_56>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_55>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_54>[K]>[];
                                            map: <Y_57>(projector: Projector<Record<K, Y_54>[K], Y_57>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_54>[K]>;
                                        };
                                        asObject(): Record<K, Y_54>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_53>[K]>[];
                                        map: <Y_58>(projector: Projector<Record<K, Y_53>[K], Y_58>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_58>[];
                                            map: <Y_59>(projector: Projector<Y_58, Y_59>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_58>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_53>[K]>[K]>[];
                                            map: <Y_60>(projector: Projector<Record<K, Record<K, Y_53>[K]>[K], Y_60>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_53>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_53>[K]>;
                                    };
                                    asObject(): Record<K, Y_53>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[];
                                    map: <Y_61>(projector: Projector<Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K], Y_61>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_61>[];
                                        map: <Y_62>(projector: Projector<Y_61, Y_62>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_62>[];
                                            map: <Y_63>(projector: Projector<Y_62, Y_63>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_62>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_61>[K]>[];
                                            map: <Y_64>(projector: Projector<Record<K, Y_61>[K], Y_64>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_61>[K]>;
                                        };
                                        asObject(): Record<K, Y_61>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K]>[];
                                        map: <Y_65>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K], Y_65>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_65>[];
                                            map: <Y_66>(projector: Projector<Y_65, Y_66>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_65>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_67>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K]>[K], Y_67>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_4>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_4>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_4>[K]>;
                        };
                        asObject(): Record<K, Y_4>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_3>[K]>[];
                        map: <Y_68>(projector: Projector<Record<K, Y_3>[K], Y_68>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_68>[];
                            map: <Y_69>(projector: Projector<Y_68, Y_69>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_69>[];
                                map: <Y_70>(projector: Projector<Y_69, Y_70>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_70>[];
                                    map: <Y_71>(projector: Projector<Y_70, Y_71>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_71>[];
                                        map: <Y_72>(projector: Projector<Y_71, Y_72>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_72>[];
                                            map: <Y_73>(projector: Projector<Y_72, Y_73>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_72>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_71>[K]>[];
                                            map: <Y_74>(projector: Projector<Record<K, Y_71>[K], Y_74>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_71>[K]>;
                                        };
                                        asObject(): Record<K, Y_71>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_70>[K]>[];
                                        map: <Y_75>(projector: Projector<Record<K, Y_70>[K], Y_75>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_75>[];
                                            map: <Y_76>(projector: Projector<Y_75, Y_76>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_75>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_70>[K]>[K]>[];
                                            map: <Y_77>(projector: Projector<Record<K, Record<K, Y_70>[K]>[K], Y_77>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_70>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_70>[K]>;
                                    };
                                    asObject(): Record<K, Y_70>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_69>[K]>[];
                                    map: <Y_78>(projector: Projector<Record<K, Y_69>[K], Y_78>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_78>[];
                                        map: <Y_79>(projector: Projector<Y_78, Y_79>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_79>[];
                                            map: <Y_80>(projector: Projector<Y_79, Y_80>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_79>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_78>[K]>[];
                                            map: <Y_81>(projector: Projector<Record<K, Y_78>[K], Y_81>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_78>[K]>;
                                        };
                                        asObject(): Record<K, Y_78>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_69>[K]>[K]>[];
                                        map: <Y_82>(projector: Projector<Record<K, Record<K, Y_69>[K]>[K], Y_82>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_82>[];
                                            map: <Y_83>(projector: Projector<Y_82, Y_83>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_82>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_69>[K]>[K]>[K]>[];
                                            map: <Y_84>(projector: Projector<Record<K, Record<K, Record<K, Y_69>[K]>[K]>[K], Y_84>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_69>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_69>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_69>[K]>;
                                };
                                asObject(): Record<K, Y_69>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_68>[K]>[];
                                map: <Y_85>(projector: Projector<Record<K, Y_68>[K], Y_85>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_85>[];
                                    map: <Y_86>(projector: Projector<Y_85, Y_86>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_86>[];
                                        map: <Y_87>(projector: Projector<Y_86, Y_87>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_87>[];
                                            map: <Y_88>(projector: Projector<Y_87, Y_88>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_87>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_86>[K]>[];
                                            map: <Y_89>(projector: Projector<Record<K, Y_86>[K], Y_89>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_86>[K]>;
                                        };
                                        asObject(): Record<K, Y_86>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_85>[K]>[];
                                        map: <Y_90>(projector: Projector<Record<K, Y_85>[K], Y_90>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_90>[];
                                            map: <Y_91>(projector: Projector<Y_90, Y_91>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_90>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_85>[K]>[K]>[];
                                            map: <Y_92>(projector: Projector<Record<K, Record<K, Y_85>[K]>[K], Y_92>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_85>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_85>[K]>;
                                    };
                                    asObject(): Record<K, Y_85>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_68>[K]>[K]>[];
                                    map: <Y_93>(projector: Projector<Record<K, Record<K, Y_68>[K]>[K], Y_93>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_93>[];
                                        map: <Y_94>(projector: Projector<Y_93, Y_94>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_94>[];
                                            map: <Y_95>(projector: Projector<Y_94, Y_95>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_94>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_93>[K]>[];
                                            map: <Y_96>(projector: Projector<Record<K, Y_93>[K], Y_96>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_93>[K]>;
                                        };
                                        asObject(): Record<K, Y_93>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K]>[];
                                        map: <Y_97>(projector: Projector<Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K], Y_97>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_97>[];
                                            map: <Y_98>(projector: Projector<Y_97, Y_98>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_97>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K]>[K]>[];
                                            map: <Y_99>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K]>[K], Y_99>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_68>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_68>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_68>[K]>;
                            };
                            asObject(): Record<K, Y_68>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_3>[K]>[K]>[];
                            map: <Y_100>(projector: Projector<Record<K, Record<K, Y_3>[K]>[K], Y_100>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_100>[];
                                map: <Y_101>(projector: Projector<Y_100, Y_101>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_101>[];
                                    map: <Y_102>(projector: Projector<Y_101, Y_102>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_102>[];
                                        map: <Y_103>(projector: Projector<Y_102, Y_103>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_103>[];
                                            map: <Y_104>(projector: Projector<Y_103, Y_104>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_103>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_102>[K]>[];
                                            map: <Y_105>(projector: Projector<Record<K, Y_102>[K], Y_105>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_102>[K]>;
                                        };
                                        asObject(): Record<K, Y_102>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_101>[K]>[];
                                        map: <Y_106>(projector: Projector<Record<K, Y_101>[K], Y_106>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_106>[];
                                            map: <Y_107>(projector: Projector<Y_106, Y_107>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_106>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_101>[K]>[K]>[];
                                            map: <Y_108>(projector: Projector<Record<K, Record<K, Y_101>[K]>[K], Y_108>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_101>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_101>[K]>;
                                    };
                                    asObject(): Record<K, Y_101>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_100>[K]>[];
                                    map: <Y_109>(projector: Projector<Record<K, Y_100>[K], Y_109>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_109>[];
                                        map: <Y_110>(projector: Projector<Y_109, Y_110>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_110>[];
                                            map: <Y_111>(projector: Projector<Y_110, Y_111>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_110>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_109>[K]>[];
                                            map: <Y_112>(projector: Projector<Record<K, Y_109>[K], Y_112>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_109>[K]>;
                                        };
                                        asObject(): Record<K, Y_109>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_100>[K]>[K]>[];
                                        map: <Y_113>(projector: Projector<Record<K, Record<K, Y_100>[K]>[K], Y_113>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_113>[];
                                            map: <Y_114>(projector: Projector<Y_113, Y_114>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_113>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_100>[K]>[K]>[K]>[];
                                            map: <Y_115>(projector: Projector<Record<K, Record<K, Record<K, Y_100>[K]>[K]>[K], Y_115>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_100>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_100>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_100>[K]>;
                                };
                                asObject(): Record<K, Y_100>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[];
                                map: <Y_116>(projector: Projector<Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K], Y_116>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_116>[];
                                    map: <Y_117>(projector: Projector<Y_116, Y_117>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_117>[];
                                        map: <Y_118>(projector: Projector<Y_117, Y_118>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_118>[];
                                            map: <Y_119>(projector: Projector<Y_118, Y_119>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_118>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_117>[K]>[];
                                            map: <Y_120>(projector: Projector<Record<K, Y_117>[K], Y_120>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_117>[K]>;
                                        };
                                        asObject(): Record<K, Y_117>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_116>[K]>[];
                                        map: <Y_121>(projector: Projector<Record<K, Y_116>[K], Y_121>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_121>[];
                                            map: <Y_122>(projector: Projector<Y_121, Y_122>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_121>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_116>[K]>[K]>[];
                                            map: <Y_123>(projector: Projector<Record<K, Record<K, Y_116>[K]>[K], Y_123>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_116>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_116>[K]>;
                                    };
                                    asObject(): Record<K, Y_116>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[];
                                    map: <Y_124>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K], Y_124>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_124>[];
                                        map: <Y_125>(projector: Projector<Y_124, Y_125>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_125>[];
                                            map: <Y_126>(projector: Projector<Y_125, Y_126>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_125>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_124>[K]>[];
                                            map: <Y_127>(projector: Projector<Record<K, Y_124>[K], Y_127>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_124>[K]>;
                                        };
                                        asObject(): Record<K, Y_124>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_128>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K], Y_128>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_128>[];
                                            map: <Y_129>(projector: Projector<Y_128, Y_129>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_128>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_130>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K]>[K], Y_130>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_3>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_3>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_3>[K]>;
                    };
                    asObject(): Record<K, Y_3>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Y_2>[K]>[];
                    map: <Y_131>(projector: Projector<Record<K, Y_2>[K], Y_131>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_131>[];
                        map: <Y_132>(projector: Projector<Y_131, Y_132>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_132>[];
                            map: <Y_133>(projector: Projector<Y_132, Y_133>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_133>[];
                                map: <Y_134>(projector: Projector<Y_133, Y_134>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_134>[];
                                    map: <Y_135>(projector: Projector<Y_134, Y_135>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_135>[];
                                        map: <Y_136>(projector: Projector<Y_135, Y_136>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_136>[];
                                            map: <Y_137>(projector: Projector<Y_136, Y_137>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_136>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_135>[K]>[];
                                            map: <Y_138>(projector: Projector<Record<K, Y_135>[K], Y_138>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_135>[K]>;
                                        };
                                        asObject(): Record<K, Y_135>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_134>[K]>[];
                                        map: <Y_139>(projector: Projector<Record<K, Y_134>[K], Y_139>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_139>[];
                                            map: <Y_140>(projector: Projector<Y_139, Y_140>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_139>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_134>[K]>[K]>[];
                                            map: <Y_141>(projector: Projector<Record<K, Record<K, Y_134>[K]>[K], Y_141>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_134>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_134>[K]>;
                                    };
                                    asObject(): Record<K, Y_134>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_133>[K]>[];
                                    map: <Y_142>(projector: Projector<Record<K, Y_133>[K], Y_142>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_142>[];
                                        map: <Y_143>(projector: Projector<Y_142, Y_143>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_143>[];
                                            map: <Y_144>(projector: Projector<Y_143, Y_144>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_143>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_142>[K]>[];
                                            map: <Y_145>(projector: Projector<Record<K, Y_142>[K], Y_145>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_142>[K]>;
                                        };
                                        asObject(): Record<K, Y_142>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_133>[K]>[K]>[];
                                        map: <Y_146>(projector: Projector<Record<K, Record<K, Y_133>[K]>[K], Y_146>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_146>[];
                                            map: <Y_147>(projector: Projector<Y_146, Y_147>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_146>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_133>[K]>[K]>[K]>[];
                                            map: <Y_148>(projector: Projector<Record<K, Record<K, Record<K, Y_133>[K]>[K]>[K], Y_148>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_133>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_133>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_133>[K]>;
                                };
                                asObject(): Record<K, Y_133>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_132>[K]>[];
                                map: <Y_149>(projector: Projector<Record<K, Y_132>[K], Y_149>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_149>[];
                                    map: <Y_150>(projector: Projector<Y_149, Y_150>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_150>[];
                                        map: <Y_151>(projector: Projector<Y_150, Y_151>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_151>[];
                                            map: <Y_152>(projector: Projector<Y_151, Y_152>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_151>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_150>[K]>[];
                                            map: <Y_153>(projector: Projector<Record<K, Y_150>[K], Y_153>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_150>[K]>;
                                        };
                                        asObject(): Record<K, Y_150>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_149>[K]>[];
                                        map: <Y_154>(projector: Projector<Record<K, Y_149>[K], Y_154>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_154>[];
                                            map: <Y_155>(projector: Projector<Y_154, Y_155>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_154>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_149>[K]>[K]>[];
                                            map: <Y_156>(projector: Projector<Record<K, Record<K, Y_149>[K]>[K], Y_156>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_149>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_149>[K]>;
                                    };
                                    asObject(): Record<K, Y_149>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_132>[K]>[K]>[];
                                    map: <Y_157>(projector: Projector<Record<K, Record<K, Y_132>[K]>[K], Y_157>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_157>[];
                                        map: <Y_158>(projector: Projector<Y_157, Y_158>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_158>[];
                                            map: <Y_159>(projector: Projector<Y_158, Y_159>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_158>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_157>[K]>[];
                                            map: <Y_160>(projector: Projector<Record<K, Y_157>[K], Y_160>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_157>[K]>;
                                        };
                                        asObject(): Record<K, Y_157>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K]>[];
                                        map: <Y_161>(projector: Projector<Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K], Y_161>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_161>[];
                                            map: <Y_162>(projector: Projector<Y_161, Y_162>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_161>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K]>[K]>[];
                                            map: <Y_163>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K]>[K], Y_163>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_132>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_132>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_132>[K]>;
                            };
                            asObject(): Record<K, Y_132>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_131>[K]>[];
                            map: <Y_164>(projector: Projector<Record<K, Y_131>[K], Y_164>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_164>[];
                                map: <Y_165>(projector: Projector<Y_164, Y_165>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_165>[];
                                    map: <Y_166>(projector: Projector<Y_165, Y_166>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_166>[];
                                        map: <Y_167>(projector: Projector<Y_166, Y_167>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_167>[];
                                            map: <Y_168>(projector: Projector<Y_167, Y_168>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_167>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_166>[K]>[];
                                            map: <Y_169>(projector: Projector<Record<K, Y_166>[K], Y_169>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_166>[K]>;
                                        };
                                        asObject(): Record<K, Y_166>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_165>[K]>[];
                                        map: <Y_170>(projector: Projector<Record<K, Y_165>[K], Y_170>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_170>[];
                                            map: <Y_171>(projector: Projector<Y_170, Y_171>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_170>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_165>[K]>[K]>[];
                                            map: <Y_172>(projector: Projector<Record<K, Record<K, Y_165>[K]>[K], Y_172>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_165>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_165>[K]>;
                                    };
                                    asObject(): Record<K, Y_165>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_164>[K]>[];
                                    map: <Y_173>(projector: Projector<Record<K, Y_164>[K], Y_173>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_173>[];
                                        map: <Y_174>(projector: Projector<Y_173, Y_174>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_174>[];
                                            map: <Y_175>(projector: Projector<Y_174, Y_175>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_174>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_173>[K]>[];
                                            map: <Y_176>(projector: Projector<Record<K, Y_173>[K], Y_176>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_173>[K]>;
                                        };
                                        asObject(): Record<K, Y_173>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_164>[K]>[K]>[];
                                        map: <Y_177>(projector: Projector<Record<K, Record<K, Y_164>[K]>[K], Y_177>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_177>[];
                                            map: <Y_178>(projector: Projector<Y_177, Y_178>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_177>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_164>[K]>[K]>[K]>[];
                                            map: <Y_179>(projector: Projector<Record<K, Record<K, Record<K, Y_164>[K]>[K]>[K], Y_179>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_164>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_164>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_164>[K]>;
                                };
                                asObject(): Record<K, Y_164>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_131>[K]>[K]>[];
                                map: <Y_180>(projector: Projector<Record<K, Record<K, Y_131>[K]>[K], Y_180>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_180>[];
                                    map: <Y_181>(projector: Projector<Y_180, Y_181>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_181>[];
                                        map: <Y_182>(projector: Projector<Y_181, Y_182>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_182>[];
                                            map: <Y_183>(projector: Projector<Y_182, Y_183>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_182>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_181>[K]>[];
                                            map: <Y_184>(projector: Projector<Record<K, Y_181>[K], Y_184>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_181>[K]>;
                                        };
                                        asObject(): Record<K, Y_181>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_180>[K]>[];
                                        map: <Y_185>(projector: Projector<Record<K, Y_180>[K], Y_185>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_185>[];
                                            map: <Y_186>(projector: Projector<Y_185, Y_186>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_185>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_180>[K]>[K]>[];
                                            map: <Y_187>(projector: Projector<Record<K, Record<K, Y_180>[K]>[K], Y_187>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_180>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_180>[K]>;
                                    };
                                    asObject(): Record<K, Y_180>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[];
                                    map: <Y_188>(projector: Projector<Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K], Y_188>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_188>[];
                                        map: <Y_189>(projector: Projector<Y_188, Y_189>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_189>[];
                                            map: <Y_190>(projector: Projector<Y_189, Y_190>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_189>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_188>[K]>[];
                                            map: <Y_191>(projector: Projector<Record<K, Y_188>[K], Y_191>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_188>[K]>;
                                        };
                                        asObject(): Record<K, Y_188>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K]>[];
                                        map: <Y_192>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K], Y_192>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_192>[];
                                            map: <Y_193>(projector: Projector<Y_192, Y_193>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_192>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_194>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K]>[K], Y_194>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_131>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_131>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_131>[K]>;
                        };
                        asObject(): Record<K, Y_131>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Y_2>[K]>[K]>[];
                        map: <Y_195>(projector: Projector<Record<K, Record<K, Y_2>[K]>[K], Y_195>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_195>[];
                            map: <Y_196>(projector: Projector<Y_195, Y_196>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_196>[];
                                map: <Y_197>(projector: Projector<Y_196, Y_197>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_197>[];
                                    map: <Y_198>(projector: Projector<Y_197, Y_198>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_198>[];
                                        map: <Y_199>(projector: Projector<Y_198, Y_199>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_199>[];
                                            map: <Y_200>(projector: Projector<Y_199, Y_200>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_199>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_198>[K]>[];
                                            map: <Y_201>(projector: Projector<Record<K, Y_198>[K], Y_201>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_198>[K]>;
                                        };
                                        asObject(): Record<K, Y_198>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_197>[K]>[];
                                        map: <Y_202>(projector: Projector<Record<K, Y_197>[K], Y_202>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_202>[];
                                            map: <Y_203>(projector: Projector<Y_202, Y_203>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_202>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_197>[K]>[K]>[];
                                            map: <Y_204>(projector: Projector<Record<K, Record<K, Y_197>[K]>[K], Y_204>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_197>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_197>[K]>;
                                    };
                                    asObject(): Record<K, Y_197>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_196>[K]>[];
                                    map: <Y_205>(projector: Projector<Record<K, Y_196>[K], Y_205>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_205>[];
                                        map: <Y_206>(projector: Projector<Y_205, Y_206>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_206>[];
                                            map: <Y_207>(projector: Projector<Y_206, Y_207>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_206>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_205>[K]>[];
                                            map: <Y_208>(projector: Projector<Record<K, Y_205>[K], Y_208>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_205>[K]>;
                                        };
                                        asObject(): Record<K, Y_205>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_196>[K]>[K]>[];
                                        map: <Y_209>(projector: Projector<Record<K, Record<K, Y_196>[K]>[K], Y_209>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_209>[];
                                            map: <Y_210>(projector: Projector<Y_209, Y_210>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_209>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_196>[K]>[K]>[K]>[];
                                            map: <Y_211>(projector: Projector<Record<K, Record<K, Record<K, Y_196>[K]>[K]>[K], Y_211>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_196>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_196>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_196>[K]>;
                                };
                                asObject(): Record<K, Y_196>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_195>[K]>[];
                                map: <Y_212>(projector: Projector<Record<K, Y_195>[K], Y_212>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_212>[];
                                    map: <Y_213>(projector: Projector<Y_212, Y_213>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_213>[];
                                        map: <Y_214>(projector: Projector<Y_213, Y_214>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_214>[];
                                            map: <Y_215>(projector: Projector<Y_214, Y_215>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_214>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_213>[K]>[];
                                            map: <Y_216>(projector: Projector<Record<K, Y_213>[K], Y_216>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_213>[K]>;
                                        };
                                        asObject(): Record<K, Y_213>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_212>[K]>[];
                                        map: <Y_217>(projector: Projector<Record<K, Y_212>[K], Y_217>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_217>[];
                                            map: <Y_218>(projector: Projector<Y_217, Y_218>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_217>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_212>[K]>[K]>[];
                                            map: <Y_219>(projector: Projector<Record<K, Record<K, Y_212>[K]>[K], Y_219>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_212>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_212>[K]>;
                                    };
                                    asObject(): Record<K, Y_212>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_195>[K]>[K]>[];
                                    map: <Y_220>(projector: Projector<Record<K, Record<K, Y_195>[K]>[K], Y_220>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_220>[];
                                        map: <Y_221>(projector: Projector<Y_220, Y_221>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_221>[];
                                            map: <Y_222>(projector: Projector<Y_221, Y_222>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_221>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_220>[K]>[];
                                            map: <Y_223>(projector: Projector<Record<K, Y_220>[K], Y_223>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_220>[K]>;
                                        };
                                        asObject(): Record<K, Y_220>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K]>[];
                                        map: <Y_224>(projector: Projector<Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K], Y_224>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_224>[];
                                            map: <Y_225>(projector: Projector<Y_224, Y_225>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_224>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K]>[K]>[];
                                            map: <Y_226>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K]>[K], Y_226>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_195>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_195>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_195>[K]>;
                            };
                            asObject(): Record<K, Y_195>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[];
                            map: <Y_227>(projector: Projector<Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K], Y_227>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_227>[];
                                map: <Y_228>(projector: Projector<Y_227, Y_228>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_228>[];
                                    map: <Y_229>(projector: Projector<Y_228, Y_229>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_229>[];
                                        map: <Y_230>(projector: Projector<Y_229, Y_230>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_230>[];
                                            map: <Y_231>(projector: Projector<Y_230, Y_231>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_230>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_229>[K]>[];
                                            map: <Y_232>(projector: Projector<Record<K, Y_229>[K], Y_232>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_229>[K]>;
                                        };
                                        asObject(): Record<K, Y_229>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_228>[K]>[];
                                        map: <Y_233>(projector: Projector<Record<K, Y_228>[K], Y_233>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_233>[];
                                            map: <Y_234>(projector: Projector<Y_233, Y_234>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_233>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_228>[K]>[K]>[];
                                            map: <Y_235>(projector: Projector<Record<K, Record<K, Y_228>[K]>[K], Y_235>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_228>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_228>[K]>;
                                    };
                                    asObject(): Record<K, Y_228>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_227>[K]>[];
                                    map: <Y_236>(projector: Projector<Record<K, Y_227>[K], Y_236>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_236>[];
                                        map: <Y_237>(projector: Projector<Y_236, Y_237>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_237>[];
                                            map: <Y_238>(projector: Projector<Y_237, Y_238>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_237>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_236>[K]>[];
                                            map: <Y_239>(projector: Projector<Record<K, Y_236>[K], Y_239>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_236>[K]>;
                                        };
                                        asObject(): Record<K, Y_236>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_227>[K]>[K]>[];
                                        map: <Y_240>(projector: Projector<Record<K, Record<K, Y_227>[K]>[K], Y_240>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_240>[];
                                            map: <Y_241>(projector: Projector<Y_240, Y_241>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_240>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_227>[K]>[K]>[K]>[];
                                            map: <Y_242>(projector: Projector<Record<K, Record<K, Record<K, Y_227>[K]>[K]>[K], Y_242>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_227>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_227>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_227>[K]>;
                                };
                                asObject(): Record<K, Y_227>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[];
                                map: <Y_243>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K], Y_243>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_243>[];
                                    map: <Y_244>(projector: Projector<Y_243, Y_244>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_244>[];
                                        map: <Y_245>(projector: Projector<Y_244, Y_245>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_245>[];
                                            map: <Y_246>(projector: Projector<Y_245, Y_246>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_245>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_244>[K]>[];
                                            map: <Y_247>(projector: Projector<Record<K, Y_244>[K], Y_247>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_244>[K]>;
                                        };
                                        asObject(): Record<K, Y_244>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_243>[K]>[];
                                        map: <Y_248>(projector: Projector<Record<K, Y_243>[K], Y_248>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_248>[];
                                            map: <Y_249>(projector: Projector<Y_248, Y_249>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_248>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_243>[K]>[K]>[];
                                            map: <Y_250>(projector: Projector<Record<K, Record<K, Y_243>[K]>[K], Y_250>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_243>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_243>[K]>;
                                    };
                                    asObject(): Record<K, Y_243>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_251>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K], Y_251>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_251>[];
                                        map: <Y_252>(projector: Projector<Y_251, Y_252>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_252>[];
                                            map: <Y_253>(projector: Projector<Y_252, Y_253>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_252>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_251>[K]>[];
                                            map: <Y_254>(projector: Projector<Record<K, Y_251>[K], Y_254>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_251>[K]>;
                                        };
                                        asObject(): Record<K, Y_251>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_255>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K], Y_255>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_255>[];
                                            map: <Y_256>(projector: Projector<Y_255, Y_256>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_255>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_257>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_257>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_2>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Y_2>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Y_2>[K]>;
                };
                asObject(): Record<K, Y_2>;
            };
            pick(...keys: K[]): {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Record<K, Y_1>[K]>[];
                map: <Y_258>(projector: Projector<Record<K, Y_1>[K], Y_258>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_258>[];
                    map: <Y_259>(projector: Projector<Y_258, Y_259>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_259>[];
                        map: <Y_260>(projector: Projector<Y_259, Y_260>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_260>[];
                            map: <Y_261>(projector: Projector<Y_260, Y_261>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_261>[];
                                map: <Y_262>(projector: Projector<Y_261, Y_262>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_262>[];
                                    map: <Y_263>(projector: Projector<Y_262, Y_263>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_263>[];
                                        map: <Y_264>(projector: Projector<Y_263, Y_264>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_264>[];
                                            map: <Y_265>(projector: Projector<Y_264, Y_265>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_264>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_263>[K]>[];
                                            map: <Y_266>(projector: Projector<Record<K, Y_263>[K], Y_266>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_263>[K]>;
                                        };
                                        asObject(): Record<K, Y_263>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_262>[K]>[];
                                        map: <Y_267>(projector: Projector<Record<K, Y_262>[K], Y_267>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_267>[];
                                            map: <Y_268>(projector: Projector<Y_267, Y_268>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_267>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_262>[K]>[K]>[];
                                            map: <Y_269>(projector: Projector<Record<K, Record<K, Y_262>[K]>[K], Y_269>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_262>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_262>[K]>;
                                    };
                                    asObject(): Record<K, Y_262>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_261>[K]>[];
                                    map: <Y_270>(projector: Projector<Record<K, Y_261>[K], Y_270>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_270>[];
                                        map: <Y_271>(projector: Projector<Y_270, Y_271>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_271>[];
                                            map: <Y_272>(projector: Projector<Y_271, Y_272>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_271>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_270>[K]>[];
                                            map: <Y_273>(projector: Projector<Record<K, Y_270>[K], Y_273>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_270>[K]>;
                                        };
                                        asObject(): Record<K, Y_270>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_261>[K]>[K]>[];
                                        map: <Y_274>(projector: Projector<Record<K, Record<K, Y_261>[K]>[K], Y_274>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_274>[];
                                            map: <Y_275>(projector: Projector<Y_274, Y_275>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_274>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_261>[K]>[K]>[K]>[];
                                            map: <Y_276>(projector: Projector<Record<K, Record<K, Record<K, Y_261>[K]>[K]>[K], Y_276>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_261>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_261>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_261>[K]>;
                                };
                                asObject(): Record<K, Y_261>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_260>[K]>[];
                                map: <Y_277>(projector: Projector<Record<K, Y_260>[K], Y_277>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_277>[];
                                    map: <Y_278>(projector: Projector<Y_277, Y_278>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_278>[];
                                        map: <Y_279>(projector: Projector<Y_278, Y_279>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_279>[];
                                            map: <Y_280>(projector: Projector<Y_279, Y_280>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_279>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_278>[K]>[];
                                            map: <Y_281>(projector: Projector<Record<K, Y_278>[K], Y_281>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_278>[K]>;
                                        };
                                        asObject(): Record<K, Y_278>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_277>[K]>[];
                                        map: <Y_282>(projector: Projector<Record<K, Y_277>[K], Y_282>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_282>[];
                                            map: <Y_283>(projector: Projector<Y_282, Y_283>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_282>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_277>[K]>[K]>[];
                                            map: <Y_284>(projector: Projector<Record<K, Record<K, Y_277>[K]>[K], Y_284>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_277>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_277>[K]>;
                                    };
                                    asObject(): Record<K, Y_277>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_260>[K]>[K]>[];
                                    map: <Y_285>(projector: Projector<Record<K, Record<K, Y_260>[K]>[K], Y_285>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_285>[];
                                        map: <Y_286>(projector: Projector<Y_285, Y_286>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_286>[];
                                            map: <Y_287>(projector: Projector<Y_286, Y_287>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_286>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_285>[K]>[];
                                            map: <Y_288>(projector: Projector<Record<K, Y_285>[K], Y_288>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_285>[K]>;
                                        };
                                        asObject(): Record<K, Y_285>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K]>[];
                                        map: <Y_289>(projector: Projector<Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K], Y_289>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_289>[];
                                            map: <Y_290>(projector: Projector<Y_289, Y_290>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_289>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K]>[K]>[];
                                            map: <Y_291>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K]>[K], Y_291>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_260>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_260>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_260>[K]>;
                            };
                            asObject(): Record<K, Y_260>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_259>[K]>[];
                            map: <Y_292>(projector: Projector<Record<K, Y_259>[K], Y_292>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_292>[];
                                map: <Y_293>(projector: Projector<Y_292, Y_293>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_293>[];
                                    map: <Y_294>(projector: Projector<Y_293, Y_294>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_294>[];
                                        map: <Y_295>(projector: Projector<Y_294, Y_295>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_295>[];
                                            map: <Y_296>(projector: Projector<Y_295, Y_296>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_295>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_294>[K]>[];
                                            map: <Y_297>(projector: Projector<Record<K, Y_294>[K], Y_297>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_294>[K]>;
                                        };
                                        asObject(): Record<K, Y_294>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_293>[K]>[];
                                        map: <Y_298>(projector: Projector<Record<K, Y_293>[K], Y_298>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_298>[];
                                            map: <Y_299>(projector: Projector<Y_298, Y_299>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_298>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_293>[K]>[K]>[];
                                            map: <Y_300>(projector: Projector<Record<K, Record<K, Y_293>[K]>[K], Y_300>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_293>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_293>[K]>;
                                    };
                                    asObject(): Record<K, Y_293>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_292>[K]>[];
                                    map: <Y_301>(projector: Projector<Record<K, Y_292>[K], Y_301>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_301>[];
                                        map: <Y_302>(projector: Projector<Y_301, Y_302>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_302>[];
                                            map: <Y_303>(projector: Projector<Y_302, Y_303>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_302>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_301>[K]>[];
                                            map: <Y_304>(projector: Projector<Record<K, Y_301>[K], Y_304>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_301>[K]>;
                                        };
                                        asObject(): Record<K, Y_301>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_292>[K]>[K]>[];
                                        map: <Y_305>(projector: Projector<Record<K, Record<K, Y_292>[K]>[K], Y_305>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_305>[];
                                            map: <Y_306>(projector: Projector<Y_305, Y_306>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_305>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_292>[K]>[K]>[K]>[];
                                            map: <Y_307>(projector: Projector<Record<K, Record<K, Record<K, Y_292>[K]>[K]>[K], Y_307>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_292>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_292>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_292>[K]>;
                                };
                                asObject(): Record<K, Y_292>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_259>[K]>[K]>[];
                                map: <Y_308>(projector: Projector<Record<K, Record<K, Y_259>[K]>[K], Y_308>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_308>[];
                                    map: <Y_309>(projector: Projector<Y_308, Y_309>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_309>[];
                                        map: <Y_310>(projector: Projector<Y_309, Y_310>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_310>[];
                                            map: <Y_311>(projector: Projector<Y_310, Y_311>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_310>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_309>[K]>[];
                                            map: <Y_312>(projector: Projector<Record<K, Y_309>[K], Y_312>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_309>[K]>;
                                        };
                                        asObject(): Record<K, Y_309>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_308>[K]>[];
                                        map: <Y_313>(projector: Projector<Record<K, Y_308>[K], Y_313>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_313>[];
                                            map: <Y_314>(projector: Projector<Y_313, Y_314>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_313>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_308>[K]>[K]>[];
                                            map: <Y_315>(projector: Projector<Record<K, Record<K, Y_308>[K]>[K], Y_315>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_308>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_308>[K]>;
                                    };
                                    asObject(): Record<K, Y_308>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[];
                                    map: <Y_316>(projector: Projector<Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K], Y_316>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_316>[];
                                        map: <Y_317>(projector: Projector<Y_316, Y_317>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_317>[];
                                            map: <Y_318>(projector: Projector<Y_317, Y_318>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_317>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_316>[K]>[];
                                            map: <Y_319>(projector: Projector<Record<K, Y_316>[K], Y_319>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_316>[K]>;
                                        };
                                        asObject(): Record<K, Y_316>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K]>[];
                                        map: <Y_320>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K], Y_320>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_320>[];
                                            map: <Y_321>(projector: Projector<Y_320, Y_321>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_320>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_322>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K]>[K], Y_322>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_259>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_259>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_259>[K]>;
                        };
                        asObject(): Record<K, Y_259>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_258>[K]>[];
                        map: <Y_323>(projector: Projector<Record<K, Y_258>[K], Y_323>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_323>[];
                            map: <Y_324>(projector: Projector<Y_323, Y_324>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_324>[];
                                map: <Y_325>(projector: Projector<Y_324, Y_325>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_325>[];
                                    map: <Y_326>(projector: Projector<Y_325, Y_326>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_326>[];
                                        map: <Y_327>(projector: Projector<Y_326, Y_327>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_327>[];
                                            map: <Y_328>(projector: Projector<Y_327, Y_328>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_327>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_326>[K]>[];
                                            map: <Y_329>(projector: Projector<Record<K, Y_326>[K], Y_329>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_326>[K]>;
                                        };
                                        asObject(): Record<K, Y_326>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_325>[K]>[];
                                        map: <Y_330>(projector: Projector<Record<K, Y_325>[K], Y_330>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_330>[];
                                            map: <Y_331>(projector: Projector<Y_330, Y_331>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_330>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_325>[K]>[K]>[];
                                            map: <Y_332>(projector: Projector<Record<K, Record<K, Y_325>[K]>[K], Y_332>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_325>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_325>[K]>;
                                    };
                                    asObject(): Record<K, Y_325>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_324>[K]>[];
                                    map: <Y_333>(projector: Projector<Record<K, Y_324>[K], Y_333>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_333>[];
                                        map: <Y_334>(projector: Projector<Y_333, Y_334>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_334>[];
                                            map: <Y_335>(projector: Projector<Y_334, Y_335>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_334>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_333>[K]>[];
                                            map: <Y_336>(projector: Projector<Record<K, Y_333>[K], Y_336>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_333>[K]>;
                                        };
                                        asObject(): Record<K, Y_333>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_324>[K]>[K]>[];
                                        map: <Y_337>(projector: Projector<Record<K, Record<K, Y_324>[K]>[K], Y_337>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_337>[];
                                            map: <Y_338>(projector: Projector<Y_337, Y_338>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_337>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_324>[K]>[K]>[K]>[];
                                            map: <Y_339>(projector: Projector<Record<K, Record<K, Record<K, Y_324>[K]>[K]>[K], Y_339>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_324>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_324>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_324>[K]>;
                                };
                                asObject(): Record<K, Y_324>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_323>[K]>[];
                                map: <Y_340>(projector: Projector<Record<K, Y_323>[K], Y_340>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_340>[];
                                    map: <Y_341>(projector: Projector<Y_340, Y_341>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_341>[];
                                        map: <Y_342>(projector: Projector<Y_341, Y_342>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_342>[];
                                            map: <Y_343>(projector: Projector<Y_342, Y_343>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_342>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_341>[K]>[];
                                            map: <Y_344>(projector: Projector<Record<K, Y_341>[K], Y_344>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_341>[K]>;
                                        };
                                        asObject(): Record<K, Y_341>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_340>[K]>[];
                                        map: <Y_345>(projector: Projector<Record<K, Y_340>[K], Y_345>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_345>[];
                                            map: <Y_346>(projector: Projector<Y_345, Y_346>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_345>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_340>[K]>[K]>[];
                                            map: <Y_347>(projector: Projector<Record<K, Record<K, Y_340>[K]>[K], Y_347>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_340>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_340>[K]>;
                                    };
                                    asObject(): Record<K, Y_340>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_323>[K]>[K]>[];
                                    map: <Y_348>(projector: Projector<Record<K, Record<K, Y_323>[K]>[K], Y_348>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_348>[];
                                        map: <Y_349>(projector: Projector<Y_348, Y_349>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_349>[];
                                            map: <Y_350>(projector: Projector<Y_349, Y_350>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_349>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_348>[K]>[];
                                            map: <Y_351>(projector: Projector<Record<K, Y_348>[K], Y_351>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_348>[K]>;
                                        };
                                        asObject(): Record<K, Y_348>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K]>[];
                                        map: <Y_352>(projector: Projector<Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K], Y_352>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_352>[];
                                            map: <Y_353>(projector: Projector<Y_352, Y_353>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_352>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K]>[K]>[];
                                            map: <Y_354>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K]>[K], Y_354>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_323>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_323>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_323>[K]>;
                            };
                            asObject(): Record<K, Y_323>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_258>[K]>[K]>[];
                            map: <Y_355>(projector: Projector<Record<K, Record<K, Y_258>[K]>[K], Y_355>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_355>[];
                                map: <Y_356>(projector: Projector<Y_355, Y_356>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_356>[];
                                    map: <Y_357>(projector: Projector<Y_356, Y_357>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_357>[];
                                        map: <Y_358>(projector: Projector<Y_357, Y_358>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_358>[];
                                            map: <Y_359>(projector: Projector<Y_358, Y_359>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_358>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_357>[K]>[];
                                            map: <Y_360>(projector: Projector<Record<K, Y_357>[K], Y_360>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_357>[K]>;
                                        };
                                        asObject(): Record<K, Y_357>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_356>[K]>[];
                                        map: <Y_361>(projector: Projector<Record<K, Y_356>[K], Y_361>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_361>[];
                                            map: <Y_362>(projector: Projector<Y_361, Y_362>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_361>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_356>[K]>[K]>[];
                                            map: <Y_363>(projector: Projector<Record<K, Record<K, Y_356>[K]>[K], Y_363>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_356>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_356>[K]>;
                                    };
                                    asObject(): Record<K, Y_356>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_355>[K]>[];
                                    map: <Y_364>(projector: Projector<Record<K, Y_355>[K], Y_364>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_364>[];
                                        map: <Y_365>(projector: Projector<Y_364, Y_365>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_365>[];
                                            map: <Y_366>(projector: Projector<Y_365, Y_366>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_365>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_364>[K]>[];
                                            map: <Y_367>(projector: Projector<Record<K, Y_364>[K], Y_367>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_364>[K]>;
                                        };
                                        asObject(): Record<K, Y_364>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_355>[K]>[K]>[];
                                        map: <Y_368>(projector: Projector<Record<K, Record<K, Y_355>[K]>[K], Y_368>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_368>[];
                                            map: <Y_369>(projector: Projector<Y_368, Y_369>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_368>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_355>[K]>[K]>[K]>[];
                                            map: <Y_370>(projector: Projector<Record<K, Record<K, Record<K, Y_355>[K]>[K]>[K], Y_370>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_355>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_355>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_355>[K]>;
                                };
                                asObject(): Record<K, Y_355>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[];
                                map: <Y_371>(projector: Projector<Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K], Y_371>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_371>[];
                                    map: <Y_372>(projector: Projector<Y_371, Y_372>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_372>[];
                                        map: <Y_373>(projector: Projector<Y_372, Y_373>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_373>[];
                                            map: <Y_374>(projector: Projector<Y_373, Y_374>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_373>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_372>[K]>[];
                                            map: <Y_375>(projector: Projector<Record<K, Y_372>[K], Y_375>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_372>[K]>;
                                        };
                                        asObject(): Record<K, Y_372>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_371>[K]>[];
                                        map: <Y_376>(projector: Projector<Record<K, Y_371>[K], Y_376>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_376>[];
                                            map: <Y_377>(projector: Projector<Y_376, Y_377>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_376>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_371>[K]>[K]>[];
                                            map: <Y_378>(projector: Projector<Record<K, Record<K, Y_371>[K]>[K], Y_378>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_371>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_371>[K]>;
                                    };
                                    asObject(): Record<K, Y_371>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[];
                                    map: <Y_379>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K], Y_379>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_379>[];
                                        map: <Y_380>(projector: Projector<Y_379, Y_380>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_380>[];
                                            map: <Y_381>(projector: Projector<Y_380, Y_381>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_380>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_379>[K]>[];
                                            map: <Y_382>(projector: Projector<Record<K, Y_379>[K], Y_382>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_379>[K]>;
                                        };
                                        asObject(): Record<K, Y_379>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_383>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K], Y_383>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_383>[];
                                            map: <Y_384>(projector: Projector<Y_383, Y_384>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_383>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_385>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K]>[K], Y_385>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_258>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_258>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_258>[K]>;
                    };
                    asObject(): Record<K, Y_258>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Record<K, Y_1>[K]>[K]>[];
                    map: <Y_386>(projector: Projector<Record<K, Record<K, Y_1>[K]>[K], Y_386>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_386>[];
                        map: <Y_387>(projector: Projector<Y_386, Y_387>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_387>[];
                            map: <Y_388>(projector: Projector<Y_387, Y_388>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_388>[];
                                map: <Y_389>(projector: Projector<Y_388, Y_389>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_389>[];
                                    map: <Y_390>(projector: Projector<Y_389, Y_390>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_390>[];
                                        map: <Y_391>(projector: Projector<Y_390, Y_391>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_391>[];
                                            map: <Y_392>(projector: Projector<Y_391, Y_392>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_391>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_390>[K]>[];
                                            map: <Y_393>(projector: Projector<Record<K, Y_390>[K], Y_393>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_390>[K]>;
                                        };
                                        asObject(): Record<K, Y_390>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_389>[K]>[];
                                        map: <Y_394>(projector: Projector<Record<K, Y_389>[K], Y_394>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_394>[];
                                            map: <Y_395>(projector: Projector<Y_394, Y_395>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_394>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_389>[K]>[K]>[];
                                            map: <Y_396>(projector: Projector<Record<K, Record<K, Y_389>[K]>[K], Y_396>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_389>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_389>[K]>;
                                    };
                                    asObject(): Record<K, Y_389>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_388>[K]>[];
                                    map: <Y_397>(projector: Projector<Record<K, Y_388>[K], Y_397>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_397>[];
                                        map: <Y_398>(projector: Projector<Y_397, Y_398>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_398>[];
                                            map: <Y_399>(projector: Projector<Y_398, Y_399>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_398>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_397>[K]>[];
                                            map: <Y_400>(projector: Projector<Record<K, Y_397>[K], Y_400>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_397>[K]>;
                                        };
                                        asObject(): Record<K, Y_397>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_388>[K]>[K]>[];
                                        map: <Y_401>(projector: Projector<Record<K, Record<K, Y_388>[K]>[K], Y_401>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_401>[];
                                            map: <Y_402>(projector: Projector<Y_401, Y_402>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_401>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_388>[K]>[K]>[K]>[];
                                            map: <Y_403>(projector: Projector<Record<K, Record<K, Record<K, Y_388>[K]>[K]>[K], Y_403>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_388>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_388>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_388>[K]>;
                                };
                                asObject(): Record<K, Y_388>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_387>[K]>[];
                                map: <Y_404>(projector: Projector<Record<K, Y_387>[K], Y_404>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_404>[];
                                    map: <Y_405>(projector: Projector<Y_404, Y_405>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_405>[];
                                        map: <Y_406>(projector: Projector<Y_405, Y_406>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_406>[];
                                            map: <Y_407>(projector: Projector<Y_406, Y_407>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_406>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_405>[K]>[];
                                            map: <Y_408>(projector: Projector<Record<K, Y_405>[K], Y_408>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_405>[K]>;
                                        };
                                        asObject(): Record<K, Y_405>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_404>[K]>[];
                                        map: <Y_409>(projector: Projector<Record<K, Y_404>[K], Y_409>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_409>[];
                                            map: <Y_410>(projector: Projector<Y_409, Y_410>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_409>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_404>[K]>[K]>[];
                                            map: <Y_411>(projector: Projector<Record<K, Record<K, Y_404>[K]>[K], Y_411>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_404>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_404>[K]>;
                                    };
                                    asObject(): Record<K, Y_404>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_387>[K]>[K]>[];
                                    map: <Y_412>(projector: Projector<Record<K, Record<K, Y_387>[K]>[K], Y_412>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_412>[];
                                        map: <Y_413>(projector: Projector<Y_412, Y_413>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_413>[];
                                            map: <Y_414>(projector: Projector<Y_413, Y_414>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_413>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_412>[K]>[];
                                            map: <Y_415>(projector: Projector<Record<K, Y_412>[K], Y_415>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_412>[K]>;
                                        };
                                        asObject(): Record<K, Y_412>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K]>[];
                                        map: <Y_416>(projector: Projector<Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K], Y_416>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_416>[];
                                            map: <Y_417>(projector: Projector<Y_416, Y_417>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_416>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K]>[K]>[];
                                            map: <Y_418>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K]>[K], Y_418>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_387>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_387>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_387>[K]>;
                            };
                            asObject(): Record<K, Y_387>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_386>[K]>[];
                            map: <Y_419>(projector: Projector<Record<K, Y_386>[K], Y_419>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_419>[];
                                map: <Y_420>(projector: Projector<Y_419, Y_420>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_420>[];
                                    map: <Y_421>(projector: Projector<Y_420, Y_421>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_421>[];
                                        map: <Y_422>(projector: Projector<Y_421, Y_422>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_422>[];
                                            map: <Y_423>(projector: Projector<Y_422, Y_423>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_422>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_421>[K]>[];
                                            map: <Y_424>(projector: Projector<Record<K, Y_421>[K], Y_424>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_421>[K]>;
                                        };
                                        asObject(): Record<K, Y_421>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_420>[K]>[];
                                        map: <Y_425>(projector: Projector<Record<K, Y_420>[K], Y_425>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_425>[];
                                            map: <Y_426>(projector: Projector<Y_425, Y_426>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_425>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_420>[K]>[K]>[];
                                            map: <Y_427>(projector: Projector<Record<K, Record<K, Y_420>[K]>[K], Y_427>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_420>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_420>[K]>;
                                    };
                                    asObject(): Record<K, Y_420>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_419>[K]>[];
                                    map: <Y_428>(projector: Projector<Record<K, Y_419>[K], Y_428>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_428>[];
                                        map: <Y_429>(projector: Projector<Y_428, Y_429>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_429>[];
                                            map: <Y_430>(projector: Projector<Y_429, Y_430>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_429>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_428>[K]>[];
                                            map: <Y_431>(projector: Projector<Record<K, Y_428>[K], Y_431>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_428>[K]>;
                                        };
                                        asObject(): Record<K, Y_428>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_419>[K]>[K]>[];
                                        map: <Y_432>(projector: Projector<Record<K, Record<K, Y_419>[K]>[K], Y_432>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_432>[];
                                            map: <Y_433>(projector: Projector<Y_432, Y_433>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_432>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_419>[K]>[K]>[K]>[];
                                            map: <Y_434>(projector: Projector<Record<K, Record<K, Record<K, Y_419>[K]>[K]>[K], Y_434>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_419>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_419>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_419>[K]>;
                                };
                                asObject(): Record<K, Y_419>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_386>[K]>[K]>[];
                                map: <Y_435>(projector: Projector<Record<K, Record<K, Y_386>[K]>[K], Y_435>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_435>[];
                                    map: <Y_436>(projector: Projector<Y_435, Y_436>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_436>[];
                                        map: <Y_437>(projector: Projector<Y_436, Y_437>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_437>[];
                                            map: <Y_438>(projector: Projector<Y_437, Y_438>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_437>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_436>[K]>[];
                                            map: <Y_439>(projector: Projector<Record<K, Y_436>[K], Y_439>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_436>[K]>;
                                        };
                                        asObject(): Record<K, Y_436>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_435>[K]>[];
                                        map: <Y_440>(projector: Projector<Record<K, Y_435>[K], Y_440>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_440>[];
                                            map: <Y_441>(projector: Projector<Y_440, Y_441>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_440>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_435>[K]>[K]>[];
                                            map: <Y_442>(projector: Projector<Record<K, Record<K, Y_435>[K]>[K], Y_442>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_435>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_435>[K]>;
                                    };
                                    asObject(): Record<K, Y_435>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[];
                                    map: <Y_443>(projector: Projector<Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K], Y_443>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_443>[];
                                        map: <Y_444>(projector: Projector<Y_443, Y_444>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_444>[];
                                            map: <Y_445>(projector: Projector<Y_444, Y_445>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_444>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_443>[K]>[];
                                            map: <Y_446>(projector: Projector<Record<K, Y_443>[K], Y_446>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_443>[K]>;
                                        };
                                        asObject(): Record<K, Y_443>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K]>[];
                                        map: <Y_447>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K], Y_447>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_447>[];
                                            map: <Y_448>(projector: Projector<Y_447, Y_448>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_447>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_449>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K]>[K], Y_449>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_386>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_386>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_386>[K]>;
                        };
                        asObject(): Record<K, Y_386>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[];
                        map: <Y_450>(projector: Projector<Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K], Y_450>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_450>[];
                            map: <Y_451>(projector: Projector<Y_450, Y_451>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_451>[];
                                map: <Y_452>(projector: Projector<Y_451, Y_452>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_452>[];
                                    map: <Y_453>(projector: Projector<Y_452, Y_453>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_453>[];
                                        map: <Y_454>(projector: Projector<Y_453, Y_454>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_454>[];
                                            map: <Y_455>(projector: Projector<Y_454, Y_455>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_454>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_453>[K]>[];
                                            map: <Y_456>(projector: Projector<Record<K, Y_453>[K], Y_456>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_453>[K]>;
                                        };
                                        asObject(): Record<K, Y_453>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_452>[K]>[];
                                        map: <Y_457>(projector: Projector<Record<K, Y_452>[K], Y_457>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_457>[];
                                            map: <Y_458>(projector: Projector<Y_457, Y_458>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_457>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_452>[K]>[K]>[];
                                            map: <Y_459>(projector: Projector<Record<K, Record<K, Y_452>[K]>[K], Y_459>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_452>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_452>[K]>;
                                    };
                                    asObject(): Record<K, Y_452>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_451>[K]>[];
                                    map: <Y_460>(projector: Projector<Record<K, Y_451>[K], Y_460>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_460>[];
                                        map: <Y_461>(projector: Projector<Y_460, Y_461>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_461>[];
                                            map: <Y_462>(projector: Projector<Y_461, Y_462>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_461>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_460>[K]>[];
                                            map: <Y_463>(projector: Projector<Record<K, Y_460>[K], Y_463>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_460>[K]>;
                                        };
                                        asObject(): Record<K, Y_460>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_451>[K]>[K]>[];
                                        map: <Y_464>(projector: Projector<Record<K, Record<K, Y_451>[K]>[K], Y_464>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_464>[];
                                            map: <Y_465>(projector: Projector<Y_464, Y_465>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_464>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_451>[K]>[K]>[K]>[];
                                            map: <Y_466>(projector: Projector<Record<K, Record<K, Record<K, Y_451>[K]>[K]>[K], Y_466>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_451>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_451>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_451>[K]>;
                                };
                                asObject(): Record<K, Y_451>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_450>[K]>[];
                                map: <Y_467>(projector: Projector<Record<K, Y_450>[K], Y_467>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_467>[];
                                    map: <Y_468>(projector: Projector<Y_467, Y_468>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_468>[];
                                        map: <Y_469>(projector: Projector<Y_468, Y_469>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_469>[];
                                            map: <Y_470>(projector: Projector<Y_469, Y_470>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_469>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_468>[K]>[];
                                            map: <Y_471>(projector: Projector<Record<K, Y_468>[K], Y_471>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_468>[K]>;
                                        };
                                        asObject(): Record<K, Y_468>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_467>[K]>[];
                                        map: <Y_472>(projector: Projector<Record<K, Y_467>[K], Y_472>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_472>[];
                                            map: <Y_473>(projector: Projector<Y_472, Y_473>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_472>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_467>[K]>[K]>[];
                                            map: <Y_474>(projector: Projector<Record<K, Record<K, Y_467>[K]>[K], Y_474>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_467>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_467>[K]>;
                                    };
                                    asObject(): Record<K, Y_467>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_450>[K]>[K]>[];
                                    map: <Y_475>(projector: Projector<Record<K, Record<K, Y_450>[K]>[K], Y_475>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_475>[];
                                        map: <Y_476>(projector: Projector<Y_475, Y_476>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_476>[];
                                            map: <Y_477>(projector: Projector<Y_476, Y_477>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_476>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_475>[K]>[];
                                            map: <Y_478>(projector: Projector<Record<K, Y_475>[K], Y_478>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_475>[K]>;
                                        };
                                        asObject(): Record<K, Y_475>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K]>[];
                                        map: <Y_479>(projector: Projector<Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K], Y_479>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_479>[];
                                            map: <Y_480>(projector: Projector<Y_479, Y_480>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_479>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K]>[K]>[];
                                            map: <Y_481>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K]>[K], Y_481>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_450>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_450>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_450>[K]>;
                            };
                            asObject(): Record<K, Y_450>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[];
                            map: <Y_482>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K], Y_482>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_482>[];
                                map: <Y_483>(projector: Projector<Y_482, Y_483>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_483>[];
                                    map: <Y_484>(projector: Projector<Y_483, Y_484>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_484>[];
                                        map: <Y_485>(projector: Projector<Y_484, Y_485>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_485>[];
                                            map: <Y_486>(projector: Projector<Y_485, Y_486>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_485>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_484>[K]>[];
                                            map: <Y_487>(projector: Projector<Record<K, Y_484>[K], Y_487>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_484>[K]>;
                                        };
                                        asObject(): Record<K, Y_484>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_483>[K]>[];
                                        map: <Y_488>(projector: Projector<Record<K, Y_483>[K], Y_488>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_488>[];
                                            map: <Y_489>(projector: Projector<Y_488, Y_489>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_488>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_483>[K]>[K]>[];
                                            map: <Y_490>(projector: Projector<Record<K, Record<K, Y_483>[K]>[K], Y_490>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_483>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_483>[K]>;
                                    };
                                    asObject(): Record<K, Y_483>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_482>[K]>[];
                                    map: <Y_491>(projector: Projector<Record<K, Y_482>[K], Y_491>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_491>[];
                                        map: <Y_492>(projector: Projector<Y_491, Y_492>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_492>[];
                                            map: <Y_493>(projector: Projector<Y_492, Y_493>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_492>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_491>[K]>[];
                                            map: <Y_494>(projector: Projector<Record<K, Y_491>[K], Y_494>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_491>[K]>;
                                        };
                                        asObject(): Record<K, Y_491>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_482>[K]>[K]>[];
                                        map: <Y_495>(projector: Projector<Record<K, Record<K, Y_482>[K]>[K], Y_495>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_495>[];
                                            map: <Y_496>(projector: Projector<Y_495, Y_496>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_495>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_482>[K]>[K]>[K]>[];
                                            map: <Y_497>(projector: Projector<Record<K, Record<K, Record<K, Y_482>[K]>[K]>[K], Y_497>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_482>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_482>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_482>[K]>;
                                };
                                asObject(): Record<K, Y_482>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[];
                                map: <Y_498>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K], Y_498>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_498>[];
                                    map: <Y_499>(projector: Projector<Y_498, Y_499>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_499>[];
                                        map: <Y_500>(projector: Projector<Y_499, Y_500>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_500>[];
                                            map: <Y_501>(projector: Projector<Y_500, Y_501>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_500>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_499>[K]>[];
                                            map: <Y_502>(projector: Projector<Record<K, Y_499>[K], Y_502>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_499>[K]>;
                                        };
                                        asObject(): Record<K, Y_499>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_498>[K]>[];
                                        map: <Y_503>(projector: Projector<Record<K, Y_498>[K], Y_503>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_503>[];
                                            map: <Y_504>(projector: Projector<Y_503, Y_504>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_503>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_498>[K]>[K]>[];
                                            map: <Y_505>(projector: Projector<Record<K, Record<K, Y_498>[K]>[K], Y_505>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_498>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_498>[K]>;
                                    };
                                    asObject(): Record<K, Y_498>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_506>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K], Y_506>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_506>[];
                                        map: <Y_507>(projector: Projector<Y_506, Y_507>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_507>[];
                                            map: <Y_508>(projector: Projector<Y_507, Y_508>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_507>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_506>[K]>[];
                                            map: <Y_509>(projector: Projector<Record<K, Y_506>[K], Y_509>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_506>[K]>;
                                        };
                                        asObject(): Record<K, Y_506>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_510>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_510>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_510>[];
                                            map: <Y_511>(projector: Projector<Y_510, Y_511>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_510>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_512>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_512>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1>[K]>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Record<K, Y_1>[K]>[K]>;
                };
                asObject(): Record<K, Record<K, Y_1>[K]>;
            };
            asObject(): Record<K, Y_1>;
        };
        pick(...keys: K[]): {
            keys: () => string[];
            values: () => unknown[];
            entries: () => Tuple<K, Record<K, Y>[K]>[];
            map: <Y_513>(projector: Projector<Record<K, Y>[K], Y_513>) => {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Y_513>[];
                map: <Y_514>(projector: Projector<Y_513, Y_514>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_514>[];
                    map: <Y_515>(projector: Projector<Y_514, Y_515>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_515>[];
                        map: <Y_516>(projector: Projector<Y_515, Y_516>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_516>[];
                            map: <Y_517>(projector: Projector<Y_516, Y_517>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_517>[];
                                map: <Y_518>(projector: Projector<Y_517, Y_518>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_518>[];
                                    map: <Y_519>(projector: Projector<Y_518, Y_519>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_519>[];
                                        map: <Y_520>(projector: Projector<Y_519, Y_520>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_520>[];
                                            map: <Y_521>(projector: Projector<Y_520, Y_521>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_520>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_519>[K]>[];
                                            map: <Y_522>(projector: Projector<Record<K, Y_519>[K], Y_522>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_519>[K]>;
                                        };
                                        asObject(): Record<K, Y_519>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_518>[K]>[];
                                        map: <Y_523>(projector: Projector<Record<K, Y_518>[K], Y_523>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_523>[];
                                            map: <Y_524>(projector: Projector<Y_523, Y_524>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_523>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_518>[K]>[K]>[];
                                            map: <Y_525>(projector: Projector<Record<K, Record<K, Y_518>[K]>[K], Y_525>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_518>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_518>[K]>;
                                    };
                                    asObject(): Record<K, Y_518>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_517>[K]>[];
                                    map: <Y_526>(projector: Projector<Record<K, Y_517>[K], Y_526>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_526>[];
                                        map: <Y_527>(projector: Projector<Y_526, Y_527>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_527>[];
                                            map: <Y_528>(projector: Projector<Y_527, Y_528>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_527>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_526>[K]>[];
                                            map: <Y_529>(projector: Projector<Record<K, Y_526>[K], Y_529>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_526>[K]>;
                                        };
                                        asObject(): Record<K, Y_526>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_517>[K]>[K]>[];
                                        map: <Y_530>(projector: Projector<Record<K, Record<K, Y_517>[K]>[K], Y_530>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_530>[];
                                            map: <Y_531>(projector: Projector<Y_530, Y_531>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_530>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_517>[K]>[K]>[K]>[];
                                            map: <Y_532>(projector: Projector<Record<K, Record<K, Record<K, Y_517>[K]>[K]>[K], Y_532>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_517>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_517>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_517>[K]>;
                                };
                                asObject(): Record<K, Y_517>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_516>[K]>[];
                                map: <Y_533>(projector: Projector<Record<K, Y_516>[K], Y_533>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_533>[];
                                    map: <Y_534>(projector: Projector<Y_533, Y_534>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_534>[];
                                        map: <Y_535>(projector: Projector<Y_534, Y_535>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_535>[];
                                            map: <Y_536>(projector: Projector<Y_535, Y_536>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_535>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_534>[K]>[];
                                            map: <Y_537>(projector: Projector<Record<K, Y_534>[K], Y_537>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_534>[K]>;
                                        };
                                        asObject(): Record<K, Y_534>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_533>[K]>[];
                                        map: <Y_538>(projector: Projector<Record<K, Y_533>[K], Y_538>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_538>[];
                                            map: <Y_539>(projector: Projector<Y_538, Y_539>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_538>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_533>[K]>[K]>[];
                                            map: <Y_540>(projector: Projector<Record<K, Record<K, Y_533>[K]>[K], Y_540>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_533>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_533>[K]>;
                                    };
                                    asObject(): Record<K, Y_533>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_516>[K]>[K]>[];
                                    map: <Y_541>(projector: Projector<Record<K, Record<K, Y_516>[K]>[K], Y_541>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_541>[];
                                        map: <Y_542>(projector: Projector<Y_541, Y_542>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_542>[];
                                            map: <Y_543>(projector: Projector<Y_542, Y_543>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_542>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_541>[K]>[];
                                            map: <Y_544>(projector: Projector<Record<K, Y_541>[K], Y_544>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_541>[K]>;
                                        };
                                        asObject(): Record<K, Y_541>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K]>[];
                                        map: <Y_545>(projector: Projector<Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K], Y_545>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_545>[];
                                            map: <Y_546>(projector: Projector<Y_545, Y_546>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_545>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K]>[K]>[];
                                            map: <Y_547>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K]>[K], Y_547>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_516>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_516>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_516>[K]>;
                            };
                            asObject(): Record<K, Y_516>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_515>[K]>[];
                            map: <Y_548>(projector: Projector<Record<K, Y_515>[K], Y_548>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_548>[];
                                map: <Y_549>(projector: Projector<Y_548, Y_549>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_549>[];
                                    map: <Y_550>(projector: Projector<Y_549, Y_550>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_550>[];
                                        map: <Y_551>(projector: Projector<Y_550, Y_551>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_551>[];
                                            map: <Y_552>(projector: Projector<Y_551, Y_552>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_551>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_550>[K]>[];
                                            map: <Y_553>(projector: Projector<Record<K, Y_550>[K], Y_553>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_550>[K]>;
                                        };
                                        asObject(): Record<K, Y_550>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_549>[K]>[];
                                        map: <Y_554>(projector: Projector<Record<K, Y_549>[K], Y_554>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_554>[];
                                            map: <Y_555>(projector: Projector<Y_554, Y_555>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_554>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_549>[K]>[K]>[];
                                            map: <Y_556>(projector: Projector<Record<K, Record<K, Y_549>[K]>[K], Y_556>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_549>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_549>[K]>;
                                    };
                                    asObject(): Record<K, Y_549>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_548>[K]>[];
                                    map: <Y_557>(projector: Projector<Record<K, Y_548>[K], Y_557>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_557>[];
                                        map: <Y_558>(projector: Projector<Y_557, Y_558>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_558>[];
                                            map: <Y_559>(projector: Projector<Y_558, Y_559>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_558>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_557>[K]>[];
                                            map: <Y_560>(projector: Projector<Record<K, Y_557>[K], Y_560>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_557>[K]>;
                                        };
                                        asObject(): Record<K, Y_557>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_548>[K]>[K]>[];
                                        map: <Y_561>(projector: Projector<Record<K, Record<K, Y_548>[K]>[K], Y_561>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_561>[];
                                            map: <Y_562>(projector: Projector<Y_561, Y_562>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_561>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_548>[K]>[K]>[K]>[];
                                            map: <Y_563>(projector: Projector<Record<K, Record<K, Record<K, Y_548>[K]>[K]>[K], Y_563>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_548>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_548>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_548>[K]>;
                                };
                                asObject(): Record<K, Y_548>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_515>[K]>[K]>[];
                                map: <Y_564>(projector: Projector<Record<K, Record<K, Y_515>[K]>[K], Y_564>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_564>[];
                                    map: <Y_565>(projector: Projector<Y_564, Y_565>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_565>[];
                                        map: <Y_566>(projector: Projector<Y_565, Y_566>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_566>[];
                                            map: <Y_567>(projector: Projector<Y_566, Y_567>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_566>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_565>[K]>[];
                                            map: <Y_568>(projector: Projector<Record<K, Y_565>[K], Y_568>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_565>[K]>;
                                        };
                                        asObject(): Record<K, Y_565>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_564>[K]>[];
                                        map: <Y_569>(projector: Projector<Record<K, Y_564>[K], Y_569>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_569>[];
                                            map: <Y_570>(projector: Projector<Y_569, Y_570>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_569>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_564>[K]>[K]>[];
                                            map: <Y_571>(projector: Projector<Record<K, Record<K, Y_564>[K]>[K], Y_571>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_564>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_564>[K]>;
                                    };
                                    asObject(): Record<K, Y_564>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[];
                                    map: <Y_572>(projector: Projector<Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K], Y_572>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_572>[];
                                        map: <Y_573>(projector: Projector<Y_572, Y_573>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_573>[];
                                            map: <Y_574>(projector: Projector<Y_573, Y_574>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_573>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_572>[K]>[];
                                            map: <Y_575>(projector: Projector<Record<K, Y_572>[K], Y_575>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_572>[K]>;
                                        };
                                        asObject(): Record<K, Y_572>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K]>[];
                                        map: <Y_576>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K], Y_576>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_576>[];
                                            map: <Y_577>(projector: Projector<Y_576, Y_577>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_576>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_578>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K]>[K], Y_578>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_515>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_515>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_515>[K]>;
                        };
                        asObject(): Record<K, Y_515>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_514>[K]>[];
                        map: <Y_579>(projector: Projector<Record<K, Y_514>[K], Y_579>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_579>[];
                            map: <Y_580>(projector: Projector<Y_579, Y_580>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_580>[];
                                map: <Y_581>(projector: Projector<Y_580, Y_581>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_581>[];
                                    map: <Y_582>(projector: Projector<Y_581, Y_582>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_582>[];
                                        map: <Y_583>(projector: Projector<Y_582, Y_583>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_583>[];
                                            map: <Y_584>(projector: Projector<Y_583, Y_584>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_583>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_582>[K]>[];
                                            map: <Y_585>(projector: Projector<Record<K, Y_582>[K], Y_585>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_582>[K]>;
                                        };
                                        asObject(): Record<K, Y_582>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_581>[K]>[];
                                        map: <Y_586>(projector: Projector<Record<K, Y_581>[K], Y_586>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_586>[];
                                            map: <Y_587>(projector: Projector<Y_586, Y_587>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_586>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_581>[K]>[K]>[];
                                            map: <Y_588>(projector: Projector<Record<K, Record<K, Y_581>[K]>[K], Y_588>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_581>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_581>[K]>;
                                    };
                                    asObject(): Record<K, Y_581>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_580>[K]>[];
                                    map: <Y_589>(projector: Projector<Record<K, Y_580>[K], Y_589>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_589>[];
                                        map: <Y_590>(projector: Projector<Y_589, Y_590>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_590>[];
                                            map: <Y_591>(projector: Projector<Y_590, Y_591>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_590>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_589>[K]>[];
                                            map: <Y_592>(projector: Projector<Record<K, Y_589>[K], Y_592>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_589>[K]>;
                                        };
                                        asObject(): Record<K, Y_589>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_580>[K]>[K]>[];
                                        map: <Y_593>(projector: Projector<Record<K, Record<K, Y_580>[K]>[K], Y_593>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_593>[];
                                            map: <Y_594>(projector: Projector<Y_593, Y_594>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_593>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_580>[K]>[K]>[K]>[];
                                            map: <Y_595>(projector: Projector<Record<K, Record<K, Record<K, Y_580>[K]>[K]>[K], Y_595>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_580>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_580>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_580>[K]>;
                                };
                                asObject(): Record<K, Y_580>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_579>[K]>[];
                                map: <Y_596>(projector: Projector<Record<K, Y_579>[K], Y_596>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_596>[];
                                    map: <Y_597>(projector: Projector<Y_596, Y_597>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_597>[];
                                        map: <Y_598>(projector: Projector<Y_597, Y_598>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_598>[];
                                            map: <Y_599>(projector: Projector<Y_598, Y_599>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_598>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_597>[K]>[];
                                            map: <Y_600>(projector: Projector<Record<K, Y_597>[K], Y_600>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_597>[K]>;
                                        };
                                        asObject(): Record<K, Y_597>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_596>[K]>[];
                                        map: <Y_601>(projector: Projector<Record<K, Y_596>[K], Y_601>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_601>[];
                                            map: <Y_602>(projector: Projector<Y_601, Y_602>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_601>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_596>[K]>[K]>[];
                                            map: <Y_603>(projector: Projector<Record<K, Record<K, Y_596>[K]>[K], Y_603>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_596>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_596>[K]>;
                                    };
                                    asObject(): Record<K, Y_596>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_579>[K]>[K]>[];
                                    map: <Y_604>(projector: Projector<Record<K, Record<K, Y_579>[K]>[K], Y_604>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_604>[];
                                        map: <Y_605>(projector: Projector<Y_604, Y_605>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_605>[];
                                            map: <Y_606>(projector: Projector<Y_605, Y_606>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_605>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_604>[K]>[];
                                            map: <Y_607>(projector: Projector<Record<K, Y_604>[K], Y_607>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_604>[K]>;
                                        };
                                        asObject(): Record<K, Y_604>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K]>[];
                                        map: <Y_608>(projector: Projector<Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K], Y_608>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_608>[];
                                            map: <Y_609>(projector: Projector<Y_608, Y_609>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_608>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K]>[K]>[];
                                            map: <Y_610>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K]>[K], Y_610>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_579>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_579>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_579>[K]>;
                            };
                            asObject(): Record<K, Y_579>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_514>[K]>[K]>[];
                            map: <Y_611>(projector: Projector<Record<K, Record<K, Y_514>[K]>[K], Y_611>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_611>[];
                                map: <Y_612>(projector: Projector<Y_611, Y_612>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_612>[];
                                    map: <Y_613>(projector: Projector<Y_612, Y_613>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_613>[];
                                        map: <Y_614>(projector: Projector<Y_613, Y_614>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_614>[];
                                            map: <Y_615>(projector: Projector<Y_614, Y_615>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_614>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_613>[K]>[];
                                            map: <Y_616>(projector: Projector<Record<K, Y_613>[K], Y_616>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_613>[K]>;
                                        };
                                        asObject(): Record<K, Y_613>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_612>[K]>[];
                                        map: <Y_617>(projector: Projector<Record<K, Y_612>[K], Y_617>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_617>[];
                                            map: <Y_618>(projector: Projector<Y_617, Y_618>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_617>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_612>[K]>[K]>[];
                                            map: <Y_619>(projector: Projector<Record<K, Record<K, Y_612>[K]>[K], Y_619>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_612>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_612>[K]>;
                                    };
                                    asObject(): Record<K, Y_612>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_611>[K]>[];
                                    map: <Y_620>(projector: Projector<Record<K, Y_611>[K], Y_620>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_620>[];
                                        map: <Y_621>(projector: Projector<Y_620, Y_621>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_621>[];
                                            map: <Y_622>(projector: Projector<Y_621, Y_622>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_621>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_620>[K]>[];
                                            map: <Y_623>(projector: Projector<Record<K, Y_620>[K], Y_623>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_620>[K]>;
                                        };
                                        asObject(): Record<K, Y_620>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_611>[K]>[K]>[];
                                        map: <Y_624>(projector: Projector<Record<K, Record<K, Y_611>[K]>[K], Y_624>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_624>[];
                                            map: <Y_625>(projector: Projector<Y_624, Y_625>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_624>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_611>[K]>[K]>[K]>[];
                                            map: <Y_626>(projector: Projector<Record<K, Record<K, Record<K, Y_611>[K]>[K]>[K], Y_626>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_611>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_611>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_611>[K]>;
                                };
                                asObject(): Record<K, Y_611>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[];
                                map: <Y_627>(projector: Projector<Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K], Y_627>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_627>[];
                                    map: <Y_628>(projector: Projector<Y_627, Y_628>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_628>[];
                                        map: <Y_629>(projector: Projector<Y_628, Y_629>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_629>[];
                                            map: <Y_630>(projector: Projector<Y_629, Y_630>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_629>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_628>[K]>[];
                                            map: <Y_631>(projector: Projector<Record<K, Y_628>[K], Y_631>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_628>[K]>;
                                        };
                                        asObject(): Record<K, Y_628>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_627>[K]>[];
                                        map: <Y_632>(projector: Projector<Record<K, Y_627>[K], Y_632>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_632>[];
                                            map: <Y_633>(projector: Projector<Y_632, Y_633>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_632>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_627>[K]>[K]>[];
                                            map: <Y_634>(projector: Projector<Record<K, Record<K, Y_627>[K]>[K], Y_634>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_627>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_627>[K]>;
                                    };
                                    asObject(): Record<K, Y_627>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[];
                                    map: <Y_635>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K], Y_635>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_635>[];
                                        map: <Y_636>(projector: Projector<Y_635, Y_636>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_636>[];
                                            map: <Y_637>(projector: Projector<Y_636, Y_637>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_636>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_635>[K]>[];
                                            map: <Y_638>(projector: Projector<Record<K, Y_635>[K], Y_638>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_635>[K]>;
                                        };
                                        asObject(): Record<K, Y_635>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_639>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K], Y_639>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_639>[];
                                            map: <Y_640>(projector: Projector<Y_639, Y_640>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_639>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_641>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K]>[K], Y_641>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_514>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_514>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_514>[K]>;
                    };
                    asObject(): Record<K, Y_514>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Y_513>[K]>[];
                    map: <Y_642>(projector: Projector<Record<K, Y_513>[K], Y_642>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_642>[];
                        map: <Y_643>(projector: Projector<Y_642, Y_643>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_643>[];
                            map: <Y_644>(projector: Projector<Y_643, Y_644>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_644>[];
                                map: <Y_645>(projector: Projector<Y_644, Y_645>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_645>[];
                                    map: <Y_646>(projector: Projector<Y_645, Y_646>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_646>[];
                                        map: <Y_647>(projector: Projector<Y_646, Y_647>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_647>[];
                                            map: <Y_648>(projector: Projector<Y_647, Y_648>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_647>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_646>[K]>[];
                                            map: <Y_649>(projector: Projector<Record<K, Y_646>[K], Y_649>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_646>[K]>;
                                        };
                                        asObject(): Record<K, Y_646>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_645>[K]>[];
                                        map: <Y_650>(projector: Projector<Record<K, Y_645>[K], Y_650>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_650>[];
                                            map: <Y_651>(projector: Projector<Y_650, Y_651>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_650>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_645>[K]>[K]>[];
                                            map: <Y_652>(projector: Projector<Record<K, Record<K, Y_645>[K]>[K], Y_652>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_645>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_645>[K]>;
                                    };
                                    asObject(): Record<K, Y_645>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_644>[K]>[];
                                    map: <Y_653>(projector: Projector<Record<K, Y_644>[K], Y_653>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_653>[];
                                        map: <Y_654>(projector: Projector<Y_653, Y_654>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_654>[];
                                            map: <Y_655>(projector: Projector<Y_654, Y_655>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_654>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_653>[K]>[];
                                            map: <Y_656>(projector: Projector<Record<K, Y_653>[K], Y_656>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_653>[K]>;
                                        };
                                        asObject(): Record<K, Y_653>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_644>[K]>[K]>[];
                                        map: <Y_657>(projector: Projector<Record<K, Record<K, Y_644>[K]>[K], Y_657>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_657>[];
                                            map: <Y_658>(projector: Projector<Y_657, Y_658>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_657>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_644>[K]>[K]>[K]>[];
                                            map: <Y_659>(projector: Projector<Record<K, Record<K, Record<K, Y_644>[K]>[K]>[K], Y_659>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_644>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_644>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_644>[K]>;
                                };
                                asObject(): Record<K, Y_644>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_643>[K]>[];
                                map: <Y_660>(projector: Projector<Record<K, Y_643>[K], Y_660>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_660>[];
                                    map: <Y_661>(projector: Projector<Y_660, Y_661>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_661>[];
                                        map: <Y_662>(projector: Projector<Y_661, Y_662>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_662>[];
                                            map: <Y_663>(projector: Projector<Y_662, Y_663>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_662>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_661>[K]>[];
                                            map: <Y_664>(projector: Projector<Record<K, Y_661>[K], Y_664>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_661>[K]>;
                                        };
                                        asObject(): Record<K, Y_661>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_660>[K]>[];
                                        map: <Y_665>(projector: Projector<Record<K, Y_660>[K], Y_665>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_665>[];
                                            map: <Y_666>(projector: Projector<Y_665, Y_666>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_665>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_660>[K]>[K]>[];
                                            map: <Y_667>(projector: Projector<Record<K, Record<K, Y_660>[K]>[K], Y_667>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_660>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_660>[K]>;
                                    };
                                    asObject(): Record<K, Y_660>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_643>[K]>[K]>[];
                                    map: <Y_668>(projector: Projector<Record<K, Record<K, Y_643>[K]>[K], Y_668>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_668>[];
                                        map: <Y_669>(projector: Projector<Y_668, Y_669>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_669>[];
                                            map: <Y_670>(projector: Projector<Y_669, Y_670>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_669>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_668>[K]>[];
                                            map: <Y_671>(projector: Projector<Record<K, Y_668>[K], Y_671>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_668>[K]>;
                                        };
                                        asObject(): Record<K, Y_668>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K]>[];
                                        map: <Y_672>(projector: Projector<Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K], Y_672>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_672>[];
                                            map: <Y_673>(projector: Projector<Y_672, Y_673>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_672>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K]>[K]>[];
                                            map: <Y_674>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K]>[K], Y_674>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_643>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_643>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_643>[K]>;
                            };
                            asObject(): Record<K, Y_643>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_642>[K]>[];
                            map: <Y_675>(projector: Projector<Record<K, Y_642>[K], Y_675>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_675>[];
                                map: <Y_676>(projector: Projector<Y_675, Y_676>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_676>[];
                                    map: <Y_677>(projector: Projector<Y_676, Y_677>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_677>[];
                                        map: <Y_678>(projector: Projector<Y_677, Y_678>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_678>[];
                                            map: <Y_679>(projector: Projector<Y_678, Y_679>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_678>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_677>[K]>[];
                                            map: <Y_680>(projector: Projector<Record<K, Y_677>[K], Y_680>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_677>[K]>;
                                        };
                                        asObject(): Record<K, Y_677>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_676>[K]>[];
                                        map: <Y_681>(projector: Projector<Record<K, Y_676>[K], Y_681>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_681>[];
                                            map: <Y_682>(projector: Projector<Y_681, Y_682>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_681>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_676>[K]>[K]>[];
                                            map: <Y_683>(projector: Projector<Record<K, Record<K, Y_676>[K]>[K], Y_683>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_676>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_676>[K]>;
                                    };
                                    asObject(): Record<K, Y_676>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_675>[K]>[];
                                    map: <Y_684>(projector: Projector<Record<K, Y_675>[K], Y_684>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_684>[];
                                        map: <Y_685>(projector: Projector<Y_684, Y_685>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_685>[];
                                            map: <Y_686>(projector: Projector<Y_685, Y_686>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_685>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_684>[K]>[];
                                            map: <Y_687>(projector: Projector<Record<K, Y_684>[K], Y_687>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_684>[K]>;
                                        };
                                        asObject(): Record<K, Y_684>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_675>[K]>[K]>[];
                                        map: <Y_688>(projector: Projector<Record<K, Record<K, Y_675>[K]>[K], Y_688>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_688>[];
                                            map: <Y_689>(projector: Projector<Y_688, Y_689>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_688>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_675>[K]>[K]>[K]>[];
                                            map: <Y_690>(projector: Projector<Record<K, Record<K, Record<K, Y_675>[K]>[K]>[K], Y_690>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_675>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_675>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_675>[K]>;
                                };
                                asObject(): Record<K, Y_675>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_642>[K]>[K]>[];
                                map: <Y_691>(projector: Projector<Record<K, Record<K, Y_642>[K]>[K], Y_691>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_691>[];
                                    map: <Y_692>(projector: Projector<Y_691, Y_692>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_692>[];
                                        map: <Y_693>(projector: Projector<Y_692, Y_693>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_693>[];
                                            map: <Y_694>(projector: Projector<Y_693, Y_694>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_693>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_692>[K]>[];
                                            map: <Y_695>(projector: Projector<Record<K, Y_692>[K], Y_695>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_692>[K]>;
                                        };
                                        asObject(): Record<K, Y_692>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_691>[K]>[];
                                        map: <Y_696>(projector: Projector<Record<K, Y_691>[K], Y_696>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_696>[];
                                            map: <Y_697>(projector: Projector<Y_696, Y_697>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_696>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_691>[K]>[K]>[];
                                            map: <Y_698>(projector: Projector<Record<K, Record<K, Y_691>[K]>[K], Y_698>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_691>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_691>[K]>;
                                    };
                                    asObject(): Record<K, Y_691>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[];
                                    map: <Y_699>(projector: Projector<Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K], Y_699>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_699>[];
                                        map: <Y_700>(projector: Projector<Y_699, Y_700>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_700>[];
                                            map: <Y_701>(projector: Projector<Y_700, Y_701>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_700>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_699>[K]>[];
                                            map: <Y_702>(projector: Projector<Record<K, Y_699>[K], Y_702>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_699>[K]>;
                                        };
                                        asObject(): Record<K, Y_699>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K]>[];
                                        map: <Y_703>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K], Y_703>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_703>[];
                                            map: <Y_704>(projector: Projector<Y_703, Y_704>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_703>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_705>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K]>[K], Y_705>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_642>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_642>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_642>[K]>;
                        };
                        asObject(): Record<K, Y_642>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Y_513>[K]>[K]>[];
                        map: <Y_706>(projector: Projector<Record<K, Record<K, Y_513>[K]>[K], Y_706>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_706>[];
                            map: <Y_707>(projector: Projector<Y_706, Y_707>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_707>[];
                                map: <Y_708>(projector: Projector<Y_707, Y_708>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_708>[];
                                    map: <Y_709>(projector: Projector<Y_708, Y_709>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_709>[];
                                        map: <Y_710>(projector: Projector<Y_709, Y_710>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_710>[];
                                            map: <Y_711>(projector: Projector<Y_710, Y_711>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_710>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_709>[K]>[];
                                            map: <Y_712>(projector: Projector<Record<K, Y_709>[K], Y_712>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_709>[K]>;
                                        };
                                        asObject(): Record<K, Y_709>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_708>[K]>[];
                                        map: <Y_713>(projector: Projector<Record<K, Y_708>[K], Y_713>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_713>[];
                                            map: <Y_714>(projector: Projector<Y_713, Y_714>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_713>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_708>[K]>[K]>[];
                                            map: <Y_715>(projector: Projector<Record<K, Record<K, Y_708>[K]>[K], Y_715>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_708>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_708>[K]>;
                                    };
                                    asObject(): Record<K, Y_708>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_707>[K]>[];
                                    map: <Y_716>(projector: Projector<Record<K, Y_707>[K], Y_716>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_716>[];
                                        map: <Y_717>(projector: Projector<Y_716, Y_717>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_717>[];
                                            map: <Y_718>(projector: Projector<Y_717, Y_718>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_717>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_716>[K]>[];
                                            map: <Y_719>(projector: Projector<Record<K, Y_716>[K], Y_719>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_716>[K]>;
                                        };
                                        asObject(): Record<K, Y_716>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_707>[K]>[K]>[];
                                        map: <Y_720>(projector: Projector<Record<K, Record<K, Y_707>[K]>[K], Y_720>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_720>[];
                                            map: <Y_721>(projector: Projector<Y_720, Y_721>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_720>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_707>[K]>[K]>[K]>[];
                                            map: <Y_722>(projector: Projector<Record<K, Record<K, Record<K, Y_707>[K]>[K]>[K], Y_722>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_707>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_707>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_707>[K]>;
                                };
                                asObject(): Record<K, Y_707>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_706>[K]>[];
                                map: <Y_723>(projector: Projector<Record<K, Y_706>[K], Y_723>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_723>[];
                                    map: <Y_724>(projector: Projector<Y_723, Y_724>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_724>[];
                                        map: <Y_725>(projector: Projector<Y_724, Y_725>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_725>[];
                                            map: <Y_726>(projector: Projector<Y_725, Y_726>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_725>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_724>[K]>[];
                                            map: <Y_727>(projector: Projector<Record<K, Y_724>[K], Y_727>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_724>[K]>;
                                        };
                                        asObject(): Record<K, Y_724>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_723>[K]>[];
                                        map: <Y_728>(projector: Projector<Record<K, Y_723>[K], Y_728>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_728>[];
                                            map: <Y_729>(projector: Projector<Y_728, Y_729>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_728>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_723>[K]>[K]>[];
                                            map: <Y_730>(projector: Projector<Record<K, Record<K, Y_723>[K]>[K], Y_730>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_723>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_723>[K]>;
                                    };
                                    asObject(): Record<K, Y_723>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_706>[K]>[K]>[];
                                    map: <Y_731>(projector: Projector<Record<K, Record<K, Y_706>[K]>[K], Y_731>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_731>[];
                                        map: <Y_732>(projector: Projector<Y_731, Y_732>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_732>[];
                                            map: <Y_733>(projector: Projector<Y_732, Y_733>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_732>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_731>[K]>[];
                                            map: <Y_734>(projector: Projector<Record<K, Y_731>[K], Y_734>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_731>[K]>;
                                        };
                                        asObject(): Record<K, Y_731>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K]>[];
                                        map: <Y_735>(projector: Projector<Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K], Y_735>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_735>[];
                                            map: <Y_736>(projector: Projector<Y_735, Y_736>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_735>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K]>[K]>[];
                                            map: <Y_737>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K]>[K], Y_737>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_706>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_706>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_706>[K]>;
                            };
                            asObject(): Record<K, Y_706>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[];
                            map: <Y_738>(projector: Projector<Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K], Y_738>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_738>[];
                                map: <Y_739>(projector: Projector<Y_738, Y_739>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_739>[];
                                    map: <Y_740>(projector: Projector<Y_739, Y_740>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_740>[];
                                        map: <Y_741>(projector: Projector<Y_740, Y_741>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_741>[];
                                            map: <Y_742>(projector: Projector<Y_741, Y_742>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_741>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_740>[K]>[];
                                            map: <Y_743>(projector: Projector<Record<K, Y_740>[K], Y_743>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_740>[K]>;
                                        };
                                        asObject(): Record<K, Y_740>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_739>[K]>[];
                                        map: <Y_744>(projector: Projector<Record<K, Y_739>[K], Y_744>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_744>[];
                                            map: <Y_745>(projector: Projector<Y_744, Y_745>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_744>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_739>[K]>[K]>[];
                                            map: <Y_746>(projector: Projector<Record<K, Record<K, Y_739>[K]>[K], Y_746>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_739>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_739>[K]>;
                                    };
                                    asObject(): Record<K, Y_739>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_738>[K]>[];
                                    map: <Y_747>(projector: Projector<Record<K, Y_738>[K], Y_747>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_747>[];
                                        map: <Y_748>(projector: Projector<Y_747, Y_748>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_748>[];
                                            map: <Y_749>(projector: Projector<Y_748, Y_749>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_748>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_747>[K]>[];
                                            map: <Y_750>(projector: Projector<Record<K, Y_747>[K], Y_750>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_747>[K]>;
                                        };
                                        asObject(): Record<K, Y_747>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_738>[K]>[K]>[];
                                        map: <Y_751>(projector: Projector<Record<K, Record<K, Y_738>[K]>[K], Y_751>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_751>[];
                                            map: <Y_752>(projector: Projector<Y_751, Y_752>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_751>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_738>[K]>[K]>[K]>[];
                                            map: <Y_753>(projector: Projector<Record<K, Record<K, Record<K, Y_738>[K]>[K]>[K], Y_753>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_738>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_738>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_738>[K]>;
                                };
                                asObject(): Record<K, Y_738>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[];
                                map: <Y_754>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K], Y_754>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_754>[];
                                    map: <Y_755>(projector: Projector<Y_754, Y_755>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_755>[];
                                        map: <Y_756>(projector: Projector<Y_755, Y_756>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_756>[];
                                            map: <Y_757>(projector: Projector<Y_756, Y_757>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_756>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_755>[K]>[];
                                            map: <Y_758>(projector: Projector<Record<K, Y_755>[K], Y_758>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_755>[K]>;
                                        };
                                        asObject(): Record<K, Y_755>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_754>[K]>[];
                                        map: <Y_759>(projector: Projector<Record<K, Y_754>[K], Y_759>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_759>[];
                                            map: <Y_760>(projector: Projector<Y_759, Y_760>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_759>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_754>[K]>[K]>[];
                                            map: <Y_761>(projector: Projector<Record<K, Record<K, Y_754>[K]>[K], Y_761>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_754>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_754>[K]>;
                                    };
                                    asObject(): Record<K, Y_754>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_762>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K], Y_762>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_762>[];
                                        map: <Y_763>(projector: Projector<Y_762, Y_763>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_763>[];
                                            map: <Y_764>(projector: Projector<Y_763, Y_764>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_763>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_762>[K]>[];
                                            map: <Y_765>(projector: Projector<Record<K, Y_762>[K], Y_765>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_762>[K]>;
                                        };
                                        asObject(): Record<K, Y_762>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_766>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K], Y_766>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_766>[];
                                            map: <Y_767>(projector: Projector<Y_766, Y_767>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_766>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_768>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_768>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_513>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Y_513>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Y_513>[K]>;
                };
                asObject(): Record<K, Y_513>;
            };
            pick(...keys: K[]): {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Record<K, Record<K, Y>[K]>[K]>[];
                map: <Y_769>(projector: Projector<Record<K, Record<K, Y>[K]>[K], Y_769>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_769>[];
                    map: <Y_770>(projector: Projector<Y_769, Y_770>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_770>[];
                        map: <Y_771>(projector: Projector<Y_770, Y_771>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_771>[];
                            map: <Y_772>(projector: Projector<Y_771, Y_772>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_772>[];
                                map: <Y_773>(projector: Projector<Y_772, Y_773>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_773>[];
                                    map: <Y_774>(projector: Projector<Y_773, Y_774>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_774>[];
                                        map: <Y_775>(projector: Projector<Y_774, Y_775>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_775>[];
                                            map: <Y_776>(projector: Projector<Y_775, Y_776>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_775>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_774>[K]>[];
                                            map: <Y_777>(projector: Projector<Record<K, Y_774>[K], Y_777>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_774>[K]>;
                                        };
                                        asObject(): Record<K, Y_774>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_773>[K]>[];
                                        map: <Y_778>(projector: Projector<Record<K, Y_773>[K], Y_778>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_778>[];
                                            map: <Y_779>(projector: Projector<Y_778, Y_779>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_778>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_773>[K]>[K]>[];
                                            map: <Y_780>(projector: Projector<Record<K, Record<K, Y_773>[K]>[K], Y_780>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_773>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_773>[K]>;
                                    };
                                    asObject(): Record<K, Y_773>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_772>[K]>[];
                                    map: <Y_781>(projector: Projector<Record<K, Y_772>[K], Y_781>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_781>[];
                                        map: <Y_782>(projector: Projector<Y_781, Y_782>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_782>[];
                                            map: <Y_783>(projector: Projector<Y_782, Y_783>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_782>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_781>[K]>[];
                                            map: <Y_784>(projector: Projector<Record<K, Y_781>[K], Y_784>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_781>[K]>;
                                        };
                                        asObject(): Record<K, Y_781>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_772>[K]>[K]>[];
                                        map: <Y_785>(projector: Projector<Record<K, Record<K, Y_772>[K]>[K], Y_785>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_785>[];
                                            map: <Y_786>(projector: Projector<Y_785, Y_786>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_785>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_772>[K]>[K]>[K]>[];
                                            map: <Y_787>(projector: Projector<Record<K, Record<K, Record<K, Y_772>[K]>[K]>[K], Y_787>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_772>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_772>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_772>[K]>;
                                };
                                asObject(): Record<K, Y_772>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_771>[K]>[];
                                map: <Y_788>(projector: Projector<Record<K, Y_771>[K], Y_788>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_788>[];
                                    map: <Y_789>(projector: Projector<Y_788, Y_789>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_789>[];
                                        map: <Y_790>(projector: Projector<Y_789, Y_790>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_790>[];
                                            map: <Y_791>(projector: Projector<Y_790, Y_791>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_790>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_789>[K]>[];
                                            map: <Y_792>(projector: Projector<Record<K, Y_789>[K], Y_792>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_789>[K]>;
                                        };
                                        asObject(): Record<K, Y_789>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_788>[K]>[];
                                        map: <Y_793>(projector: Projector<Record<K, Y_788>[K], Y_793>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_793>[];
                                            map: <Y_794>(projector: Projector<Y_793, Y_794>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_793>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_788>[K]>[K]>[];
                                            map: <Y_795>(projector: Projector<Record<K, Record<K, Y_788>[K]>[K], Y_795>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_788>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_788>[K]>;
                                    };
                                    asObject(): Record<K, Y_788>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_771>[K]>[K]>[];
                                    map: <Y_796>(projector: Projector<Record<K, Record<K, Y_771>[K]>[K], Y_796>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_796>[];
                                        map: <Y_797>(projector: Projector<Y_796, Y_797>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_797>[];
                                            map: <Y_798>(projector: Projector<Y_797, Y_798>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_797>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_796>[K]>[];
                                            map: <Y_799>(projector: Projector<Record<K, Y_796>[K], Y_799>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_796>[K]>;
                                        };
                                        asObject(): Record<K, Y_796>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K]>[];
                                        map: <Y_800>(projector: Projector<Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K], Y_800>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_800>[];
                                            map: <Y_801>(projector: Projector<Y_800, Y_801>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_800>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K]>[K]>[];
                                            map: <Y_802>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K]>[K], Y_802>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_771>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_771>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_771>[K]>;
                            };
                            asObject(): Record<K, Y_771>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_770>[K]>[];
                            map: <Y_803>(projector: Projector<Record<K, Y_770>[K], Y_803>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_803>[];
                                map: <Y_804>(projector: Projector<Y_803, Y_804>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_804>[];
                                    map: <Y_805>(projector: Projector<Y_804, Y_805>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_805>[];
                                        map: <Y_806>(projector: Projector<Y_805, Y_806>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_806>[];
                                            map: <Y_807>(projector: Projector<Y_806, Y_807>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_806>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_805>[K]>[];
                                            map: <Y_808>(projector: Projector<Record<K, Y_805>[K], Y_808>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_805>[K]>;
                                        };
                                        asObject(): Record<K, Y_805>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_804>[K]>[];
                                        map: <Y_809>(projector: Projector<Record<K, Y_804>[K], Y_809>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_809>[];
                                            map: <Y_810>(projector: Projector<Y_809, Y_810>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_809>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_804>[K]>[K]>[];
                                            map: <Y_811>(projector: Projector<Record<K, Record<K, Y_804>[K]>[K], Y_811>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_804>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_804>[K]>;
                                    };
                                    asObject(): Record<K, Y_804>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_803>[K]>[];
                                    map: <Y_812>(projector: Projector<Record<K, Y_803>[K], Y_812>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_812>[];
                                        map: <Y_813>(projector: Projector<Y_812, Y_813>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_813>[];
                                            map: <Y_814>(projector: Projector<Y_813, Y_814>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_813>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_812>[K]>[];
                                            map: <Y_815>(projector: Projector<Record<K, Y_812>[K], Y_815>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_812>[K]>;
                                        };
                                        asObject(): Record<K, Y_812>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_803>[K]>[K]>[];
                                        map: <Y_816>(projector: Projector<Record<K, Record<K, Y_803>[K]>[K], Y_816>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_816>[];
                                            map: <Y_817>(projector: Projector<Y_816, Y_817>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_816>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_803>[K]>[K]>[K]>[];
                                            map: <Y_818>(projector: Projector<Record<K, Record<K, Record<K, Y_803>[K]>[K]>[K], Y_818>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_803>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_803>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_803>[K]>;
                                };
                                asObject(): Record<K, Y_803>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_770>[K]>[K]>[];
                                map: <Y_819>(projector: Projector<Record<K, Record<K, Y_770>[K]>[K], Y_819>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_819>[];
                                    map: <Y_820>(projector: Projector<Y_819, Y_820>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_820>[];
                                        map: <Y_821>(projector: Projector<Y_820, Y_821>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_821>[];
                                            map: <Y_822>(projector: Projector<Y_821, Y_822>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_821>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_820>[K]>[];
                                            map: <Y_823>(projector: Projector<Record<K, Y_820>[K], Y_823>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_820>[K]>;
                                        };
                                        asObject(): Record<K, Y_820>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_819>[K]>[];
                                        map: <Y_824>(projector: Projector<Record<K, Y_819>[K], Y_824>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_824>[];
                                            map: <Y_825>(projector: Projector<Y_824, Y_825>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_824>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_819>[K]>[K]>[];
                                            map: <Y_826>(projector: Projector<Record<K, Record<K, Y_819>[K]>[K], Y_826>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_819>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_819>[K]>;
                                    };
                                    asObject(): Record<K, Y_819>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[];
                                    map: <Y_827>(projector: Projector<Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K], Y_827>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_827>[];
                                        map: <Y_828>(projector: Projector<Y_827, Y_828>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_828>[];
                                            map: <Y_829>(projector: Projector<Y_828, Y_829>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_828>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_827>[K]>[];
                                            map: <Y_830>(projector: Projector<Record<K, Y_827>[K], Y_830>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_827>[K]>;
                                        };
                                        asObject(): Record<K, Y_827>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K]>[];
                                        map: <Y_831>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K], Y_831>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_831>[];
                                            map: <Y_832>(projector: Projector<Y_831, Y_832>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_831>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_833>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K]>[K], Y_833>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_770>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_770>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_770>[K]>;
                        };
                        asObject(): Record<K, Y_770>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_769>[K]>[];
                        map: <Y_834>(projector: Projector<Record<K, Y_769>[K], Y_834>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_834>[];
                            map: <Y_835>(projector: Projector<Y_834, Y_835>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_835>[];
                                map: <Y_836>(projector: Projector<Y_835, Y_836>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_836>[];
                                    map: <Y_837>(projector: Projector<Y_836, Y_837>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_837>[];
                                        map: <Y_838>(projector: Projector<Y_837, Y_838>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_838>[];
                                            map: <Y_839>(projector: Projector<Y_838, Y_839>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_838>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_837>[K]>[];
                                            map: <Y_840>(projector: Projector<Record<K, Y_837>[K], Y_840>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_837>[K]>;
                                        };
                                        asObject(): Record<K, Y_837>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_836>[K]>[];
                                        map: <Y_841>(projector: Projector<Record<K, Y_836>[K], Y_841>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_841>[];
                                            map: <Y_842>(projector: Projector<Y_841, Y_842>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_841>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_836>[K]>[K]>[];
                                            map: <Y_843>(projector: Projector<Record<K, Record<K, Y_836>[K]>[K], Y_843>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_836>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_836>[K]>;
                                    };
                                    asObject(): Record<K, Y_836>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_835>[K]>[];
                                    map: <Y_844>(projector: Projector<Record<K, Y_835>[K], Y_844>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_844>[];
                                        map: <Y_845>(projector: Projector<Y_844, Y_845>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_845>[];
                                            map: <Y_846>(projector: Projector<Y_845, Y_846>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_845>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_844>[K]>[];
                                            map: <Y_847>(projector: Projector<Record<K, Y_844>[K], Y_847>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_844>[K]>;
                                        };
                                        asObject(): Record<K, Y_844>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_835>[K]>[K]>[];
                                        map: <Y_848>(projector: Projector<Record<K, Record<K, Y_835>[K]>[K], Y_848>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_848>[];
                                            map: <Y_849>(projector: Projector<Y_848, Y_849>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_848>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_835>[K]>[K]>[K]>[];
                                            map: <Y_850>(projector: Projector<Record<K, Record<K, Record<K, Y_835>[K]>[K]>[K], Y_850>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_835>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_835>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_835>[K]>;
                                };
                                asObject(): Record<K, Y_835>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_834>[K]>[];
                                map: <Y_851>(projector: Projector<Record<K, Y_834>[K], Y_851>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_851>[];
                                    map: <Y_852>(projector: Projector<Y_851, Y_852>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_852>[];
                                        map: <Y_853>(projector: Projector<Y_852, Y_853>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_853>[];
                                            map: <Y_854>(projector: Projector<Y_853, Y_854>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_853>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_852>[K]>[];
                                            map: <Y_855>(projector: Projector<Record<K, Y_852>[K], Y_855>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_852>[K]>;
                                        };
                                        asObject(): Record<K, Y_852>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_851>[K]>[];
                                        map: <Y_856>(projector: Projector<Record<K, Y_851>[K], Y_856>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_856>[];
                                            map: <Y_857>(projector: Projector<Y_856, Y_857>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_856>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_851>[K]>[K]>[];
                                            map: <Y_858>(projector: Projector<Record<K, Record<K, Y_851>[K]>[K], Y_858>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_851>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_851>[K]>;
                                    };
                                    asObject(): Record<K, Y_851>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_834>[K]>[K]>[];
                                    map: <Y_859>(projector: Projector<Record<K, Record<K, Y_834>[K]>[K], Y_859>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_859>[];
                                        map: <Y_860>(projector: Projector<Y_859, Y_860>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_860>[];
                                            map: <Y_861>(projector: Projector<Y_860, Y_861>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_860>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_859>[K]>[];
                                            map: <Y_862>(projector: Projector<Record<K, Y_859>[K], Y_862>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_859>[K]>;
                                        };
                                        asObject(): Record<K, Y_859>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K]>[];
                                        map: <Y_863>(projector: Projector<Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K], Y_863>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_863>[];
                                            map: <Y_864>(projector: Projector<Y_863, Y_864>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_863>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K]>[K]>[];
                                            map: <Y_865>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K]>[K], Y_865>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_834>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_834>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_834>[K]>;
                            };
                            asObject(): Record<K, Y_834>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_769>[K]>[K]>[];
                            map: <Y_866>(projector: Projector<Record<K, Record<K, Y_769>[K]>[K], Y_866>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_866>[];
                                map: <Y_867>(projector: Projector<Y_866, Y_867>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_867>[];
                                    map: <Y_868>(projector: Projector<Y_867, Y_868>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_868>[];
                                        map: <Y_869>(projector: Projector<Y_868, Y_869>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_869>[];
                                            map: <Y_870>(projector: Projector<Y_869, Y_870>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_869>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_868>[K]>[];
                                            map: <Y_871>(projector: Projector<Record<K, Y_868>[K], Y_871>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_868>[K]>;
                                        };
                                        asObject(): Record<K, Y_868>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_867>[K]>[];
                                        map: <Y_872>(projector: Projector<Record<K, Y_867>[K], Y_872>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_872>[];
                                            map: <Y_873>(projector: Projector<Y_872, Y_873>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_872>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_867>[K]>[K]>[];
                                            map: <Y_874>(projector: Projector<Record<K, Record<K, Y_867>[K]>[K], Y_874>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_867>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_867>[K]>;
                                    };
                                    asObject(): Record<K, Y_867>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_866>[K]>[];
                                    map: <Y_875>(projector: Projector<Record<K, Y_866>[K], Y_875>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_875>[];
                                        map: <Y_876>(projector: Projector<Y_875, Y_876>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_876>[];
                                            map: <Y_877>(projector: Projector<Y_876, Y_877>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_876>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_875>[K]>[];
                                            map: <Y_878>(projector: Projector<Record<K, Y_875>[K], Y_878>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_875>[K]>;
                                        };
                                        asObject(): Record<K, Y_875>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_866>[K]>[K]>[];
                                        map: <Y_879>(projector: Projector<Record<K, Record<K, Y_866>[K]>[K], Y_879>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_879>[];
                                            map: <Y_880>(projector: Projector<Y_879, Y_880>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_879>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_866>[K]>[K]>[K]>[];
                                            map: <Y_881>(projector: Projector<Record<K, Record<K, Record<K, Y_866>[K]>[K]>[K], Y_881>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_866>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_866>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_866>[K]>;
                                };
                                asObject(): Record<K, Y_866>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[];
                                map: <Y_882>(projector: Projector<Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K], Y_882>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_882>[];
                                    map: <Y_883>(projector: Projector<Y_882, Y_883>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_883>[];
                                        map: <Y_884>(projector: Projector<Y_883, Y_884>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_884>[];
                                            map: <Y_885>(projector: Projector<Y_884, Y_885>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_884>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_883>[K]>[];
                                            map: <Y_886>(projector: Projector<Record<K, Y_883>[K], Y_886>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_883>[K]>;
                                        };
                                        asObject(): Record<K, Y_883>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_882>[K]>[];
                                        map: <Y_887>(projector: Projector<Record<K, Y_882>[K], Y_887>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_887>[];
                                            map: <Y_888>(projector: Projector<Y_887, Y_888>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_887>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_882>[K]>[K]>[];
                                            map: <Y_889>(projector: Projector<Record<K, Record<K, Y_882>[K]>[K], Y_889>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_882>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_882>[K]>;
                                    };
                                    asObject(): Record<K, Y_882>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[];
                                    map: <Y_890>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K], Y_890>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_890>[];
                                        map: <Y_891>(projector: Projector<Y_890, Y_891>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_891>[];
                                            map: <Y_892>(projector: Projector<Y_891, Y_892>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_891>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_890>[K]>[];
                                            map: <Y_893>(projector: Projector<Record<K, Y_890>[K], Y_893>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_890>[K]>;
                                        };
                                        asObject(): Record<K, Y_890>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_894>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K], Y_894>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_894>[];
                                            map: <Y_895>(projector: Projector<Y_894, Y_895>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_894>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_896>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K]>[K], Y_896>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_769>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_769>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_769>[K]>;
                    };
                    asObject(): Record<K, Y_769>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[];
                    map: <Y_897>(projector: Projector<Record<K, Record<K, Record<K, Y>[K]>[K]>[K], Y_897>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_897>[];
                        map: <Y_898>(projector: Projector<Y_897, Y_898>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_898>[];
                            map: <Y_899>(projector: Projector<Y_898, Y_899>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_899>[];
                                map: <Y_900>(projector: Projector<Y_899, Y_900>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_900>[];
                                    map: <Y_901>(projector: Projector<Y_900, Y_901>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_901>[];
                                        map: <Y_902>(projector: Projector<Y_901, Y_902>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_902>[];
                                            map: <Y_903>(projector: Projector<Y_902, Y_903>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_902>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_901>[K]>[];
                                            map: <Y_904>(projector: Projector<Record<K, Y_901>[K], Y_904>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_901>[K]>;
                                        };
                                        asObject(): Record<K, Y_901>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_900>[K]>[];
                                        map: <Y_905>(projector: Projector<Record<K, Y_900>[K], Y_905>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_905>[];
                                            map: <Y_906>(projector: Projector<Y_905, Y_906>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_905>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_900>[K]>[K]>[];
                                            map: <Y_907>(projector: Projector<Record<K, Record<K, Y_900>[K]>[K], Y_907>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_900>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_900>[K]>;
                                    };
                                    asObject(): Record<K, Y_900>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_899>[K]>[];
                                    map: <Y_908>(projector: Projector<Record<K, Y_899>[K], Y_908>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_908>[];
                                        map: <Y_909>(projector: Projector<Y_908, Y_909>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_909>[];
                                            map: <Y_910>(projector: Projector<Y_909, Y_910>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_909>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_908>[K]>[];
                                            map: <Y_911>(projector: Projector<Record<K, Y_908>[K], Y_911>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_908>[K]>;
                                        };
                                        asObject(): Record<K, Y_908>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_899>[K]>[K]>[];
                                        map: <Y_912>(projector: Projector<Record<K, Record<K, Y_899>[K]>[K], Y_912>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_912>[];
                                            map: <Y_913>(projector: Projector<Y_912, Y_913>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_912>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_899>[K]>[K]>[K]>[];
                                            map: <Y_914>(projector: Projector<Record<K, Record<K, Record<K, Y_899>[K]>[K]>[K], Y_914>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_899>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_899>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_899>[K]>;
                                };
                                asObject(): Record<K, Y_899>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_898>[K]>[];
                                map: <Y_915>(projector: Projector<Record<K, Y_898>[K], Y_915>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_915>[];
                                    map: <Y_916>(projector: Projector<Y_915, Y_916>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_916>[];
                                        map: <Y_917>(projector: Projector<Y_916, Y_917>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_917>[];
                                            map: <Y_918>(projector: Projector<Y_917, Y_918>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_917>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_916>[K]>[];
                                            map: <Y_919>(projector: Projector<Record<K, Y_916>[K], Y_919>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_916>[K]>;
                                        };
                                        asObject(): Record<K, Y_916>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_915>[K]>[];
                                        map: <Y_920>(projector: Projector<Record<K, Y_915>[K], Y_920>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_920>[];
                                            map: <Y_921>(projector: Projector<Y_920, Y_921>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_920>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_915>[K]>[K]>[];
                                            map: <Y_922>(projector: Projector<Record<K, Record<K, Y_915>[K]>[K], Y_922>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_915>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_915>[K]>;
                                    };
                                    asObject(): Record<K, Y_915>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_898>[K]>[K]>[];
                                    map: <Y_923>(projector: Projector<Record<K, Record<K, Y_898>[K]>[K], Y_923>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_923>[];
                                        map: <Y_924>(projector: Projector<Y_923, Y_924>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_924>[];
                                            map: <Y_925>(projector: Projector<Y_924, Y_925>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_924>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_923>[K]>[];
                                            map: <Y_926>(projector: Projector<Record<K, Y_923>[K], Y_926>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_923>[K]>;
                                        };
                                        asObject(): Record<K, Y_923>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K]>[];
                                        map: <Y_927>(projector: Projector<Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K], Y_927>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_927>[];
                                            map: <Y_928>(projector: Projector<Y_927, Y_928>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_927>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K]>[K]>[];
                                            map: <Y_929>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K]>[K], Y_929>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_898>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_898>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_898>[K]>;
                            };
                            asObject(): Record<K, Y_898>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_897>[K]>[];
                            map: <Y_930>(projector: Projector<Record<K, Y_897>[K], Y_930>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_930>[];
                                map: <Y_931>(projector: Projector<Y_930, Y_931>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_931>[];
                                    map: <Y_932>(projector: Projector<Y_931, Y_932>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_932>[];
                                        map: <Y_933>(projector: Projector<Y_932, Y_933>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_933>[];
                                            map: <Y_934>(projector: Projector<Y_933, Y_934>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_933>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_932>[K]>[];
                                            map: <Y_935>(projector: Projector<Record<K, Y_932>[K], Y_935>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_932>[K]>;
                                        };
                                        asObject(): Record<K, Y_932>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_931>[K]>[];
                                        map: <Y_936>(projector: Projector<Record<K, Y_931>[K], Y_936>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_936>[];
                                            map: <Y_937>(projector: Projector<Y_936, Y_937>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_936>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_931>[K]>[K]>[];
                                            map: <Y_938>(projector: Projector<Record<K, Record<K, Y_931>[K]>[K], Y_938>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_931>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_931>[K]>;
                                    };
                                    asObject(): Record<K, Y_931>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_930>[K]>[];
                                    map: <Y_939>(projector: Projector<Record<K, Y_930>[K], Y_939>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_939>[];
                                        map: <Y_940>(projector: Projector<Y_939, Y_940>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_940>[];
                                            map: <Y_941>(projector: Projector<Y_940, Y_941>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_940>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_939>[K]>[];
                                            map: <Y_942>(projector: Projector<Record<K, Y_939>[K], Y_942>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_939>[K]>;
                                        };
                                        asObject(): Record<K, Y_939>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_930>[K]>[K]>[];
                                        map: <Y_943>(projector: Projector<Record<K, Record<K, Y_930>[K]>[K], Y_943>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_943>[];
                                            map: <Y_944>(projector: Projector<Y_943, Y_944>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_943>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_930>[K]>[K]>[K]>[];
                                            map: <Y_945>(projector: Projector<Record<K, Record<K, Record<K, Y_930>[K]>[K]>[K], Y_945>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_930>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_930>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_930>[K]>;
                                };
                                asObject(): Record<K, Y_930>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_897>[K]>[K]>[];
                                map: <Y_946>(projector: Projector<Record<K, Record<K, Y_897>[K]>[K], Y_946>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_946>[];
                                    map: <Y_947>(projector: Projector<Y_946, Y_947>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_947>[];
                                        map: <Y_948>(projector: Projector<Y_947, Y_948>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_948>[];
                                            map: <Y_949>(projector: Projector<Y_948, Y_949>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_948>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_947>[K]>[];
                                            map: <Y_950>(projector: Projector<Record<K, Y_947>[K], Y_950>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_947>[K]>;
                                        };
                                        asObject(): Record<K, Y_947>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_946>[K]>[];
                                        map: <Y_951>(projector: Projector<Record<K, Y_946>[K], Y_951>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_951>[];
                                            map: <Y_952>(projector: Projector<Y_951, Y_952>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_951>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_946>[K]>[K]>[];
                                            map: <Y_953>(projector: Projector<Record<K, Record<K, Y_946>[K]>[K], Y_953>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_946>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_946>[K]>;
                                    };
                                    asObject(): Record<K, Y_946>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[];
                                    map: <Y_954>(projector: Projector<Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K], Y_954>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_954>[];
                                        map: <Y_955>(projector: Projector<Y_954, Y_955>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_955>[];
                                            map: <Y_956>(projector: Projector<Y_955, Y_956>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_955>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_954>[K]>[];
                                            map: <Y_957>(projector: Projector<Record<K, Y_954>[K], Y_957>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_954>[K]>;
                                        };
                                        asObject(): Record<K, Y_954>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K]>[];
                                        map: <Y_958>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K], Y_958>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_958>[];
                                            map: <Y_959>(projector: Projector<Y_958, Y_959>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_958>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_960>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K]>[K], Y_960>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_897>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_897>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_897>[K]>;
                        };
                        asObject(): Record<K, Y_897>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[];
                        map: <Y_961>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K], Y_961>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_961>[];
                            map: <Y_962>(projector: Projector<Y_961, Y_962>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_962>[];
                                map: <Y_963>(projector: Projector<Y_962, Y_963>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_963>[];
                                    map: <Y_964>(projector: Projector<Y_963, Y_964>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_964>[];
                                        map: <Y_965>(projector: Projector<Y_964, Y_965>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_965>[];
                                            map: <Y_966>(projector: Projector<Y_965, Y_966>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_965>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_964>[K]>[];
                                            map: <Y_967>(projector: Projector<Record<K, Y_964>[K], Y_967>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_964>[K]>;
                                        };
                                        asObject(): Record<K, Y_964>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_963>[K]>[];
                                        map: <Y_968>(projector: Projector<Record<K, Y_963>[K], Y_968>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_968>[];
                                            map: <Y_969>(projector: Projector<Y_968, Y_969>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_968>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_963>[K]>[K]>[];
                                            map: <Y_970>(projector: Projector<Record<K, Record<K, Y_963>[K]>[K], Y_970>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_963>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_963>[K]>;
                                    };
                                    asObject(): Record<K, Y_963>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_962>[K]>[];
                                    map: <Y_971>(projector: Projector<Record<K, Y_962>[K], Y_971>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_971>[];
                                        map: <Y_972>(projector: Projector<Y_971, Y_972>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_972>[];
                                            map: <Y_973>(projector: Projector<Y_972, Y_973>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_972>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_971>[K]>[];
                                            map: <Y_974>(projector: Projector<Record<K, Y_971>[K], Y_974>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_971>[K]>;
                                        };
                                        asObject(): Record<K, Y_971>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_962>[K]>[K]>[];
                                        map: <Y_975>(projector: Projector<Record<K, Record<K, Y_962>[K]>[K], Y_975>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_975>[];
                                            map: <Y_976>(projector: Projector<Y_975, Y_976>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_975>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_962>[K]>[K]>[K]>[];
                                            map: <Y_977>(projector: Projector<Record<K, Record<K, Record<K, Y_962>[K]>[K]>[K], Y_977>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_962>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_962>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_962>[K]>;
                                };
                                asObject(): Record<K, Y_962>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_961>[K]>[];
                                map: <Y_978>(projector: Projector<Record<K, Y_961>[K], Y_978>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_978>[];
                                    map: <Y_979>(projector: Projector<Y_978, Y_979>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_979>[];
                                        map: <Y_980>(projector: Projector<Y_979, Y_980>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_980>[];
                                            map: <Y_981>(projector: Projector<Y_980, Y_981>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_980>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_979>[K]>[];
                                            map: <Y_982>(projector: Projector<Record<K, Y_979>[K], Y_982>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_979>[K]>;
                                        };
                                        asObject(): Record<K, Y_979>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_978>[K]>[];
                                        map: <Y_983>(projector: Projector<Record<K, Y_978>[K], Y_983>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_983>[];
                                            map: <Y_984>(projector: Projector<Y_983, Y_984>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_983>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_978>[K]>[K]>[];
                                            map: <Y_985>(projector: Projector<Record<K, Record<K, Y_978>[K]>[K], Y_985>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_978>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_978>[K]>;
                                    };
                                    asObject(): Record<K, Y_978>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_961>[K]>[K]>[];
                                    map: <Y_986>(projector: Projector<Record<K, Record<K, Y_961>[K]>[K], Y_986>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_986>[];
                                        map: <Y_987>(projector: Projector<Y_986, Y_987>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_987>[];
                                            map: <Y_988>(projector: Projector<Y_987, Y_988>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_987>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_986>[K]>[];
                                            map: <Y_989>(projector: Projector<Record<K, Y_986>[K], Y_989>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_986>[K]>;
                                        };
                                        asObject(): Record<K, Y_986>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K]>[];
                                        map: <Y_990>(projector: Projector<Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K], Y_990>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_990>[];
                                            map: <Y_991>(projector: Projector<Y_990, Y_991>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_990>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K]>[K]>[];
                                            map: <Y_992>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K]>[K], Y_992>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_961>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_961>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_961>[K]>;
                            };
                            asObject(): Record<K, Y_961>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[];
                            map: <Y_993>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K], Y_993>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_993>[];
                                map: <Y_994>(projector: Projector<Y_993, Y_994>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_994>[];
                                    map: <Y_995>(projector: Projector<Y_994, Y_995>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_995>[];
                                        map: <Y_996>(projector: Projector<Y_995, Y_996>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_996>[];
                                            map: <Y_997>(projector: Projector<Y_996, Y_997>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_996>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_995>[K]>[];
                                            map: <Y_998>(projector: Projector<Record<K, Y_995>[K], Y_998>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_995>[K]>;
                                        };
                                        asObject(): Record<K, Y_995>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_994>[K]>[];
                                        map: <Y_999>(projector: Projector<Record<K, Y_994>[K], Y_999>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_999>[];
                                            map: <Y_1000>(projector: Projector<Y_999, Y_1000>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_999>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_994>[K]>[K]>[];
                                            map: <Y_1001>(projector: Projector<Record<K, Record<K, Y_994>[K]>[K], Y_1001>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_994>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_994>[K]>;
                                    };
                                    asObject(): Record<K, Y_994>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_993>[K]>[];
                                    map: <Y_1002>(projector: Projector<Record<K, Y_993>[K], Y_1002>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1002>[];
                                        map: <Y_1003>(projector: Projector<Y_1002, Y_1003>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1003>[];
                                            map: <Y_1004>(projector: Projector<Y_1003, Y_1004>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1003>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1002>[K]>[];
                                            map: <Y_1005>(projector: Projector<Record<K, Y_1002>[K], Y_1005>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1002>[K]>;
                                        };
                                        asObject(): Record<K, Y_1002>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_993>[K]>[K]>[];
                                        map: <Y_1006>(projector: Projector<Record<K, Record<K, Y_993>[K]>[K], Y_1006>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1006>[];
                                            map: <Y_1007>(projector: Projector<Y_1006, Y_1007>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1006>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_993>[K]>[K]>[K]>[];
                                            map: <Y_1008>(projector: Projector<Record<K, Record<K, Record<K, Y_993>[K]>[K]>[K], Y_1008>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_993>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_993>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_993>[K]>;
                                };
                                asObject(): Record<K, Y_993>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                map: <Y_1009>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K], Y_1009>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1009>[];
                                    map: <Y_1010>(projector: Projector<Y_1009, Y_1010>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1010>[];
                                        map: <Y_1011>(projector: Projector<Y_1010, Y_1011>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1011>[];
                                            map: <Y_1012>(projector: Projector<Y_1011, Y_1012>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1011>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1010>[K]>[];
                                            map: <Y_1013>(projector: Projector<Record<K, Y_1010>[K], Y_1013>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1010>[K]>;
                                        };
                                        asObject(): Record<K, Y_1010>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1009>[K]>[];
                                        map: <Y_1014>(projector: Projector<Record<K, Y_1009>[K], Y_1014>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1014>[];
                                            map: <Y_1015>(projector: Projector<Y_1014, Y_1015>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1014>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1009>[K]>[K]>[];
                                            map: <Y_1016>(projector: Projector<Record<K, Record<K, Y_1009>[K]>[K], Y_1016>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1009>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1009>[K]>;
                                    };
                                    asObject(): Record<K, Y_1009>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1017>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1017>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1017>[];
                                        map: <Y_1018>(projector: Projector<Y_1017, Y_1018>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1018>[];
                                            map: <Y_1019>(projector: Projector<Y_1018, Y_1019>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1018>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1017>[K]>[];
                                            map: <Y_1020>(projector: Projector<Record<K, Y_1017>[K], Y_1020>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1017>[K]>;
                                        };
                                        asObject(): Record<K, Y_1017>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1021>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1021>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1021>[];
                                            map: <Y_1022>(projector: Projector<Y_1021, Y_1022>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1021>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1023>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1023>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Record<K, Record<K, Y>[K]>[K]>[K]>;
                };
                asObject(): Record<K, Record<K, Record<K, Y>[K]>[K]>;
            };
            asObject(): Record<K, Record<K, Y>[K]>;
        };
        asObject(): Record<K, Y>;
    };
    pick(...keys: K[]): {
        keys: () => string[];
        values: () => unknown[];
        entries: () => Tuple<K, Record<K, V>[K]>[];
        map: <Y_1024>(projector: Projector<Record<K, V>[K], Y_1024>) => {
            keys: () => string[];
            values: () => unknown[];
            entries: () => Tuple<K, Y_1024>[];
            map: <Y_1025>(projector: Projector<Y_1024, Y_1025>) => {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Y_1025>[];
                map: <Y_1026>(projector: Projector<Y_1025, Y_1026>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_1026>[];
                    map: <Y_1027>(projector: Projector<Y_1026, Y_1027>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1027>[];
                        map: <Y_1028>(projector: Projector<Y_1027, Y_1028>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1028>[];
                            map: <Y_1029>(projector: Projector<Y_1028, Y_1029>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1029>[];
                                map: <Y_1030>(projector: Projector<Y_1029, Y_1030>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1030>[];
                                    map: <Y_1031>(projector: Projector<Y_1030, Y_1031>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1031>[];
                                        map: <Y_1032>(projector: Projector<Y_1031, Y_1032>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1032>[];
                                            map: <Y_1033>(projector: Projector<Y_1032, Y_1033>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1032>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1031>[K]>[];
                                            map: <Y_1034>(projector: Projector<Record<K, Y_1031>[K], Y_1034>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1031>[K]>;
                                        };
                                        asObject(): Record<K, Y_1031>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1030>[K]>[];
                                        map: <Y_1035>(projector: Projector<Record<K, Y_1030>[K], Y_1035>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1035>[];
                                            map: <Y_1036>(projector: Projector<Y_1035, Y_1036>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1035>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1030>[K]>[K]>[];
                                            map: <Y_1037>(projector: Projector<Record<K, Record<K, Y_1030>[K]>[K], Y_1037>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1030>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1030>[K]>;
                                    };
                                    asObject(): Record<K, Y_1030>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1029>[K]>[];
                                    map: <Y_1038>(projector: Projector<Record<K, Y_1029>[K], Y_1038>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1038>[];
                                        map: <Y_1039>(projector: Projector<Y_1038, Y_1039>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1039>[];
                                            map: <Y_1040>(projector: Projector<Y_1039, Y_1040>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1039>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1038>[K]>[];
                                            map: <Y_1041>(projector: Projector<Record<K, Y_1038>[K], Y_1041>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1038>[K]>;
                                        };
                                        asObject(): Record<K, Y_1038>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1029>[K]>[K]>[];
                                        map: <Y_1042>(projector: Projector<Record<K, Record<K, Y_1029>[K]>[K], Y_1042>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1042>[];
                                            map: <Y_1043>(projector: Projector<Y_1042, Y_1043>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1042>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1029>[K]>[K]>[K]>[];
                                            map: <Y_1044>(projector: Projector<Record<K, Record<K, Record<K, Y_1029>[K]>[K]>[K], Y_1044>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1029>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1029>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1029>[K]>;
                                };
                                asObject(): Record<K, Y_1029>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1028>[K]>[];
                                map: <Y_1045>(projector: Projector<Record<K, Y_1028>[K], Y_1045>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1045>[];
                                    map: <Y_1046>(projector: Projector<Y_1045, Y_1046>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1046>[];
                                        map: <Y_1047>(projector: Projector<Y_1046, Y_1047>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1047>[];
                                            map: <Y_1048>(projector: Projector<Y_1047, Y_1048>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1047>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1046>[K]>[];
                                            map: <Y_1049>(projector: Projector<Record<K, Y_1046>[K], Y_1049>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1046>[K]>;
                                        };
                                        asObject(): Record<K, Y_1046>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1045>[K]>[];
                                        map: <Y_1050>(projector: Projector<Record<K, Y_1045>[K], Y_1050>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1050>[];
                                            map: <Y_1051>(projector: Projector<Y_1050, Y_1051>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1050>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1045>[K]>[K]>[];
                                            map: <Y_1052>(projector: Projector<Record<K, Record<K, Y_1045>[K]>[K], Y_1052>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1045>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1045>[K]>;
                                    };
                                    asObject(): Record<K, Y_1045>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1028>[K]>[K]>[];
                                    map: <Y_1053>(projector: Projector<Record<K, Record<K, Y_1028>[K]>[K], Y_1053>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1053>[];
                                        map: <Y_1054>(projector: Projector<Y_1053, Y_1054>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1054>[];
                                            map: <Y_1055>(projector: Projector<Y_1054, Y_1055>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1054>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1053>[K]>[];
                                            map: <Y_1056>(projector: Projector<Record<K, Y_1053>[K], Y_1056>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1053>[K]>;
                                        };
                                        asObject(): Record<K, Y_1053>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K]>[];
                                        map: <Y_1057>(projector: Projector<Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K], Y_1057>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1057>[];
                                            map: <Y_1058>(projector: Projector<Y_1057, Y_1058>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1057>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1059>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K]>[K], Y_1059>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1028>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1028>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1028>[K]>;
                            };
                            asObject(): Record<K, Y_1028>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1027>[K]>[];
                            map: <Y_1060>(projector: Projector<Record<K, Y_1027>[K], Y_1060>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1060>[];
                                map: <Y_1061>(projector: Projector<Y_1060, Y_1061>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1061>[];
                                    map: <Y_1062>(projector: Projector<Y_1061, Y_1062>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1062>[];
                                        map: <Y_1063>(projector: Projector<Y_1062, Y_1063>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1063>[];
                                            map: <Y_1064>(projector: Projector<Y_1063, Y_1064>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1063>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1062>[K]>[];
                                            map: <Y_1065>(projector: Projector<Record<K, Y_1062>[K], Y_1065>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1062>[K]>;
                                        };
                                        asObject(): Record<K, Y_1062>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1061>[K]>[];
                                        map: <Y_1066>(projector: Projector<Record<K, Y_1061>[K], Y_1066>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1066>[];
                                            map: <Y_1067>(projector: Projector<Y_1066, Y_1067>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1066>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1061>[K]>[K]>[];
                                            map: <Y_1068>(projector: Projector<Record<K, Record<K, Y_1061>[K]>[K], Y_1068>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1061>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1061>[K]>;
                                    };
                                    asObject(): Record<K, Y_1061>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1060>[K]>[];
                                    map: <Y_1069>(projector: Projector<Record<K, Y_1060>[K], Y_1069>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1069>[];
                                        map: <Y_1070>(projector: Projector<Y_1069, Y_1070>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1070>[];
                                            map: <Y_1071>(projector: Projector<Y_1070, Y_1071>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1070>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1069>[K]>[];
                                            map: <Y_1072>(projector: Projector<Record<K, Y_1069>[K], Y_1072>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1069>[K]>;
                                        };
                                        asObject(): Record<K, Y_1069>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1060>[K]>[K]>[];
                                        map: <Y_1073>(projector: Projector<Record<K, Record<K, Y_1060>[K]>[K], Y_1073>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1073>[];
                                            map: <Y_1074>(projector: Projector<Y_1073, Y_1074>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1073>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1060>[K]>[K]>[K]>[];
                                            map: <Y_1075>(projector: Projector<Record<K, Record<K, Record<K, Y_1060>[K]>[K]>[K], Y_1075>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1060>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1060>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1060>[K]>;
                                };
                                asObject(): Record<K, Y_1060>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1027>[K]>[K]>[];
                                map: <Y_1076>(projector: Projector<Record<K, Record<K, Y_1027>[K]>[K], Y_1076>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1076>[];
                                    map: <Y_1077>(projector: Projector<Y_1076, Y_1077>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1077>[];
                                        map: <Y_1078>(projector: Projector<Y_1077, Y_1078>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1078>[];
                                            map: <Y_1079>(projector: Projector<Y_1078, Y_1079>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1078>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1077>[K]>[];
                                            map: <Y_1080>(projector: Projector<Record<K, Y_1077>[K], Y_1080>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1077>[K]>;
                                        };
                                        asObject(): Record<K, Y_1077>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1076>[K]>[];
                                        map: <Y_1081>(projector: Projector<Record<K, Y_1076>[K], Y_1081>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1081>[];
                                            map: <Y_1082>(projector: Projector<Y_1081, Y_1082>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1081>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1076>[K]>[K]>[];
                                            map: <Y_1083>(projector: Projector<Record<K, Record<K, Y_1076>[K]>[K], Y_1083>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1076>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1076>[K]>;
                                    };
                                    asObject(): Record<K, Y_1076>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[];
                                    map: <Y_1084>(projector: Projector<Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K], Y_1084>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1084>[];
                                        map: <Y_1085>(projector: Projector<Y_1084, Y_1085>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1085>[];
                                            map: <Y_1086>(projector: Projector<Y_1085, Y_1086>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1085>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1084>[K]>[];
                                            map: <Y_1087>(projector: Projector<Record<K, Y_1084>[K], Y_1087>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1084>[K]>;
                                        };
                                        asObject(): Record<K, Y_1084>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1088>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K], Y_1088>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1088>[];
                                            map: <Y_1089>(projector: Projector<Y_1088, Y_1089>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1088>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1090>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K]>[K], Y_1090>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1027>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1027>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1027>[K]>;
                        };
                        asObject(): Record<K, Y_1027>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_1026>[K]>[];
                        map: <Y_1091>(projector: Projector<Record<K, Y_1026>[K], Y_1091>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1091>[];
                            map: <Y_1092>(projector: Projector<Y_1091, Y_1092>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1092>[];
                                map: <Y_1093>(projector: Projector<Y_1092, Y_1093>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1093>[];
                                    map: <Y_1094>(projector: Projector<Y_1093, Y_1094>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1094>[];
                                        map: <Y_1095>(projector: Projector<Y_1094, Y_1095>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1095>[];
                                            map: <Y_1096>(projector: Projector<Y_1095, Y_1096>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1095>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1094>[K]>[];
                                            map: <Y_1097>(projector: Projector<Record<K, Y_1094>[K], Y_1097>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1094>[K]>;
                                        };
                                        asObject(): Record<K, Y_1094>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1093>[K]>[];
                                        map: <Y_1098>(projector: Projector<Record<K, Y_1093>[K], Y_1098>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1098>[];
                                            map: <Y_1099>(projector: Projector<Y_1098, Y_1099>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1098>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1093>[K]>[K]>[];
                                            map: <Y_1100>(projector: Projector<Record<K, Record<K, Y_1093>[K]>[K], Y_1100>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1093>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1093>[K]>;
                                    };
                                    asObject(): Record<K, Y_1093>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1092>[K]>[];
                                    map: <Y_1101>(projector: Projector<Record<K, Y_1092>[K], Y_1101>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1101>[];
                                        map: <Y_1102>(projector: Projector<Y_1101, Y_1102>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1102>[];
                                            map: <Y_1103>(projector: Projector<Y_1102, Y_1103>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1102>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1101>[K]>[];
                                            map: <Y_1104>(projector: Projector<Record<K, Y_1101>[K], Y_1104>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1101>[K]>;
                                        };
                                        asObject(): Record<K, Y_1101>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1092>[K]>[K]>[];
                                        map: <Y_1105>(projector: Projector<Record<K, Record<K, Y_1092>[K]>[K], Y_1105>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1105>[];
                                            map: <Y_1106>(projector: Projector<Y_1105, Y_1106>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1105>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1092>[K]>[K]>[K]>[];
                                            map: <Y_1107>(projector: Projector<Record<K, Record<K, Record<K, Y_1092>[K]>[K]>[K], Y_1107>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1092>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1092>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1092>[K]>;
                                };
                                asObject(): Record<K, Y_1092>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1091>[K]>[];
                                map: <Y_1108>(projector: Projector<Record<K, Y_1091>[K], Y_1108>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1108>[];
                                    map: <Y_1109>(projector: Projector<Y_1108, Y_1109>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1109>[];
                                        map: <Y_1110>(projector: Projector<Y_1109, Y_1110>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1110>[];
                                            map: <Y_1111>(projector: Projector<Y_1110, Y_1111>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1110>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1109>[K]>[];
                                            map: <Y_1112>(projector: Projector<Record<K, Y_1109>[K], Y_1112>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1109>[K]>;
                                        };
                                        asObject(): Record<K, Y_1109>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1108>[K]>[];
                                        map: <Y_1113>(projector: Projector<Record<K, Y_1108>[K], Y_1113>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1113>[];
                                            map: <Y_1114>(projector: Projector<Y_1113, Y_1114>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1113>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1108>[K]>[K]>[];
                                            map: <Y_1115>(projector: Projector<Record<K, Record<K, Y_1108>[K]>[K], Y_1115>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1108>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1108>[K]>;
                                    };
                                    asObject(): Record<K, Y_1108>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1091>[K]>[K]>[];
                                    map: <Y_1116>(projector: Projector<Record<K, Record<K, Y_1091>[K]>[K], Y_1116>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1116>[];
                                        map: <Y_1117>(projector: Projector<Y_1116, Y_1117>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1117>[];
                                            map: <Y_1118>(projector: Projector<Y_1117, Y_1118>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1117>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1116>[K]>[];
                                            map: <Y_1119>(projector: Projector<Record<K, Y_1116>[K], Y_1119>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1116>[K]>;
                                        };
                                        asObject(): Record<K, Y_1116>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K]>[];
                                        map: <Y_1120>(projector: Projector<Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K], Y_1120>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1120>[];
                                            map: <Y_1121>(projector: Projector<Y_1120, Y_1121>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1120>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1122>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K]>[K], Y_1122>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1091>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1091>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1091>[K]>;
                            };
                            asObject(): Record<K, Y_1091>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_1026>[K]>[K]>[];
                            map: <Y_1123>(projector: Projector<Record<K, Record<K, Y_1026>[K]>[K], Y_1123>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1123>[];
                                map: <Y_1124>(projector: Projector<Y_1123, Y_1124>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1124>[];
                                    map: <Y_1125>(projector: Projector<Y_1124, Y_1125>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1125>[];
                                        map: <Y_1126>(projector: Projector<Y_1125, Y_1126>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1126>[];
                                            map: <Y_1127>(projector: Projector<Y_1126, Y_1127>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1126>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1125>[K]>[];
                                            map: <Y_1128>(projector: Projector<Record<K, Y_1125>[K], Y_1128>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1125>[K]>;
                                        };
                                        asObject(): Record<K, Y_1125>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1124>[K]>[];
                                        map: <Y_1129>(projector: Projector<Record<K, Y_1124>[K], Y_1129>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1129>[];
                                            map: <Y_1130>(projector: Projector<Y_1129, Y_1130>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1129>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1124>[K]>[K]>[];
                                            map: <Y_1131>(projector: Projector<Record<K, Record<K, Y_1124>[K]>[K], Y_1131>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1124>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1124>[K]>;
                                    };
                                    asObject(): Record<K, Y_1124>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1123>[K]>[];
                                    map: <Y_1132>(projector: Projector<Record<K, Y_1123>[K], Y_1132>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1132>[];
                                        map: <Y_1133>(projector: Projector<Y_1132, Y_1133>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1133>[];
                                            map: <Y_1134>(projector: Projector<Y_1133, Y_1134>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1133>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1132>[K]>[];
                                            map: <Y_1135>(projector: Projector<Record<K, Y_1132>[K], Y_1135>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1132>[K]>;
                                        };
                                        asObject(): Record<K, Y_1132>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1123>[K]>[K]>[];
                                        map: <Y_1136>(projector: Projector<Record<K, Record<K, Y_1123>[K]>[K], Y_1136>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1136>[];
                                            map: <Y_1137>(projector: Projector<Y_1136, Y_1137>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1136>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1123>[K]>[K]>[K]>[];
                                            map: <Y_1138>(projector: Projector<Record<K, Record<K, Record<K, Y_1123>[K]>[K]>[K], Y_1138>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1123>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1123>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1123>[K]>;
                                };
                                asObject(): Record<K, Y_1123>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[];
                                map: <Y_1139>(projector: Projector<Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K], Y_1139>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1139>[];
                                    map: <Y_1140>(projector: Projector<Y_1139, Y_1140>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1140>[];
                                        map: <Y_1141>(projector: Projector<Y_1140, Y_1141>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1141>[];
                                            map: <Y_1142>(projector: Projector<Y_1141, Y_1142>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1141>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1140>[K]>[];
                                            map: <Y_1143>(projector: Projector<Record<K, Y_1140>[K], Y_1143>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1140>[K]>;
                                        };
                                        asObject(): Record<K, Y_1140>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1139>[K]>[];
                                        map: <Y_1144>(projector: Projector<Record<K, Y_1139>[K], Y_1144>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1144>[];
                                            map: <Y_1145>(projector: Projector<Y_1144, Y_1145>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1144>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1139>[K]>[K]>[];
                                            map: <Y_1146>(projector: Projector<Record<K, Record<K, Y_1139>[K]>[K], Y_1146>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1139>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1139>[K]>;
                                    };
                                    asObject(): Record<K, Y_1139>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1147>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K], Y_1147>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1147>[];
                                        map: <Y_1148>(projector: Projector<Y_1147, Y_1148>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1148>[];
                                            map: <Y_1149>(projector: Projector<Y_1148, Y_1149>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1148>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1147>[K]>[];
                                            map: <Y_1150>(projector: Projector<Record<K, Y_1147>[K], Y_1150>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1147>[K]>;
                                        };
                                        asObject(): Record<K, Y_1147>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1151>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K], Y_1151>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1151>[];
                                            map: <Y_1152>(projector: Projector<Y_1151, Y_1152>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1151>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1153>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K]>[K], Y_1153>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_1026>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_1026>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_1026>[K]>;
                    };
                    asObject(): Record<K, Y_1026>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Y_1025>[K]>[];
                    map: <Y_1154>(projector: Projector<Record<K, Y_1025>[K], Y_1154>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1154>[];
                        map: <Y_1155>(projector: Projector<Y_1154, Y_1155>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1155>[];
                            map: <Y_1156>(projector: Projector<Y_1155, Y_1156>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1156>[];
                                map: <Y_1157>(projector: Projector<Y_1156, Y_1157>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1157>[];
                                    map: <Y_1158>(projector: Projector<Y_1157, Y_1158>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1158>[];
                                        map: <Y_1159>(projector: Projector<Y_1158, Y_1159>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1159>[];
                                            map: <Y_1160>(projector: Projector<Y_1159, Y_1160>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1159>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1158>[K]>[];
                                            map: <Y_1161>(projector: Projector<Record<K, Y_1158>[K], Y_1161>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1158>[K]>;
                                        };
                                        asObject(): Record<K, Y_1158>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1157>[K]>[];
                                        map: <Y_1162>(projector: Projector<Record<K, Y_1157>[K], Y_1162>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1162>[];
                                            map: <Y_1163>(projector: Projector<Y_1162, Y_1163>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1162>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1157>[K]>[K]>[];
                                            map: <Y_1164>(projector: Projector<Record<K, Record<K, Y_1157>[K]>[K], Y_1164>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1157>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1157>[K]>;
                                    };
                                    asObject(): Record<K, Y_1157>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1156>[K]>[];
                                    map: <Y_1165>(projector: Projector<Record<K, Y_1156>[K], Y_1165>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1165>[];
                                        map: <Y_1166>(projector: Projector<Y_1165, Y_1166>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1166>[];
                                            map: <Y_1167>(projector: Projector<Y_1166, Y_1167>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1166>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1165>[K]>[];
                                            map: <Y_1168>(projector: Projector<Record<K, Y_1165>[K], Y_1168>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1165>[K]>;
                                        };
                                        asObject(): Record<K, Y_1165>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1156>[K]>[K]>[];
                                        map: <Y_1169>(projector: Projector<Record<K, Record<K, Y_1156>[K]>[K], Y_1169>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1169>[];
                                            map: <Y_1170>(projector: Projector<Y_1169, Y_1170>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1169>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1156>[K]>[K]>[K]>[];
                                            map: <Y_1171>(projector: Projector<Record<K, Record<K, Record<K, Y_1156>[K]>[K]>[K], Y_1171>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1156>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1156>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1156>[K]>;
                                };
                                asObject(): Record<K, Y_1156>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1155>[K]>[];
                                map: <Y_1172>(projector: Projector<Record<K, Y_1155>[K], Y_1172>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1172>[];
                                    map: <Y_1173>(projector: Projector<Y_1172, Y_1173>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1173>[];
                                        map: <Y_1174>(projector: Projector<Y_1173, Y_1174>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1174>[];
                                            map: <Y_1175>(projector: Projector<Y_1174, Y_1175>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1174>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1173>[K]>[];
                                            map: <Y_1176>(projector: Projector<Record<K, Y_1173>[K], Y_1176>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1173>[K]>;
                                        };
                                        asObject(): Record<K, Y_1173>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1172>[K]>[];
                                        map: <Y_1177>(projector: Projector<Record<K, Y_1172>[K], Y_1177>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1177>[];
                                            map: <Y_1178>(projector: Projector<Y_1177, Y_1178>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1177>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1172>[K]>[K]>[];
                                            map: <Y_1179>(projector: Projector<Record<K, Record<K, Y_1172>[K]>[K], Y_1179>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1172>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1172>[K]>;
                                    };
                                    asObject(): Record<K, Y_1172>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1155>[K]>[K]>[];
                                    map: <Y_1180>(projector: Projector<Record<K, Record<K, Y_1155>[K]>[K], Y_1180>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1180>[];
                                        map: <Y_1181>(projector: Projector<Y_1180, Y_1181>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1181>[];
                                            map: <Y_1182>(projector: Projector<Y_1181, Y_1182>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1181>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1180>[K]>[];
                                            map: <Y_1183>(projector: Projector<Record<K, Y_1180>[K], Y_1183>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1180>[K]>;
                                        };
                                        asObject(): Record<K, Y_1180>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K]>[];
                                        map: <Y_1184>(projector: Projector<Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K], Y_1184>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1184>[];
                                            map: <Y_1185>(projector: Projector<Y_1184, Y_1185>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1184>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1186>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K]>[K], Y_1186>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1155>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1155>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1155>[K]>;
                            };
                            asObject(): Record<K, Y_1155>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1154>[K]>[];
                            map: <Y_1187>(projector: Projector<Record<K, Y_1154>[K], Y_1187>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1187>[];
                                map: <Y_1188>(projector: Projector<Y_1187, Y_1188>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1188>[];
                                    map: <Y_1189>(projector: Projector<Y_1188, Y_1189>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1189>[];
                                        map: <Y_1190>(projector: Projector<Y_1189, Y_1190>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1190>[];
                                            map: <Y_1191>(projector: Projector<Y_1190, Y_1191>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1190>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1189>[K]>[];
                                            map: <Y_1192>(projector: Projector<Record<K, Y_1189>[K], Y_1192>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1189>[K]>;
                                        };
                                        asObject(): Record<K, Y_1189>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1188>[K]>[];
                                        map: <Y_1193>(projector: Projector<Record<K, Y_1188>[K], Y_1193>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1193>[];
                                            map: <Y_1194>(projector: Projector<Y_1193, Y_1194>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1193>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1188>[K]>[K]>[];
                                            map: <Y_1195>(projector: Projector<Record<K, Record<K, Y_1188>[K]>[K], Y_1195>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1188>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1188>[K]>;
                                    };
                                    asObject(): Record<K, Y_1188>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1187>[K]>[];
                                    map: <Y_1196>(projector: Projector<Record<K, Y_1187>[K], Y_1196>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1196>[];
                                        map: <Y_1197>(projector: Projector<Y_1196, Y_1197>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1197>[];
                                            map: <Y_1198>(projector: Projector<Y_1197, Y_1198>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1197>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1196>[K]>[];
                                            map: <Y_1199>(projector: Projector<Record<K, Y_1196>[K], Y_1199>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1196>[K]>;
                                        };
                                        asObject(): Record<K, Y_1196>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1187>[K]>[K]>[];
                                        map: <Y_1200>(projector: Projector<Record<K, Record<K, Y_1187>[K]>[K], Y_1200>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1200>[];
                                            map: <Y_1201>(projector: Projector<Y_1200, Y_1201>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1200>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1187>[K]>[K]>[K]>[];
                                            map: <Y_1202>(projector: Projector<Record<K, Record<K, Record<K, Y_1187>[K]>[K]>[K], Y_1202>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1187>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1187>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1187>[K]>;
                                };
                                asObject(): Record<K, Y_1187>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1154>[K]>[K]>[];
                                map: <Y_1203>(projector: Projector<Record<K, Record<K, Y_1154>[K]>[K], Y_1203>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1203>[];
                                    map: <Y_1204>(projector: Projector<Y_1203, Y_1204>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1204>[];
                                        map: <Y_1205>(projector: Projector<Y_1204, Y_1205>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1205>[];
                                            map: <Y_1206>(projector: Projector<Y_1205, Y_1206>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1205>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1204>[K]>[];
                                            map: <Y_1207>(projector: Projector<Record<K, Y_1204>[K], Y_1207>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1204>[K]>;
                                        };
                                        asObject(): Record<K, Y_1204>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1203>[K]>[];
                                        map: <Y_1208>(projector: Projector<Record<K, Y_1203>[K], Y_1208>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1208>[];
                                            map: <Y_1209>(projector: Projector<Y_1208, Y_1209>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1208>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1203>[K]>[K]>[];
                                            map: <Y_1210>(projector: Projector<Record<K, Record<K, Y_1203>[K]>[K], Y_1210>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1203>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1203>[K]>;
                                    };
                                    asObject(): Record<K, Y_1203>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[];
                                    map: <Y_1211>(projector: Projector<Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K], Y_1211>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1211>[];
                                        map: <Y_1212>(projector: Projector<Y_1211, Y_1212>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1212>[];
                                            map: <Y_1213>(projector: Projector<Y_1212, Y_1213>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1212>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1211>[K]>[];
                                            map: <Y_1214>(projector: Projector<Record<K, Y_1211>[K], Y_1214>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1211>[K]>;
                                        };
                                        asObject(): Record<K, Y_1211>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1215>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K], Y_1215>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1215>[];
                                            map: <Y_1216>(projector: Projector<Y_1215, Y_1216>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1215>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1217>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K]>[K], Y_1217>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1154>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1154>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1154>[K]>;
                        };
                        asObject(): Record<K, Y_1154>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Y_1025>[K]>[K]>[];
                        map: <Y_1218>(projector: Projector<Record<K, Record<K, Y_1025>[K]>[K], Y_1218>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1218>[];
                            map: <Y_1219>(projector: Projector<Y_1218, Y_1219>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1219>[];
                                map: <Y_1220>(projector: Projector<Y_1219, Y_1220>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1220>[];
                                    map: <Y_1221>(projector: Projector<Y_1220, Y_1221>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1221>[];
                                        map: <Y_1222>(projector: Projector<Y_1221, Y_1222>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1222>[];
                                            map: <Y_1223>(projector: Projector<Y_1222, Y_1223>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1222>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1221>[K]>[];
                                            map: <Y_1224>(projector: Projector<Record<K, Y_1221>[K], Y_1224>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1221>[K]>;
                                        };
                                        asObject(): Record<K, Y_1221>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1220>[K]>[];
                                        map: <Y_1225>(projector: Projector<Record<K, Y_1220>[K], Y_1225>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1225>[];
                                            map: <Y_1226>(projector: Projector<Y_1225, Y_1226>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1225>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1220>[K]>[K]>[];
                                            map: <Y_1227>(projector: Projector<Record<K, Record<K, Y_1220>[K]>[K], Y_1227>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1220>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1220>[K]>;
                                    };
                                    asObject(): Record<K, Y_1220>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1219>[K]>[];
                                    map: <Y_1228>(projector: Projector<Record<K, Y_1219>[K], Y_1228>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1228>[];
                                        map: <Y_1229>(projector: Projector<Y_1228, Y_1229>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1229>[];
                                            map: <Y_1230>(projector: Projector<Y_1229, Y_1230>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1229>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1228>[K]>[];
                                            map: <Y_1231>(projector: Projector<Record<K, Y_1228>[K], Y_1231>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1228>[K]>;
                                        };
                                        asObject(): Record<K, Y_1228>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1219>[K]>[K]>[];
                                        map: <Y_1232>(projector: Projector<Record<K, Record<K, Y_1219>[K]>[K], Y_1232>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1232>[];
                                            map: <Y_1233>(projector: Projector<Y_1232, Y_1233>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1232>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1219>[K]>[K]>[K]>[];
                                            map: <Y_1234>(projector: Projector<Record<K, Record<K, Record<K, Y_1219>[K]>[K]>[K], Y_1234>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1219>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1219>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1219>[K]>;
                                };
                                asObject(): Record<K, Y_1219>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1218>[K]>[];
                                map: <Y_1235>(projector: Projector<Record<K, Y_1218>[K], Y_1235>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1235>[];
                                    map: <Y_1236>(projector: Projector<Y_1235, Y_1236>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1236>[];
                                        map: <Y_1237>(projector: Projector<Y_1236, Y_1237>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1237>[];
                                            map: <Y_1238>(projector: Projector<Y_1237, Y_1238>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1237>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1236>[K]>[];
                                            map: <Y_1239>(projector: Projector<Record<K, Y_1236>[K], Y_1239>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1236>[K]>;
                                        };
                                        asObject(): Record<K, Y_1236>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1235>[K]>[];
                                        map: <Y_1240>(projector: Projector<Record<K, Y_1235>[K], Y_1240>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1240>[];
                                            map: <Y_1241>(projector: Projector<Y_1240, Y_1241>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1240>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1235>[K]>[K]>[];
                                            map: <Y_1242>(projector: Projector<Record<K, Record<K, Y_1235>[K]>[K], Y_1242>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1235>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1235>[K]>;
                                    };
                                    asObject(): Record<K, Y_1235>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1218>[K]>[K]>[];
                                    map: <Y_1243>(projector: Projector<Record<K, Record<K, Y_1218>[K]>[K], Y_1243>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1243>[];
                                        map: <Y_1244>(projector: Projector<Y_1243, Y_1244>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1244>[];
                                            map: <Y_1245>(projector: Projector<Y_1244, Y_1245>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1244>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1243>[K]>[];
                                            map: <Y_1246>(projector: Projector<Record<K, Y_1243>[K], Y_1246>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1243>[K]>;
                                        };
                                        asObject(): Record<K, Y_1243>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K]>[];
                                        map: <Y_1247>(projector: Projector<Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K], Y_1247>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1247>[];
                                            map: <Y_1248>(projector: Projector<Y_1247, Y_1248>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1247>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1249>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K]>[K], Y_1249>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1218>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1218>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1218>[K]>;
                            };
                            asObject(): Record<K, Y_1218>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[];
                            map: <Y_1250>(projector: Projector<Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K], Y_1250>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1250>[];
                                map: <Y_1251>(projector: Projector<Y_1250, Y_1251>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1251>[];
                                    map: <Y_1252>(projector: Projector<Y_1251, Y_1252>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1252>[];
                                        map: <Y_1253>(projector: Projector<Y_1252, Y_1253>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1253>[];
                                            map: <Y_1254>(projector: Projector<Y_1253, Y_1254>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1253>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1252>[K]>[];
                                            map: <Y_1255>(projector: Projector<Record<K, Y_1252>[K], Y_1255>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1252>[K]>;
                                        };
                                        asObject(): Record<K, Y_1252>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1251>[K]>[];
                                        map: <Y_1256>(projector: Projector<Record<K, Y_1251>[K], Y_1256>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1256>[];
                                            map: <Y_1257>(projector: Projector<Y_1256, Y_1257>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1256>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1251>[K]>[K]>[];
                                            map: <Y_1258>(projector: Projector<Record<K, Record<K, Y_1251>[K]>[K], Y_1258>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1251>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1251>[K]>;
                                    };
                                    asObject(): Record<K, Y_1251>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1250>[K]>[];
                                    map: <Y_1259>(projector: Projector<Record<K, Y_1250>[K], Y_1259>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1259>[];
                                        map: <Y_1260>(projector: Projector<Y_1259, Y_1260>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1260>[];
                                            map: <Y_1261>(projector: Projector<Y_1260, Y_1261>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1260>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1259>[K]>[];
                                            map: <Y_1262>(projector: Projector<Record<K, Y_1259>[K], Y_1262>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1259>[K]>;
                                        };
                                        asObject(): Record<K, Y_1259>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1250>[K]>[K]>[];
                                        map: <Y_1263>(projector: Projector<Record<K, Record<K, Y_1250>[K]>[K], Y_1263>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1263>[];
                                            map: <Y_1264>(projector: Projector<Y_1263, Y_1264>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1263>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1250>[K]>[K]>[K]>[];
                                            map: <Y_1265>(projector: Projector<Record<K, Record<K, Record<K, Y_1250>[K]>[K]>[K], Y_1265>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1250>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1250>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1250>[K]>;
                                };
                                asObject(): Record<K, Y_1250>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[];
                                map: <Y_1266>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K], Y_1266>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1266>[];
                                    map: <Y_1267>(projector: Projector<Y_1266, Y_1267>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1267>[];
                                        map: <Y_1268>(projector: Projector<Y_1267, Y_1268>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1268>[];
                                            map: <Y_1269>(projector: Projector<Y_1268, Y_1269>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1268>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1267>[K]>[];
                                            map: <Y_1270>(projector: Projector<Record<K, Y_1267>[K], Y_1270>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1267>[K]>;
                                        };
                                        asObject(): Record<K, Y_1267>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1266>[K]>[];
                                        map: <Y_1271>(projector: Projector<Record<K, Y_1266>[K], Y_1271>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1271>[];
                                            map: <Y_1272>(projector: Projector<Y_1271, Y_1272>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1271>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1266>[K]>[K]>[];
                                            map: <Y_1273>(projector: Projector<Record<K, Record<K, Y_1266>[K]>[K], Y_1273>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1266>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1266>[K]>;
                                    };
                                    asObject(): Record<K, Y_1266>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1274>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K], Y_1274>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1274>[];
                                        map: <Y_1275>(projector: Projector<Y_1274, Y_1275>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1275>[];
                                            map: <Y_1276>(projector: Projector<Y_1275, Y_1276>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1275>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1274>[K]>[];
                                            map: <Y_1277>(projector: Projector<Record<K, Y_1274>[K], Y_1277>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1274>[K]>;
                                        };
                                        asObject(): Record<K, Y_1274>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1278>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K], Y_1278>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1278>[];
                                            map: <Y_1279>(projector: Projector<Y_1278, Y_1279>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1278>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1280>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1280>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1025>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Y_1025>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Y_1025>[K]>;
                };
                asObject(): Record<K, Y_1025>;
            };
            pick(...keys: K[]): {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Record<K, Y_1024>[K]>[];
                map: <Y_1281>(projector: Projector<Record<K, Y_1024>[K], Y_1281>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_1281>[];
                    map: <Y_1282>(projector: Projector<Y_1281, Y_1282>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1282>[];
                        map: <Y_1283>(projector: Projector<Y_1282, Y_1283>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1283>[];
                            map: <Y_1284>(projector: Projector<Y_1283, Y_1284>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1284>[];
                                map: <Y_1285>(projector: Projector<Y_1284, Y_1285>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1285>[];
                                    map: <Y_1286>(projector: Projector<Y_1285, Y_1286>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1286>[];
                                        map: <Y_1287>(projector: Projector<Y_1286, Y_1287>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1287>[];
                                            map: <Y_1288>(projector: Projector<Y_1287, Y_1288>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1287>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1286>[K]>[];
                                            map: <Y_1289>(projector: Projector<Record<K, Y_1286>[K], Y_1289>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1286>[K]>;
                                        };
                                        asObject(): Record<K, Y_1286>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1285>[K]>[];
                                        map: <Y_1290>(projector: Projector<Record<K, Y_1285>[K], Y_1290>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1290>[];
                                            map: <Y_1291>(projector: Projector<Y_1290, Y_1291>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1290>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1285>[K]>[K]>[];
                                            map: <Y_1292>(projector: Projector<Record<K, Record<K, Y_1285>[K]>[K], Y_1292>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1285>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1285>[K]>;
                                    };
                                    asObject(): Record<K, Y_1285>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1284>[K]>[];
                                    map: <Y_1293>(projector: Projector<Record<K, Y_1284>[K], Y_1293>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1293>[];
                                        map: <Y_1294>(projector: Projector<Y_1293, Y_1294>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1294>[];
                                            map: <Y_1295>(projector: Projector<Y_1294, Y_1295>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1294>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1293>[K]>[];
                                            map: <Y_1296>(projector: Projector<Record<K, Y_1293>[K], Y_1296>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1293>[K]>;
                                        };
                                        asObject(): Record<K, Y_1293>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1284>[K]>[K]>[];
                                        map: <Y_1297>(projector: Projector<Record<K, Record<K, Y_1284>[K]>[K], Y_1297>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1297>[];
                                            map: <Y_1298>(projector: Projector<Y_1297, Y_1298>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1297>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1284>[K]>[K]>[K]>[];
                                            map: <Y_1299>(projector: Projector<Record<K, Record<K, Record<K, Y_1284>[K]>[K]>[K], Y_1299>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1284>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1284>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1284>[K]>;
                                };
                                asObject(): Record<K, Y_1284>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1283>[K]>[];
                                map: <Y_1300>(projector: Projector<Record<K, Y_1283>[K], Y_1300>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1300>[];
                                    map: <Y_1301>(projector: Projector<Y_1300, Y_1301>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1301>[];
                                        map: <Y_1302>(projector: Projector<Y_1301, Y_1302>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1302>[];
                                            map: <Y_1303>(projector: Projector<Y_1302, Y_1303>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1302>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1301>[K]>[];
                                            map: <Y_1304>(projector: Projector<Record<K, Y_1301>[K], Y_1304>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1301>[K]>;
                                        };
                                        asObject(): Record<K, Y_1301>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1300>[K]>[];
                                        map: <Y_1305>(projector: Projector<Record<K, Y_1300>[K], Y_1305>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1305>[];
                                            map: <Y_1306>(projector: Projector<Y_1305, Y_1306>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1305>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1300>[K]>[K]>[];
                                            map: <Y_1307>(projector: Projector<Record<K, Record<K, Y_1300>[K]>[K], Y_1307>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1300>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1300>[K]>;
                                    };
                                    asObject(): Record<K, Y_1300>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1283>[K]>[K]>[];
                                    map: <Y_1308>(projector: Projector<Record<K, Record<K, Y_1283>[K]>[K], Y_1308>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1308>[];
                                        map: <Y_1309>(projector: Projector<Y_1308, Y_1309>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1309>[];
                                            map: <Y_1310>(projector: Projector<Y_1309, Y_1310>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1309>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1308>[K]>[];
                                            map: <Y_1311>(projector: Projector<Record<K, Y_1308>[K], Y_1311>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1308>[K]>;
                                        };
                                        asObject(): Record<K, Y_1308>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K]>[];
                                        map: <Y_1312>(projector: Projector<Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K], Y_1312>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1312>[];
                                            map: <Y_1313>(projector: Projector<Y_1312, Y_1313>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1312>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1314>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K]>[K], Y_1314>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1283>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1283>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1283>[K]>;
                            };
                            asObject(): Record<K, Y_1283>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1282>[K]>[];
                            map: <Y_1315>(projector: Projector<Record<K, Y_1282>[K], Y_1315>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1315>[];
                                map: <Y_1316>(projector: Projector<Y_1315, Y_1316>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1316>[];
                                    map: <Y_1317>(projector: Projector<Y_1316, Y_1317>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1317>[];
                                        map: <Y_1318>(projector: Projector<Y_1317, Y_1318>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1318>[];
                                            map: <Y_1319>(projector: Projector<Y_1318, Y_1319>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1318>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1317>[K]>[];
                                            map: <Y_1320>(projector: Projector<Record<K, Y_1317>[K], Y_1320>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1317>[K]>;
                                        };
                                        asObject(): Record<K, Y_1317>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1316>[K]>[];
                                        map: <Y_1321>(projector: Projector<Record<K, Y_1316>[K], Y_1321>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1321>[];
                                            map: <Y_1322>(projector: Projector<Y_1321, Y_1322>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1321>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1316>[K]>[K]>[];
                                            map: <Y_1323>(projector: Projector<Record<K, Record<K, Y_1316>[K]>[K], Y_1323>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1316>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1316>[K]>;
                                    };
                                    asObject(): Record<K, Y_1316>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1315>[K]>[];
                                    map: <Y_1324>(projector: Projector<Record<K, Y_1315>[K], Y_1324>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1324>[];
                                        map: <Y_1325>(projector: Projector<Y_1324, Y_1325>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1325>[];
                                            map: <Y_1326>(projector: Projector<Y_1325, Y_1326>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1325>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1324>[K]>[];
                                            map: <Y_1327>(projector: Projector<Record<K, Y_1324>[K], Y_1327>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1324>[K]>;
                                        };
                                        asObject(): Record<K, Y_1324>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1315>[K]>[K]>[];
                                        map: <Y_1328>(projector: Projector<Record<K, Record<K, Y_1315>[K]>[K], Y_1328>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1328>[];
                                            map: <Y_1329>(projector: Projector<Y_1328, Y_1329>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1328>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1315>[K]>[K]>[K]>[];
                                            map: <Y_1330>(projector: Projector<Record<K, Record<K, Record<K, Y_1315>[K]>[K]>[K], Y_1330>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1315>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1315>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1315>[K]>;
                                };
                                asObject(): Record<K, Y_1315>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1282>[K]>[K]>[];
                                map: <Y_1331>(projector: Projector<Record<K, Record<K, Y_1282>[K]>[K], Y_1331>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1331>[];
                                    map: <Y_1332>(projector: Projector<Y_1331, Y_1332>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1332>[];
                                        map: <Y_1333>(projector: Projector<Y_1332, Y_1333>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1333>[];
                                            map: <Y_1334>(projector: Projector<Y_1333, Y_1334>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1333>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1332>[K]>[];
                                            map: <Y_1335>(projector: Projector<Record<K, Y_1332>[K], Y_1335>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1332>[K]>;
                                        };
                                        asObject(): Record<K, Y_1332>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1331>[K]>[];
                                        map: <Y_1336>(projector: Projector<Record<K, Y_1331>[K], Y_1336>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1336>[];
                                            map: <Y_1337>(projector: Projector<Y_1336, Y_1337>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1336>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1331>[K]>[K]>[];
                                            map: <Y_1338>(projector: Projector<Record<K, Record<K, Y_1331>[K]>[K], Y_1338>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1331>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1331>[K]>;
                                    };
                                    asObject(): Record<K, Y_1331>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[];
                                    map: <Y_1339>(projector: Projector<Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K], Y_1339>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1339>[];
                                        map: <Y_1340>(projector: Projector<Y_1339, Y_1340>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1340>[];
                                            map: <Y_1341>(projector: Projector<Y_1340, Y_1341>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1340>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1339>[K]>[];
                                            map: <Y_1342>(projector: Projector<Record<K, Y_1339>[K], Y_1342>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1339>[K]>;
                                        };
                                        asObject(): Record<K, Y_1339>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1343>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K], Y_1343>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1343>[];
                                            map: <Y_1344>(projector: Projector<Y_1343, Y_1344>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1343>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1345>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K]>[K], Y_1345>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1282>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1282>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1282>[K]>;
                        };
                        asObject(): Record<K, Y_1282>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_1281>[K]>[];
                        map: <Y_1346>(projector: Projector<Record<K, Y_1281>[K], Y_1346>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1346>[];
                            map: <Y_1347>(projector: Projector<Y_1346, Y_1347>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1347>[];
                                map: <Y_1348>(projector: Projector<Y_1347, Y_1348>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1348>[];
                                    map: <Y_1349>(projector: Projector<Y_1348, Y_1349>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1349>[];
                                        map: <Y_1350>(projector: Projector<Y_1349, Y_1350>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1350>[];
                                            map: <Y_1351>(projector: Projector<Y_1350, Y_1351>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1350>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1349>[K]>[];
                                            map: <Y_1352>(projector: Projector<Record<K, Y_1349>[K], Y_1352>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1349>[K]>;
                                        };
                                        asObject(): Record<K, Y_1349>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1348>[K]>[];
                                        map: <Y_1353>(projector: Projector<Record<K, Y_1348>[K], Y_1353>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1353>[];
                                            map: <Y_1354>(projector: Projector<Y_1353, Y_1354>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1353>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1348>[K]>[K]>[];
                                            map: <Y_1355>(projector: Projector<Record<K, Record<K, Y_1348>[K]>[K], Y_1355>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1348>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1348>[K]>;
                                    };
                                    asObject(): Record<K, Y_1348>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1347>[K]>[];
                                    map: <Y_1356>(projector: Projector<Record<K, Y_1347>[K], Y_1356>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1356>[];
                                        map: <Y_1357>(projector: Projector<Y_1356, Y_1357>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1357>[];
                                            map: <Y_1358>(projector: Projector<Y_1357, Y_1358>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1357>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1356>[K]>[];
                                            map: <Y_1359>(projector: Projector<Record<K, Y_1356>[K], Y_1359>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1356>[K]>;
                                        };
                                        asObject(): Record<K, Y_1356>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1347>[K]>[K]>[];
                                        map: <Y_1360>(projector: Projector<Record<K, Record<K, Y_1347>[K]>[K], Y_1360>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1360>[];
                                            map: <Y_1361>(projector: Projector<Y_1360, Y_1361>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1360>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1347>[K]>[K]>[K]>[];
                                            map: <Y_1362>(projector: Projector<Record<K, Record<K, Record<K, Y_1347>[K]>[K]>[K], Y_1362>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1347>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1347>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1347>[K]>;
                                };
                                asObject(): Record<K, Y_1347>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1346>[K]>[];
                                map: <Y_1363>(projector: Projector<Record<K, Y_1346>[K], Y_1363>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1363>[];
                                    map: <Y_1364>(projector: Projector<Y_1363, Y_1364>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1364>[];
                                        map: <Y_1365>(projector: Projector<Y_1364, Y_1365>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1365>[];
                                            map: <Y_1366>(projector: Projector<Y_1365, Y_1366>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1365>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1364>[K]>[];
                                            map: <Y_1367>(projector: Projector<Record<K, Y_1364>[K], Y_1367>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1364>[K]>;
                                        };
                                        asObject(): Record<K, Y_1364>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1363>[K]>[];
                                        map: <Y_1368>(projector: Projector<Record<K, Y_1363>[K], Y_1368>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1368>[];
                                            map: <Y_1369>(projector: Projector<Y_1368, Y_1369>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1368>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1363>[K]>[K]>[];
                                            map: <Y_1370>(projector: Projector<Record<K, Record<K, Y_1363>[K]>[K], Y_1370>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1363>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1363>[K]>;
                                    };
                                    asObject(): Record<K, Y_1363>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1346>[K]>[K]>[];
                                    map: <Y_1371>(projector: Projector<Record<K, Record<K, Y_1346>[K]>[K], Y_1371>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1371>[];
                                        map: <Y_1372>(projector: Projector<Y_1371, Y_1372>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1372>[];
                                            map: <Y_1373>(projector: Projector<Y_1372, Y_1373>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1372>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1371>[K]>[];
                                            map: <Y_1374>(projector: Projector<Record<K, Y_1371>[K], Y_1374>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1371>[K]>;
                                        };
                                        asObject(): Record<K, Y_1371>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K]>[];
                                        map: <Y_1375>(projector: Projector<Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K], Y_1375>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1375>[];
                                            map: <Y_1376>(projector: Projector<Y_1375, Y_1376>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1375>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1377>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K]>[K], Y_1377>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1346>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1346>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1346>[K]>;
                            };
                            asObject(): Record<K, Y_1346>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_1281>[K]>[K]>[];
                            map: <Y_1378>(projector: Projector<Record<K, Record<K, Y_1281>[K]>[K], Y_1378>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1378>[];
                                map: <Y_1379>(projector: Projector<Y_1378, Y_1379>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1379>[];
                                    map: <Y_1380>(projector: Projector<Y_1379, Y_1380>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1380>[];
                                        map: <Y_1381>(projector: Projector<Y_1380, Y_1381>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1381>[];
                                            map: <Y_1382>(projector: Projector<Y_1381, Y_1382>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1381>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1380>[K]>[];
                                            map: <Y_1383>(projector: Projector<Record<K, Y_1380>[K], Y_1383>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1380>[K]>;
                                        };
                                        asObject(): Record<K, Y_1380>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1379>[K]>[];
                                        map: <Y_1384>(projector: Projector<Record<K, Y_1379>[K], Y_1384>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1384>[];
                                            map: <Y_1385>(projector: Projector<Y_1384, Y_1385>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1384>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1379>[K]>[K]>[];
                                            map: <Y_1386>(projector: Projector<Record<K, Record<K, Y_1379>[K]>[K], Y_1386>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1379>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1379>[K]>;
                                    };
                                    asObject(): Record<K, Y_1379>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1378>[K]>[];
                                    map: <Y_1387>(projector: Projector<Record<K, Y_1378>[K], Y_1387>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1387>[];
                                        map: <Y_1388>(projector: Projector<Y_1387, Y_1388>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1388>[];
                                            map: <Y_1389>(projector: Projector<Y_1388, Y_1389>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1388>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1387>[K]>[];
                                            map: <Y_1390>(projector: Projector<Record<K, Y_1387>[K], Y_1390>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1387>[K]>;
                                        };
                                        asObject(): Record<K, Y_1387>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1378>[K]>[K]>[];
                                        map: <Y_1391>(projector: Projector<Record<K, Record<K, Y_1378>[K]>[K], Y_1391>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1391>[];
                                            map: <Y_1392>(projector: Projector<Y_1391, Y_1392>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1391>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1378>[K]>[K]>[K]>[];
                                            map: <Y_1393>(projector: Projector<Record<K, Record<K, Record<K, Y_1378>[K]>[K]>[K], Y_1393>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1378>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1378>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1378>[K]>;
                                };
                                asObject(): Record<K, Y_1378>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[];
                                map: <Y_1394>(projector: Projector<Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K], Y_1394>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1394>[];
                                    map: <Y_1395>(projector: Projector<Y_1394, Y_1395>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1395>[];
                                        map: <Y_1396>(projector: Projector<Y_1395, Y_1396>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1396>[];
                                            map: <Y_1397>(projector: Projector<Y_1396, Y_1397>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1396>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1395>[K]>[];
                                            map: <Y_1398>(projector: Projector<Record<K, Y_1395>[K], Y_1398>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1395>[K]>;
                                        };
                                        asObject(): Record<K, Y_1395>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1394>[K]>[];
                                        map: <Y_1399>(projector: Projector<Record<K, Y_1394>[K], Y_1399>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1399>[];
                                            map: <Y_1400>(projector: Projector<Y_1399, Y_1400>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1399>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1394>[K]>[K]>[];
                                            map: <Y_1401>(projector: Projector<Record<K, Record<K, Y_1394>[K]>[K], Y_1401>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1394>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1394>[K]>;
                                    };
                                    asObject(): Record<K, Y_1394>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1402>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K], Y_1402>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1402>[];
                                        map: <Y_1403>(projector: Projector<Y_1402, Y_1403>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1403>[];
                                            map: <Y_1404>(projector: Projector<Y_1403, Y_1404>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1403>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1402>[K]>[];
                                            map: <Y_1405>(projector: Projector<Record<K, Y_1402>[K], Y_1405>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1402>[K]>;
                                        };
                                        asObject(): Record<K, Y_1402>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1406>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K], Y_1406>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1406>[];
                                            map: <Y_1407>(projector: Projector<Y_1406, Y_1407>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1406>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1408>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K]>[K], Y_1408>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_1281>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_1281>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_1281>[K]>;
                    };
                    asObject(): Record<K, Y_1281>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Record<K, Y_1024>[K]>[K]>[];
                    map: <Y_1409>(projector: Projector<Record<K, Record<K, Y_1024>[K]>[K], Y_1409>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1409>[];
                        map: <Y_1410>(projector: Projector<Y_1409, Y_1410>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1410>[];
                            map: <Y_1411>(projector: Projector<Y_1410, Y_1411>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1411>[];
                                map: <Y_1412>(projector: Projector<Y_1411, Y_1412>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1412>[];
                                    map: <Y_1413>(projector: Projector<Y_1412, Y_1413>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1413>[];
                                        map: <Y_1414>(projector: Projector<Y_1413, Y_1414>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1414>[];
                                            map: <Y_1415>(projector: Projector<Y_1414, Y_1415>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1414>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1413>[K]>[];
                                            map: <Y_1416>(projector: Projector<Record<K, Y_1413>[K], Y_1416>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1413>[K]>;
                                        };
                                        asObject(): Record<K, Y_1413>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1412>[K]>[];
                                        map: <Y_1417>(projector: Projector<Record<K, Y_1412>[K], Y_1417>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1417>[];
                                            map: <Y_1418>(projector: Projector<Y_1417, Y_1418>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1417>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1412>[K]>[K]>[];
                                            map: <Y_1419>(projector: Projector<Record<K, Record<K, Y_1412>[K]>[K], Y_1419>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1412>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1412>[K]>;
                                    };
                                    asObject(): Record<K, Y_1412>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1411>[K]>[];
                                    map: <Y_1420>(projector: Projector<Record<K, Y_1411>[K], Y_1420>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1420>[];
                                        map: <Y_1421>(projector: Projector<Y_1420, Y_1421>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1421>[];
                                            map: <Y_1422>(projector: Projector<Y_1421, Y_1422>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1421>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1420>[K]>[];
                                            map: <Y_1423>(projector: Projector<Record<K, Y_1420>[K], Y_1423>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1420>[K]>;
                                        };
                                        asObject(): Record<K, Y_1420>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1411>[K]>[K]>[];
                                        map: <Y_1424>(projector: Projector<Record<K, Record<K, Y_1411>[K]>[K], Y_1424>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1424>[];
                                            map: <Y_1425>(projector: Projector<Y_1424, Y_1425>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1424>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1411>[K]>[K]>[K]>[];
                                            map: <Y_1426>(projector: Projector<Record<K, Record<K, Record<K, Y_1411>[K]>[K]>[K], Y_1426>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1411>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1411>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1411>[K]>;
                                };
                                asObject(): Record<K, Y_1411>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1410>[K]>[];
                                map: <Y_1427>(projector: Projector<Record<K, Y_1410>[K], Y_1427>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1427>[];
                                    map: <Y_1428>(projector: Projector<Y_1427, Y_1428>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1428>[];
                                        map: <Y_1429>(projector: Projector<Y_1428, Y_1429>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1429>[];
                                            map: <Y_1430>(projector: Projector<Y_1429, Y_1430>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1429>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1428>[K]>[];
                                            map: <Y_1431>(projector: Projector<Record<K, Y_1428>[K], Y_1431>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1428>[K]>;
                                        };
                                        asObject(): Record<K, Y_1428>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1427>[K]>[];
                                        map: <Y_1432>(projector: Projector<Record<K, Y_1427>[K], Y_1432>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1432>[];
                                            map: <Y_1433>(projector: Projector<Y_1432, Y_1433>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1432>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1427>[K]>[K]>[];
                                            map: <Y_1434>(projector: Projector<Record<K, Record<K, Y_1427>[K]>[K], Y_1434>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1427>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1427>[K]>;
                                    };
                                    asObject(): Record<K, Y_1427>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1410>[K]>[K]>[];
                                    map: <Y_1435>(projector: Projector<Record<K, Record<K, Y_1410>[K]>[K], Y_1435>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1435>[];
                                        map: <Y_1436>(projector: Projector<Y_1435, Y_1436>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1436>[];
                                            map: <Y_1437>(projector: Projector<Y_1436, Y_1437>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1436>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1435>[K]>[];
                                            map: <Y_1438>(projector: Projector<Record<K, Y_1435>[K], Y_1438>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1435>[K]>;
                                        };
                                        asObject(): Record<K, Y_1435>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K]>[];
                                        map: <Y_1439>(projector: Projector<Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K], Y_1439>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1439>[];
                                            map: <Y_1440>(projector: Projector<Y_1439, Y_1440>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1439>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1441>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K]>[K], Y_1441>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1410>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1410>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1410>[K]>;
                            };
                            asObject(): Record<K, Y_1410>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1409>[K]>[];
                            map: <Y_1442>(projector: Projector<Record<K, Y_1409>[K], Y_1442>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1442>[];
                                map: <Y_1443>(projector: Projector<Y_1442, Y_1443>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1443>[];
                                    map: <Y_1444>(projector: Projector<Y_1443, Y_1444>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1444>[];
                                        map: <Y_1445>(projector: Projector<Y_1444, Y_1445>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1445>[];
                                            map: <Y_1446>(projector: Projector<Y_1445, Y_1446>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1445>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1444>[K]>[];
                                            map: <Y_1447>(projector: Projector<Record<K, Y_1444>[K], Y_1447>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1444>[K]>;
                                        };
                                        asObject(): Record<K, Y_1444>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1443>[K]>[];
                                        map: <Y_1448>(projector: Projector<Record<K, Y_1443>[K], Y_1448>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1448>[];
                                            map: <Y_1449>(projector: Projector<Y_1448, Y_1449>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1448>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1443>[K]>[K]>[];
                                            map: <Y_1450>(projector: Projector<Record<K, Record<K, Y_1443>[K]>[K], Y_1450>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1443>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1443>[K]>;
                                    };
                                    asObject(): Record<K, Y_1443>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1442>[K]>[];
                                    map: <Y_1451>(projector: Projector<Record<K, Y_1442>[K], Y_1451>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1451>[];
                                        map: <Y_1452>(projector: Projector<Y_1451, Y_1452>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1452>[];
                                            map: <Y_1453>(projector: Projector<Y_1452, Y_1453>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1452>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1451>[K]>[];
                                            map: <Y_1454>(projector: Projector<Record<K, Y_1451>[K], Y_1454>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1451>[K]>;
                                        };
                                        asObject(): Record<K, Y_1451>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1442>[K]>[K]>[];
                                        map: <Y_1455>(projector: Projector<Record<K, Record<K, Y_1442>[K]>[K], Y_1455>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1455>[];
                                            map: <Y_1456>(projector: Projector<Y_1455, Y_1456>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1455>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1442>[K]>[K]>[K]>[];
                                            map: <Y_1457>(projector: Projector<Record<K, Record<K, Record<K, Y_1442>[K]>[K]>[K], Y_1457>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1442>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1442>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1442>[K]>;
                                };
                                asObject(): Record<K, Y_1442>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1409>[K]>[K]>[];
                                map: <Y_1458>(projector: Projector<Record<K, Record<K, Y_1409>[K]>[K], Y_1458>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1458>[];
                                    map: <Y_1459>(projector: Projector<Y_1458, Y_1459>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1459>[];
                                        map: <Y_1460>(projector: Projector<Y_1459, Y_1460>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1460>[];
                                            map: <Y_1461>(projector: Projector<Y_1460, Y_1461>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1460>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1459>[K]>[];
                                            map: <Y_1462>(projector: Projector<Record<K, Y_1459>[K], Y_1462>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1459>[K]>;
                                        };
                                        asObject(): Record<K, Y_1459>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1458>[K]>[];
                                        map: <Y_1463>(projector: Projector<Record<K, Y_1458>[K], Y_1463>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1463>[];
                                            map: <Y_1464>(projector: Projector<Y_1463, Y_1464>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1463>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1458>[K]>[K]>[];
                                            map: <Y_1465>(projector: Projector<Record<K, Record<K, Y_1458>[K]>[K], Y_1465>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1458>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1458>[K]>;
                                    };
                                    asObject(): Record<K, Y_1458>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[];
                                    map: <Y_1466>(projector: Projector<Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K], Y_1466>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1466>[];
                                        map: <Y_1467>(projector: Projector<Y_1466, Y_1467>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1467>[];
                                            map: <Y_1468>(projector: Projector<Y_1467, Y_1468>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1467>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1466>[K]>[];
                                            map: <Y_1469>(projector: Projector<Record<K, Y_1466>[K], Y_1469>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1466>[K]>;
                                        };
                                        asObject(): Record<K, Y_1466>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1470>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K], Y_1470>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1470>[];
                                            map: <Y_1471>(projector: Projector<Y_1470, Y_1471>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1470>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1472>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K]>[K], Y_1472>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1409>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1409>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1409>[K]>;
                        };
                        asObject(): Record<K, Y_1409>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[];
                        map: <Y_1473>(projector: Projector<Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K], Y_1473>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1473>[];
                            map: <Y_1474>(projector: Projector<Y_1473, Y_1474>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1474>[];
                                map: <Y_1475>(projector: Projector<Y_1474, Y_1475>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1475>[];
                                    map: <Y_1476>(projector: Projector<Y_1475, Y_1476>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1476>[];
                                        map: <Y_1477>(projector: Projector<Y_1476, Y_1477>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1477>[];
                                            map: <Y_1478>(projector: Projector<Y_1477, Y_1478>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1477>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1476>[K]>[];
                                            map: <Y_1479>(projector: Projector<Record<K, Y_1476>[K], Y_1479>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1476>[K]>;
                                        };
                                        asObject(): Record<K, Y_1476>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1475>[K]>[];
                                        map: <Y_1480>(projector: Projector<Record<K, Y_1475>[K], Y_1480>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1480>[];
                                            map: <Y_1481>(projector: Projector<Y_1480, Y_1481>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1480>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1475>[K]>[K]>[];
                                            map: <Y_1482>(projector: Projector<Record<K, Record<K, Y_1475>[K]>[K], Y_1482>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1475>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1475>[K]>;
                                    };
                                    asObject(): Record<K, Y_1475>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1474>[K]>[];
                                    map: <Y_1483>(projector: Projector<Record<K, Y_1474>[K], Y_1483>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1483>[];
                                        map: <Y_1484>(projector: Projector<Y_1483, Y_1484>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1484>[];
                                            map: <Y_1485>(projector: Projector<Y_1484, Y_1485>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1484>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1483>[K]>[];
                                            map: <Y_1486>(projector: Projector<Record<K, Y_1483>[K], Y_1486>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1483>[K]>;
                                        };
                                        asObject(): Record<K, Y_1483>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1474>[K]>[K]>[];
                                        map: <Y_1487>(projector: Projector<Record<K, Record<K, Y_1474>[K]>[K], Y_1487>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1487>[];
                                            map: <Y_1488>(projector: Projector<Y_1487, Y_1488>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1487>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1474>[K]>[K]>[K]>[];
                                            map: <Y_1489>(projector: Projector<Record<K, Record<K, Record<K, Y_1474>[K]>[K]>[K], Y_1489>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1474>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1474>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1474>[K]>;
                                };
                                asObject(): Record<K, Y_1474>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1473>[K]>[];
                                map: <Y_1490>(projector: Projector<Record<K, Y_1473>[K], Y_1490>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1490>[];
                                    map: <Y_1491>(projector: Projector<Y_1490, Y_1491>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1491>[];
                                        map: <Y_1492>(projector: Projector<Y_1491, Y_1492>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1492>[];
                                            map: <Y_1493>(projector: Projector<Y_1492, Y_1493>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1492>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1491>[K]>[];
                                            map: <Y_1494>(projector: Projector<Record<K, Y_1491>[K], Y_1494>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1491>[K]>;
                                        };
                                        asObject(): Record<K, Y_1491>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1490>[K]>[];
                                        map: <Y_1495>(projector: Projector<Record<K, Y_1490>[K], Y_1495>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1495>[];
                                            map: <Y_1496>(projector: Projector<Y_1495, Y_1496>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1495>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1490>[K]>[K]>[];
                                            map: <Y_1497>(projector: Projector<Record<K, Record<K, Y_1490>[K]>[K], Y_1497>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1490>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1490>[K]>;
                                    };
                                    asObject(): Record<K, Y_1490>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1473>[K]>[K]>[];
                                    map: <Y_1498>(projector: Projector<Record<K, Record<K, Y_1473>[K]>[K], Y_1498>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1498>[];
                                        map: <Y_1499>(projector: Projector<Y_1498, Y_1499>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1499>[];
                                            map: <Y_1500>(projector: Projector<Y_1499, Y_1500>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1499>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1498>[K]>[];
                                            map: <Y_1501>(projector: Projector<Record<K, Y_1498>[K], Y_1501>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1498>[K]>;
                                        };
                                        asObject(): Record<K, Y_1498>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K]>[];
                                        map: <Y_1502>(projector: Projector<Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K], Y_1502>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1502>[];
                                            map: <Y_1503>(projector: Projector<Y_1502, Y_1503>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1502>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1504>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K]>[K], Y_1504>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1473>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1473>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1473>[K]>;
                            };
                            asObject(): Record<K, Y_1473>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[];
                            map: <Y_1505>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K], Y_1505>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1505>[];
                                map: <Y_1506>(projector: Projector<Y_1505, Y_1506>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1506>[];
                                    map: <Y_1507>(projector: Projector<Y_1506, Y_1507>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1507>[];
                                        map: <Y_1508>(projector: Projector<Y_1507, Y_1508>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1508>[];
                                            map: <Y_1509>(projector: Projector<Y_1508, Y_1509>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1508>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1507>[K]>[];
                                            map: <Y_1510>(projector: Projector<Record<K, Y_1507>[K], Y_1510>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1507>[K]>;
                                        };
                                        asObject(): Record<K, Y_1507>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1506>[K]>[];
                                        map: <Y_1511>(projector: Projector<Record<K, Y_1506>[K], Y_1511>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1511>[];
                                            map: <Y_1512>(projector: Projector<Y_1511, Y_1512>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1511>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1506>[K]>[K]>[];
                                            map: <Y_1513>(projector: Projector<Record<K, Record<K, Y_1506>[K]>[K], Y_1513>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1506>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1506>[K]>;
                                    };
                                    asObject(): Record<K, Y_1506>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1505>[K]>[];
                                    map: <Y_1514>(projector: Projector<Record<K, Y_1505>[K], Y_1514>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1514>[];
                                        map: <Y_1515>(projector: Projector<Y_1514, Y_1515>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1515>[];
                                            map: <Y_1516>(projector: Projector<Y_1515, Y_1516>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1515>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1514>[K]>[];
                                            map: <Y_1517>(projector: Projector<Record<K, Y_1514>[K], Y_1517>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1514>[K]>;
                                        };
                                        asObject(): Record<K, Y_1514>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1505>[K]>[K]>[];
                                        map: <Y_1518>(projector: Projector<Record<K, Record<K, Y_1505>[K]>[K], Y_1518>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1518>[];
                                            map: <Y_1519>(projector: Projector<Y_1518, Y_1519>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1518>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1505>[K]>[K]>[K]>[];
                                            map: <Y_1520>(projector: Projector<Record<K, Record<K, Record<K, Y_1505>[K]>[K]>[K], Y_1520>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1505>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1505>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1505>[K]>;
                                };
                                asObject(): Record<K, Y_1505>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[];
                                map: <Y_1521>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K], Y_1521>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1521>[];
                                    map: <Y_1522>(projector: Projector<Y_1521, Y_1522>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1522>[];
                                        map: <Y_1523>(projector: Projector<Y_1522, Y_1523>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1523>[];
                                            map: <Y_1524>(projector: Projector<Y_1523, Y_1524>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1523>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1522>[K]>[];
                                            map: <Y_1525>(projector: Projector<Record<K, Y_1522>[K], Y_1525>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1522>[K]>;
                                        };
                                        asObject(): Record<K, Y_1522>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1521>[K]>[];
                                        map: <Y_1526>(projector: Projector<Record<K, Y_1521>[K], Y_1526>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1526>[];
                                            map: <Y_1527>(projector: Projector<Y_1526, Y_1527>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1526>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1521>[K]>[K]>[];
                                            map: <Y_1528>(projector: Projector<Record<K, Record<K, Y_1521>[K]>[K], Y_1528>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1521>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1521>[K]>;
                                    };
                                    asObject(): Record<K, Y_1521>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1529>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K], Y_1529>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1529>[];
                                        map: <Y_1530>(projector: Projector<Y_1529, Y_1530>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1530>[];
                                            map: <Y_1531>(projector: Projector<Y_1530, Y_1531>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1530>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1529>[K]>[];
                                            map: <Y_1532>(projector: Projector<Record<K, Y_1529>[K], Y_1532>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1529>[K]>;
                                        };
                                        asObject(): Record<K, Y_1529>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1533>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1533>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1533>[];
                                            map: <Y_1534>(projector: Projector<Y_1533, Y_1534>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1533>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1535>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1535>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1024>[K]>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Record<K, Y_1024>[K]>[K]>;
                };
                asObject(): Record<K, Record<K, Y_1024>[K]>;
            };
            asObject(): Record<K, Y_1024>;
        };
        pick(...keys: K[]): {
            keys: () => string[];
            values: () => unknown[];
            entries: () => Tuple<K, Record<K, Record<K, V>[K]>[K]>[];
            map: <Y_1536>(projector: Projector<Record<K, Record<K, V>[K]>[K], Y_1536>) => {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Y_1536>[];
                map: <Y_1537>(projector: Projector<Y_1536, Y_1537>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_1537>[];
                    map: <Y_1538>(projector: Projector<Y_1537, Y_1538>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1538>[];
                        map: <Y_1539>(projector: Projector<Y_1538, Y_1539>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1539>[];
                            map: <Y_1540>(projector: Projector<Y_1539, Y_1540>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1540>[];
                                map: <Y_1541>(projector: Projector<Y_1540, Y_1541>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1541>[];
                                    map: <Y_1542>(projector: Projector<Y_1541, Y_1542>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1542>[];
                                        map: <Y_1543>(projector: Projector<Y_1542, Y_1543>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1543>[];
                                            map: <Y_1544>(projector: Projector<Y_1543, Y_1544>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1543>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1542>[K]>[];
                                            map: <Y_1545>(projector: Projector<Record<K, Y_1542>[K], Y_1545>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1542>[K]>;
                                        };
                                        asObject(): Record<K, Y_1542>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1541>[K]>[];
                                        map: <Y_1546>(projector: Projector<Record<K, Y_1541>[K], Y_1546>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1546>[];
                                            map: <Y_1547>(projector: Projector<Y_1546, Y_1547>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1546>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1541>[K]>[K]>[];
                                            map: <Y_1548>(projector: Projector<Record<K, Record<K, Y_1541>[K]>[K], Y_1548>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1541>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1541>[K]>;
                                    };
                                    asObject(): Record<K, Y_1541>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1540>[K]>[];
                                    map: <Y_1549>(projector: Projector<Record<K, Y_1540>[K], Y_1549>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1549>[];
                                        map: <Y_1550>(projector: Projector<Y_1549, Y_1550>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1550>[];
                                            map: <Y_1551>(projector: Projector<Y_1550, Y_1551>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1550>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1549>[K]>[];
                                            map: <Y_1552>(projector: Projector<Record<K, Y_1549>[K], Y_1552>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1549>[K]>;
                                        };
                                        asObject(): Record<K, Y_1549>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1540>[K]>[K]>[];
                                        map: <Y_1553>(projector: Projector<Record<K, Record<K, Y_1540>[K]>[K], Y_1553>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1553>[];
                                            map: <Y_1554>(projector: Projector<Y_1553, Y_1554>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1553>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1540>[K]>[K]>[K]>[];
                                            map: <Y_1555>(projector: Projector<Record<K, Record<K, Record<K, Y_1540>[K]>[K]>[K], Y_1555>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1540>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1540>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1540>[K]>;
                                };
                                asObject(): Record<K, Y_1540>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1539>[K]>[];
                                map: <Y_1556>(projector: Projector<Record<K, Y_1539>[K], Y_1556>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1556>[];
                                    map: <Y_1557>(projector: Projector<Y_1556, Y_1557>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1557>[];
                                        map: <Y_1558>(projector: Projector<Y_1557, Y_1558>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1558>[];
                                            map: <Y_1559>(projector: Projector<Y_1558, Y_1559>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1558>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1557>[K]>[];
                                            map: <Y_1560>(projector: Projector<Record<K, Y_1557>[K], Y_1560>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1557>[K]>;
                                        };
                                        asObject(): Record<K, Y_1557>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1556>[K]>[];
                                        map: <Y_1561>(projector: Projector<Record<K, Y_1556>[K], Y_1561>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1561>[];
                                            map: <Y_1562>(projector: Projector<Y_1561, Y_1562>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1561>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1556>[K]>[K]>[];
                                            map: <Y_1563>(projector: Projector<Record<K, Record<K, Y_1556>[K]>[K], Y_1563>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1556>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1556>[K]>;
                                    };
                                    asObject(): Record<K, Y_1556>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1539>[K]>[K]>[];
                                    map: <Y_1564>(projector: Projector<Record<K, Record<K, Y_1539>[K]>[K], Y_1564>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1564>[];
                                        map: <Y_1565>(projector: Projector<Y_1564, Y_1565>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1565>[];
                                            map: <Y_1566>(projector: Projector<Y_1565, Y_1566>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1565>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1564>[K]>[];
                                            map: <Y_1567>(projector: Projector<Record<K, Y_1564>[K], Y_1567>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1564>[K]>;
                                        };
                                        asObject(): Record<K, Y_1564>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K]>[];
                                        map: <Y_1568>(projector: Projector<Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K], Y_1568>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1568>[];
                                            map: <Y_1569>(projector: Projector<Y_1568, Y_1569>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1568>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1570>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K]>[K], Y_1570>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1539>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1539>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1539>[K]>;
                            };
                            asObject(): Record<K, Y_1539>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1538>[K]>[];
                            map: <Y_1571>(projector: Projector<Record<K, Y_1538>[K], Y_1571>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1571>[];
                                map: <Y_1572>(projector: Projector<Y_1571, Y_1572>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1572>[];
                                    map: <Y_1573>(projector: Projector<Y_1572, Y_1573>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1573>[];
                                        map: <Y_1574>(projector: Projector<Y_1573, Y_1574>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1574>[];
                                            map: <Y_1575>(projector: Projector<Y_1574, Y_1575>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1574>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1573>[K]>[];
                                            map: <Y_1576>(projector: Projector<Record<K, Y_1573>[K], Y_1576>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1573>[K]>;
                                        };
                                        asObject(): Record<K, Y_1573>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1572>[K]>[];
                                        map: <Y_1577>(projector: Projector<Record<K, Y_1572>[K], Y_1577>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1577>[];
                                            map: <Y_1578>(projector: Projector<Y_1577, Y_1578>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1577>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1572>[K]>[K]>[];
                                            map: <Y_1579>(projector: Projector<Record<K, Record<K, Y_1572>[K]>[K], Y_1579>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1572>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1572>[K]>;
                                    };
                                    asObject(): Record<K, Y_1572>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1571>[K]>[];
                                    map: <Y_1580>(projector: Projector<Record<K, Y_1571>[K], Y_1580>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1580>[];
                                        map: <Y_1581>(projector: Projector<Y_1580, Y_1581>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1581>[];
                                            map: <Y_1582>(projector: Projector<Y_1581, Y_1582>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1581>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1580>[K]>[];
                                            map: <Y_1583>(projector: Projector<Record<K, Y_1580>[K], Y_1583>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1580>[K]>;
                                        };
                                        asObject(): Record<K, Y_1580>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1571>[K]>[K]>[];
                                        map: <Y_1584>(projector: Projector<Record<K, Record<K, Y_1571>[K]>[K], Y_1584>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1584>[];
                                            map: <Y_1585>(projector: Projector<Y_1584, Y_1585>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1584>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1571>[K]>[K]>[K]>[];
                                            map: <Y_1586>(projector: Projector<Record<K, Record<K, Record<K, Y_1571>[K]>[K]>[K], Y_1586>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1571>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1571>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1571>[K]>;
                                };
                                asObject(): Record<K, Y_1571>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1538>[K]>[K]>[];
                                map: <Y_1587>(projector: Projector<Record<K, Record<K, Y_1538>[K]>[K], Y_1587>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1587>[];
                                    map: <Y_1588>(projector: Projector<Y_1587, Y_1588>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1588>[];
                                        map: <Y_1589>(projector: Projector<Y_1588, Y_1589>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1589>[];
                                            map: <Y_1590>(projector: Projector<Y_1589, Y_1590>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1589>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1588>[K]>[];
                                            map: <Y_1591>(projector: Projector<Record<K, Y_1588>[K], Y_1591>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1588>[K]>;
                                        };
                                        asObject(): Record<K, Y_1588>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1587>[K]>[];
                                        map: <Y_1592>(projector: Projector<Record<K, Y_1587>[K], Y_1592>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1592>[];
                                            map: <Y_1593>(projector: Projector<Y_1592, Y_1593>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1592>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1587>[K]>[K]>[];
                                            map: <Y_1594>(projector: Projector<Record<K, Record<K, Y_1587>[K]>[K], Y_1594>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1587>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1587>[K]>;
                                    };
                                    asObject(): Record<K, Y_1587>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[];
                                    map: <Y_1595>(projector: Projector<Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K], Y_1595>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1595>[];
                                        map: <Y_1596>(projector: Projector<Y_1595, Y_1596>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1596>[];
                                            map: <Y_1597>(projector: Projector<Y_1596, Y_1597>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1596>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1595>[K]>[];
                                            map: <Y_1598>(projector: Projector<Record<K, Y_1595>[K], Y_1598>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1595>[K]>;
                                        };
                                        asObject(): Record<K, Y_1595>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1599>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K], Y_1599>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1599>[];
                                            map: <Y_1600>(projector: Projector<Y_1599, Y_1600>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1599>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1601>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K]>[K], Y_1601>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1538>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1538>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1538>[K]>;
                        };
                        asObject(): Record<K, Y_1538>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_1537>[K]>[];
                        map: <Y_1602>(projector: Projector<Record<K, Y_1537>[K], Y_1602>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1602>[];
                            map: <Y_1603>(projector: Projector<Y_1602, Y_1603>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1603>[];
                                map: <Y_1604>(projector: Projector<Y_1603, Y_1604>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1604>[];
                                    map: <Y_1605>(projector: Projector<Y_1604, Y_1605>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1605>[];
                                        map: <Y_1606>(projector: Projector<Y_1605, Y_1606>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1606>[];
                                            map: <Y_1607>(projector: Projector<Y_1606, Y_1607>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1606>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1605>[K]>[];
                                            map: <Y_1608>(projector: Projector<Record<K, Y_1605>[K], Y_1608>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1605>[K]>;
                                        };
                                        asObject(): Record<K, Y_1605>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1604>[K]>[];
                                        map: <Y_1609>(projector: Projector<Record<K, Y_1604>[K], Y_1609>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1609>[];
                                            map: <Y_1610>(projector: Projector<Y_1609, Y_1610>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1609>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1604>[K]>[K]>[];
                                            map: <Y_1611>(projector: Projector<Record<K, Record<K, Y_1604>[K]>[K], Y_1611>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1604>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1604>[K]>;
                                    };
                                    asObject(): Record<K, Y_1604>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1603>[K]>[];
                                    map: <Y_1612>(projector: Projector<Record<K, Y_1603>[K], Y_1612>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1612>[];
                                        map: <Y_1613>(projector: Projector<Y_1612, Y_1613>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1613>[];
                                            map: <Y_1614>(projector: Projector<Y_1613, Y_1614>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1613>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1612>[K]>[];
                                            map: <Y_1615>(projector: Projector<Record<K, Y_1612>[K], Y_1615>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1612>[K]>;
                                        };
                                        asObject(): Record<K, Y_1612>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1603>[K]>[K]>[];
                                        map: <Y_1616>(projector: Projector<Record<K, Record<K, Y_1603>[K]>[K], Y_1616>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1616>[];
                                            map: <Y_1617>(projector: Projector<Y_1616, Y_1617>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1616>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1603>[K]>[K]>[K]>[];
                                            map: <Y_1618>(projector: Projector<Record<K, Record<K, Record<K, Y_1603>[K]>[K]>[K], Y_1618>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1603>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1603>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1603>[K]>;
                                };
                                asObject(): Record<K, Y_1603>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1602>[K]>[];
                                map: <Y_1619>(projector: Projector<Record<K, Y_1602>[K], Y_1619>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1619>[];
                                    map: <Y_1620>(projector: Projector<Y_1619, Y_1620>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1620>[];
                                        map: <Y_1621>(projector: Projector<Y_1620, Y_1621>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1621>[];
                                            map: <Y_1622>(projector: Projector<Y_1621, Y_1622>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1621>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1620>[K]>[];
                                            map: <Y_1623>(projector: Projector<Record<K, Y_1620>[K], Y_1623>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1620>[K]>;
                                        };
                                        asObject(): Record<K, Y_1620>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1619>[K]>[];
                                        map: <Y_1624>(projector: Projector<Record<K, Y_1619>[K], Y_1624>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1624>[];
                                            map: <Y_1625>(projector: Projector<Y_1624, Y_1625>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1624>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1619>[K]>[K]>[];
                                            map: <Y_1626>(projector: Projector<Record<K, Record<K, Y_1619>[K]>[K], Y_1626>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1619>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1619>[K]>;
                                    };
                                    asObject(): Record<K, Y_1619>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1602>[K]>[K]>[];
                                    map: <Y_1627>(projector: Projector<Record<K, Record<K, Y_1602>[K]>[K], Y_1627>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1627>[];
                                        map: <Y_1628>(projector: Projector<Y_1627, Y_1628>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1628>[];
                                            map: <Y_1629>(projector: Projector<Y_1628, Y_1629>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1628>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1627>[K]>[];
                                            map: <Y_1630>(projector: Projector<Record<K, Y_1627>[K], Y_1630>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1627>[K]>;
                                        };
                                        asObject(): Record<K, Y_1627>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K]>[];
                                        map: <Y_1631>(projector: Projector<Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K], Y_1631>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1631>[];
                                            map: <Y_1632>(projector: Projector<Y_1631, Y_1632>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1631>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1633>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K]>[K], Y_1633>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1602>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1602>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1602>[K]>;
                            };
                            asObject(): Record<K, Y_1602>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_1537>[K]>[K]>[];
                            map: <Y_1634>(projector: Projector<Record<K, Record<K, Y_1537>[K]>[K], Y_1634>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1634>[];
                                map: <Y_1635>(projector: Projector<Y_1634, Y_1635>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1635>[];
                                    map: <Y_1636>(projector: Projector<Y_1635, Y_1636>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1636>[];
                                        map: <Y_1637>(projector: Projector<Y_1636, Y_1637>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1637>[];
                                            map: <Y_1638>(projector: Projector<Y_1637, Y_1638>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1637>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1636>[K]>[];
                                            map: <Y_1639>(projector: Projector<Record<K, Y_1636>[K], Y_1639>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1636>[K]>;
                                        };
                                        asObject(): Record<K, Y_1636>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1635>[K]>[];
                                        map: <Y_1640>(projector: Projector<Record<K, Y_1635>[K], Y_1640>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1640>[];
                                            map: <Y_1641>(projector: Projector<Y_1640, Y_1641>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1640>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1635>[K]>[K]>[];
                                            map: <Y_1642>(projector: Projector<Record<K, Record<K, Y_1635>[K]>[K], Y_1642>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1635>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1635>[K]>;
                                    };
                                    asObject(): Record<K, Y_1635>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1634>[K]>[];
                                    map: <Y_1643>(projector: Projector<Record<K, Y_1634>[K], Y_1643>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1643>[];
                                        map: <Y_1644>(projector: Projector<Y_1643, Y_1644>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1644>[];
                                            map: <Y_1645>(projector: Projector<Y_1644, Y_1645>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1644>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1643>[K]>[];
                                            map: <Y_1646>(projector: Projector<Record<K, Y_1643>[K], Y_1646>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1643>[K]>;
                                        };
                                        asObject(): Record<K, Y_1643>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1634>[K]>[K]>[];
                                        map: <Y_1647>(projector: Projector<Record<K, Record<K, Y_1634>[K]>[K], Y_1647>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1647>[];
                                            map: <Y_1648>(projector: Projector<Y_1647, Y_1648>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1647>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1634>[K]>[K]>[K]>[];
                                            map: <Y_1649>(projector: Projector<Record<K, Record<K, Record<K, Y_1634>[K]>[K]>[K], Y_1649>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1634>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1634>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1634>[K]>;
                                };
                                asObject(): Record<K, Y_1634>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[];
                                map: <Y_1650>(projector: Projector<Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K], Y_1650>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1650>[];
                                    map: <Y_1651>(projector: Projector<Y_1650, Y_1651>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1651>[];
                                        map: <Y_1652>(projector: Projector<Y_1651, Y_1652>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1652>[];
                                            map: <Y_1653>(projector: Projector<Y_1652, Y_1653>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1652>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1651>[K]>[];
                                            map: <Y_1654>(projector: Projector<Record<K, Y_1651>[K], Y_1654>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1651>[K]>;
                                        };
                                        asObject(): Record<K, Y_1651>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1650>[K]>[];
                                        map: <Y_1655>(projector: Projector<Record<K, Y_1650>[K], Y_1655>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1655>[];
                                            map: <Y_1656>(projector: Projector<Y_1655, Y_1656>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1655>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1650>[K]>[K]>[];
                                            map: <Y_1657>(projector: Projector<Record<K, Record<K, Y_1650>[K]>[K], Y_1657>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1650>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1650>[K]>;
                                    };
                                    asObject(): Record<K, Y_1650>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1658>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K], Y_1658>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1658>[];
                                        map: <Y_1659>(projector: Projector<Y_1658, Y_1659>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1659>[];
                                            map: <Y_1660>(projector: Projector<Y_1659, Y_1660>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1659>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1658>[K]>[];
                                            map: <Y_1661>(projector: Projector<Record<K, Y_1658>[K], Y_1661>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1658>[K]>;
                                        };
                                        asObject(): Record<K, Y_1658>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1662>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K], Y_1662>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1662>[];
                                            map: <Y_1663>(projector: Projector<Y_1662, Y_1663>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1662>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1664>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K]>[K], Y_1664>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_1537>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_1537>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_1537>[K]>;
                    };
                    asObject(): Record<K, Y_1537>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Y_1536>[K]>[];
                    map: <Y_1665>(projector: Projector<Record<K, Y_1536>[K], Y_1665>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1665>[];
                        map: <Y_1666>(projector: Projector<Y_1665, Y_1666>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1666>[];
                            map: <Y_1667>(projector: Projector<Y_1666, Y_1667>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1667>[];
                                map: <Y_1668>(projector: Projector<Y_1667, Y_1668>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1668>[];
                                    map: <Y_1669>(projector: Projector<Y_1668, Y_1669>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1669>[];
                                        map: <Y_1670>(projector: Projector<Y_1669, Y_1670>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1670>[];
                                            map: <Y_1671>(projector: Projector<Y_1670, Y_1671>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1670>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1669>[K]>[];
                                            map: <Y_1672>(projector: Projector<Record<K, Y_1669>[K], Y_1672>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1669>[K]>;
                                        };
                                        asObject(): Record<K, Y_1669>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1668>[K]>[];
                                        map: <Y_1673>(projector: Projector<Record<K, Y_1668>[K], Y_1673>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1673>[];
                                            map: <Y_1674>(projector: Projector<Y_1673, Y_1674>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1673>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1668>[K]>[K]>[];
                                            map: <Y_1675>(projector: Projector<Record<K, Record<K, Y_1668>[K]>[K], Y_1675>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1668>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1668>[K]>;
                                    };
                                    asObject(): Record<K, Y_1668>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1667>[K]>[];
                                    map: <Y_1676>(projector: Projector<Record<K, Y_1667>[K], Y_1676>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1676>[];
                                        map: <Y_1677>(projector: Projector<Y_1676, Y_1677>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1677>[];
                                            map: <Y_1678>(projector: Projector<Y_1677, Y_1678>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1677>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1676>[K]>[];
                                            map: <Y_1679>(projector: Projector<Record<K, Y_1676>[K], Y_1679>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1676>[K]>;
                                        };
                                        asObject(): Record<K, Y_1676>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1667>[K]>[K]>[];
                                        map: <Y_1680>(projector: Projector<Record<K, Record<K, Y_1667>[K]>[K], Y_1680>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1680>[];
                                            map: <Y_1681>(projector: Projector<Y_1680, Y_1681>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1680>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1667>[K]>[K]>[K]>[];
                                            map: <Y_1682>(projector: Projector<Record<K, Record<K, Record<K, Y_1667>[K]>[K]>[K], Y_1682>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1667>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1667>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1667>[K]>;
                                };
                                asObject(): Record<K, Y_1667>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1666>[K]>[];
                                map: <Y_1683>(projector: Projector<Record<K, Y_1666>[K], Y_1683>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1683>[];
                                    map: <Y_1684>(projector: Projector<Y_1683, Y_1684>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1684>[];
                                        map: <Y_1685>(projector: Projector<Y_1684, Y_1685>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1685>[];
                                            map: <Y_1686>(projector: Projector<Y_1685, Y_1686>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1685>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1684>[K]>[];
                                            map: <Y_1687>(projector: Projector<Record<K, Y_1684>[K], Y_1687>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1684>[K]>;
                                        };
                                        asObject(): Record<K, Y_1684>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1683>[K]>[];
                                        map: <Y_1688>(projector: Projector<Record<K, Y_1683>[K], Y_1688>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1688>[];
                                            map: <Y_1689>(projector: Projector<Y_1688, Y_1689>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1688>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1683>[K]>[K]>[];
                                            map: <Y_1690>(projector: Projector<Record<K, Record<K, Y_1683>[K]>[K], Y_1690>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1683>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1683>[K]>;
                                    };
                                    asObject(): Record<K, Y_1683>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1666>[K]>[K]>[];
                                    map: <Y_1691>(projector: Projector<Record<K, Record<K, Y_1666>[K]>[K], Y_1691>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1691>[];
                                        map: <Y_1692>(projector: Projector<Y_1691, Y_1692>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1692>[];
                                            map: <Y_1693>(projector: Projector<Y_1692, Y_1693>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1692>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1691>[K]>[];
                                            map: <Y_1694>(projector: Projector<Record<K, Y_1691>[K], Y_1694>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1691>[K]>;
                                        };
                                        asObject(): Record<K, Y_1691>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K]>[];
                                        map: <Y_1695>(projector: Projector<Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K], Y_1695>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1695>[];
                                            map: <Y_1696>(projector: Projector<Y_1695, Y_1696>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1695>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1697>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K]>[K], Y_1697>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1666>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1666>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1666>[K]>;
                            };
                            asObject(): Record<K, Y_1666>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1665>[K]>[];
                            map: <Y_1698>(projector: Projector<Record<K, Y_1665>[K], Y_1698>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1698>[];
                                map: <Y_1699>(projector: Projector<Y_1698, Y_1699>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1699>[];
                                    map: <Y_1700>(projector: Projector<Y_1699, Y_1700>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1700>[];
                                        map: <Y_1701>(projector: Projector<Y_1700, Y_1701>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1701>[];
                                            map: <Y_1702>(projector: Projector<Y_1701, Y_1702>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1701>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1700>[K]>[];
                                            map: <Y_1703>(projector: Projector<Record<K, Y_1700>[K], Y_1703>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1700>[K]>;
                                        };
                                        asObject(): Record<K, Y_1700>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1699>[K]>[];
                                        map: <Y_1704>(projector: Projector<Record<K, Y_1699>[K], Y_1704>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1704>[];
                                            map: <Y_1705>(projector: Projector<Y_1704, Y_1705>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1704>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1699>[K]>[K]>[];
                                            map: <Y_1706>(projector: Projector<Record<K, Record<K, Y_1699>[K]>[K], Y_1706>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1699>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1699>[K]>;
                                    };
                                    asObject(): Record<K, Y_1699>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1698>[K]>[];
                                    map: <Y_1707>(projector: Projector<Record<K, Y_1698>[K], Y_1707>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1707>[];
                                        map: <Y_1708>(projector: Projector<Y_1707, Y_1708>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1708>[];
                                            map: <Y_1709>(projector: Projector<Y_1708, Y_1709>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1708>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1707>[K]>[];
                                            map: <Y_1710>(projector: Projector<Record<K, Y_1707>[K], Y_1710>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1707>[K]>;
                                        };
                                        asObject(): Record<K, Y_1707>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1698>[K]>[K]>[];
                                        map: <Y_1711>(projector: Projector<Record<K, Record<K, Y_1698>[K]>[K], Y_1711>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1711>[];
                                            map: <Y_1712>(projector: Projector<Y_1711, Y_1712>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1711>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1698>[K]>[K]>[K]>[];
                                            map: <Y_1713>(projector: Projector<Record<K, Record<K, Record<K, Y_1698>[K]>[K]>[K], Y_1713>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1698>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1698>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1698>[K]>;
                                };
                                asObject(): Record<K, Y_1698>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1665>[K]>[K]>[];
                                map: <Y_1714>(projector: Projector<Record<K, Record<K, Y_1665>[K]>[K], Y_1714>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1714>[];
                                    map: <Y_1715>(projector: Projector<Y_1714, Y_1715>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1715>[];
                                        map: <Y_1716>(projector: Projector<Y_1715, Y_1716>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1716>[];
                                            map: <Y_1717>(projector: Projector<Y_1716, Y_1717>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1716>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1715>[K]>[];
                                            map: <Y_1718>(projector: Projector<Record<K, Y_1715>[K], Y_1718>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1715>[K]>;
                                        };
                                        asObject(): Record<K, Y_1715>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1714>[K]>[];
                                        map: <Y_1719>(projector: Projector<Record<K, Y_1714>[K], Y_1719>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1719>[];
                                            map: <Y_1720>(projector: Projector<Y_1719, Y_1720>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1719>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1714>[K]>[K]>[];
                                            map: <Y_1721>(projector: Projector<Record<K, Record<K, Y_1714>[K]>[K], Y_1721>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1714>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1714>[K]>;
                                    };
                                    asObject(): Record<K, Y_1714>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[];
                                    map: <Y_1722>(projector: Projector<Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K], Y_1722>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1722>[];
                                        map: <Y_1723>(projector: Projector<Y_1722, Y_1723>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1723>[];
                                            map: <Y_1724>(projector: Projector<Y_1723, Y_1724>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1723>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1722>[K]>[];
                                            map: <Y_1725>(projector: Projector<Record<K, Y_1722>[K], Y_1725>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1722>[K]>;
                                        };
                                        asObject(): Record<K, Y_1722>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1726>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K], Y_1726>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1726>[];
                                            map: <Y_1727>(projector: Projector<Y_1726, Y_1727>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1726>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1728>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K]>[K], Y_1728>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1665>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1665>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1665>[K]>;
                        };
                        asObject(): Record<K, Y_1665>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Y_1536>[K]>[K]>[];
                        map: <Y_1729>(projector: Projector<Record<K, Record<K, Y_1536>[K]>[K], Y_1729>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1729>[];
                            map: <Y_1730>(projector: Projector<Y_1729, Y_1730>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1730>[];
                                map: <Y_1731>(projector: Projector<Y_1730, Y_1731>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1731>[];
                                    map: <Y_1732>(projector: Projector<Y_1731, Y_1732>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1732>[];
                                        map: <Y_1733>(projector: Projector<Y_1732, Y_1733>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1733>[];
                                            map: <Y_1734>(projector: Projector<Y_1733, Y_1734>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1733>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1732>[K]>[];
                                            map: <Y_1735>(projector: Projector<Record<K, Y_1732>[K], Y_1735>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1732>[K]>;
                                        };
                                        asObject(): Record<K, Y_1732>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1731>[K]>[];
                                        map: <Y_1736>(projector: Projector<Record<K, Y_1731>[K], Y_1736>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1736>[];
                                            map: <Y_1737>(projector: Projector<Y_1736, Y_1737>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1736>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1731>[K]>[K]>[];
                                            map: <Y_1738>(projector: Projector<Record<K, Record<K, Y_1731>[K]>[K], Y_1738>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1731>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1731>[K]>;
                                    };
                                    asObject(): Record<K, Y_1731>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1730>[K]>[];
                                    map: <Y_1739>(projector: Projector<Record<K, Y_1730>[K], Y_1739>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1739>[];
                                        map: <Y_1740>(projector: Projector<Y_1739, Y_1740>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1740>[];
                                            map: <Y_1741>(projector: Projector<Y_1740, Y_1741>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1740>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1739>[K]>[];
                                            map: <Y_1742>(projector: Projector<Record<K, Y_1739>[K], Y_1742>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1739>[K]>;
                                        };
                                        asObject(): Record<K, Y_1739>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1730>[K]>[K]>[];
                                        map: <Y_1743>(projector: Projector<Record<K, Record<K, Y_1730>[K]>[K], Y_1743>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1743>[];
                                            map: <Y_1744>(projector: Projector<Y_1743, Y_1744>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1743>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1730>[K]>[K]>[K]>[];
                                            map: <Y_1745>(projector: Projector<Record<K, Record<K, Record<K, Y_1730>[K]>[K]>[K], Y_1745>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1730>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1730>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1730>[K]>;
                                };
                                asObject(): Record<K, Y_1730>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1729>[K]>[];
                                map: <Y_1746>(projector: Projector<Record<K, Y_1729>[K], Y_1746>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1746>[];
                                    map: <Y_1747>(projector: Projector<Y_1746, Y_1747>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1747>[];
                                        map: <Y_1748>(projector: Projector<Y_1747, Y_1748>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1748>[];
                                            map: <Y_1749>(projector: Projector<Y_1748, Y_1749>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1748>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1747>[K]>[];
                                            map: <Y_1750>(projector: Projector<Record<K, Y_1747>[K], Y_1750>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1747>[K]>;
                                        };
                                        asObject(): Record<K, Y_1747>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1746>[K]>[];
                                        map: <Y_1751>(projector: Projector<Record<K, Y_1746>[K], Y_1751>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1751>[];
                                            map: <Y_1752>(projector: Projector<Y_1751, Y_1752>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1751>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1746>[K]>[K]>[];
                                            map: <Y_1753>(projector: Projector<Record<K, Record<K, Y_1746>[K]>[K], Y_1753>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1746>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1746>[K]>;
                                    };
                                    asObject(): Record<K, Y_1746>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1729>[K]>[K]>[];
                                    map: <Y_1754>(projector: Projector<Record<K, Record<K, Y_1729>[K]>[K], Y_1754>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1754>[];
                                        map: <Y_1755>(projector: Projector<Y_1754, Y_1755>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1755>[];
                                            map: <Y_1756>(projector: Projector<Y_1755, Y_1756>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1755>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1754>[K]>[];
                                            map: <Y_1757>(projector: Projector<Record<K, Y_1754>[K], Y_1757>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1754>[K]>;
                                        };
                                        asObject(): Record<K, Y_1754>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K]>[];
                                        map: <Y_1758>(projector: Projector<Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K], Y_1758>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1758>[];
                                            map: <Y_1759>(projector: Projector<Y_1758, Y_1759>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1758>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1760>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K]>[K], Y_1760>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1729>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1729>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1729>[K]>;
                            };
                            asObject(): Record<K, Y_1729>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[];
                            map: <Y_1761>(projector: Projector<Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K], Y_1761>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1761>[];
                                map: <Y_1762>(projector: Projector<Y_1761, Y_1762>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1762>[];
                                    map: <Y_1763>(projector: Projector<Y_1762, Y_1763>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1763>[];
                                        map: <Y_1764>(projector: Projector<Y_1763, Y_1764>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1764>[];
                                            map: <Y_1765>(projector: Projector<Y_1764, Y_1765>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1764>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1763>[K]>[];
                                            map: <Y_1766>(projector: Projector<Record<K, Y_1763>[K], Y_1766>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1763>[K]>;
                                        };
                                        asObject(): Record<K, Y_1763>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1762>[K]>[];
                                        map: <Y_1767>(projector: Projector<Record<K, Y_1762>[K], Y_1767>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1767>[];
                                            map: <Y_1768>(projector: Projector<Y_1767, Y_1768>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1767>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1762>[K]>[K]>[];
                                            map: <Y_1769>(projector: Projector<Record<K, Record<K, Y_1762>[K]>[K], Y_1769>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1762>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1762>[K]>;
                                    };
                                    asObject(): Record<K, Y_1762>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1761>[K]>[];
                                    map: <Y_1770>(projector: Projector<Record<K, Y_1761>[K], Y_1770>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1770>[];
                                        map: <Y_1771>(projector: Projector<Y_1770, Y_1771>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1771>[];
                                            map: <Y_1772>(projector: Projector<Y_1771, Y_1772>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1771>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1770>[K]>[];
                                            map: <Y_1773>(projector: Projector<Record<K, Y_1770>[K], Y_1773>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1770>[K]>;
                                        };
                                        asObject(): Record<K, Y_1770>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1761>[K]>[K]>[];
                                        map: <Y_1774>(projector: Projector<Record<K, Record<K, Y_1761>[K]>[K], Y_1774>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1774>[];
                                            map: <Y_1775>(projector: Projector<Y_1774, Y_1775>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1774>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1761>[K]>[K]>[K]>[];
                                            map: <Y_1776>(projector: Projector<Record<K, Record<K, Record<K, Y_1761>[K]>[K]>[K], Y_1776>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1761>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1761>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1761>[K]>;
                                };
                                asObject(): Record<K, Y_1761>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[];
                                map: <Y_1777>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K], Y_1777>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1777>[];
                                    map: <Y_1778>(projector: Projector<Y_1777, Y_1778>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1778>[];
                                        map: <Y_1779>(projector: Projector<Y_1778, Y_1779>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1779>[];
                                            map: <Y_1780>(projector: Projector<Y_1779, Y_1780>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1779>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1778>[K]>[];
                                            map: <Y_1781>(projector: Projector<Record<K, Y_1778>[K], Y_1781>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1778>[K]>;
                                        };
                                        asObject(): Record<K, Y_1778>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1777>[K]>[];
                                        map: <Y_1782>(projector: Projector<Record<K, Y_1777>[K], Y_1782>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1782>[];
                                            map: <Y_1783>(projector: Projector<Y_1782, Y_1783>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1782>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1777>[K]>[K]>[];
                                            map: <Y_1784>(projector: Projector<Record<K, Record<K, Y_1777>[K]>[K], Y_1784>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1777>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1777>[K]>;
                                    };
                                    asObject(): Record<K, Y_1777>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1785>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K], Y_1785>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1785>[];
                                        map: <Y_1786>(projector: Projector<Y_1785, Y_1786>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1786>[];
                                            map: <Y_1787>(projector: Projector<Y_1786, Y_1787>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1786>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1785>[K]>[];
                                            map: <Y_1788>(projector: Projector<Record<K, Y_1785>[K], Y_1788>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1785>[K]>;
                                        };
                                        asObject(): Record<K, Y_1785>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1789>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K], Y_1789>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1789>[];
                                            map: <Y_1790>(projector: Projector<Y_1789, Y_1790>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1789>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1791>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_1791>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1536>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Y_1536>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Y_1536>[K]>;
                };
                asObject(): Record<K, Y_1536>;
            };
            pick(...keys: K[]): {
                keys: () => string[];
                values: () => unknown[];
                entries: () => Tuple<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[];
                map: <Y_1792>(projector: Projector<Record<K, Record<K, Record<K, V>[K]>[K]>[K], Y_1792>) => {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Y_1792>[];
                    map: <Y_1793>(projector: Projector<Y_1792, Y_1793>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1793>[];
                        map: <Y_1794>(projector: Projector<Y_1793, Y_1794>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1794>[];
                            map: <Y_1795>(projector: Projector<Y_1794, Y_1795>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1795>[];
                                map: <Y_1796>(projector: Projector<Y_1795, Y_1796>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1796>[];
                                    map: <Y_1797>(projector: Projector<Y_1796, Y_1797>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1797>[];
                                        map: <Y_1798>(projector: Projector<Y_1797, Y_1798>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1798>[];
                                            map: <Y_1799>(projector: Projector<Y_1798, Y_1799>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1798>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1797>[K]>[];
                                            map: <Y_1800>(projector: Projector<Record<K, Y_1797>[K], Y_1800>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1797>[K]>;
                                        };
                                        asObject(): Record<K, Y_1797>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1796>[K]>[];
                                        map: <Y_1801>(projector: Projector<Record<K, Y_1796>[K], Y_1801>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1801>[];
                                            map: <Y_1802>(projector: Projector<Y_1801, Y_1802>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1801>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1796>[K]>[K]>[];
                                            map: <Y_1803>(projector: Projector<Record<K, Record<K, Y_1796>[K]>[K], Y_1803>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1796>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1796>[K]>;
                                    };
                                    asObject(): Record<K, Y_1796>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1795>[K]>[];
                                    map: <Y_1804>(projector: Projector<Record<K, Y_1795>[K], Y_1804>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1804>[];
                                        map: <Y_1805>(projector: Projector<Y_1804, Y_1805>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1805>[];
                                            map: <Y_1806>(projector: Projector<Y_1805, Y_1806>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1805>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1804>[K]>[];
                                            map: <Y_1807>(projector: Projector<Record<K, Y_1804>[K], Y_1807>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1804>[K]>;
                                        };
                                        asObject(): Record<K, Y_1804>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1795>[K]>[K]>[];
                                        map: <Y_1808>(projector: Projector<Record<K, Record<K, Y_1795>[K]>[K], Y_1808>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1808>[];
                                            map: <Y_1809>(projector: Projector<Y_1808, Y_1809>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1808>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1795>[K]>[K]>[K]>[];
                                            map: <Y_1810>(projector: Projector<Record<K, Record<K, Record<K, Y_1795>[K]>[K]>[K], Y_1810>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1795>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1795>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1795>[K]>;
                                };
                                asObject(): Record<K, Y_1795>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1794>[K]>[];
                                map: <Y_1811>(projector: Projector<Record<K, Y_1794>[K], Y_1811>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1811>[];
                                    map: <Y_1812>(projector: Projector<Y_1811, Y_1812>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1812>[];
                                        map: <Y_1813>(projector: Projector<Y_1812, Y_1813>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1813>[];
                                            map: <Y_1814>(projector: Projector<Y_1813, Y_1814>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1813>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1812>[K]>[];
                                            map: <Y_1815>(projector: Projector<Record<K, Y_1812>[K], Y_1815>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1812>[K]>;
                                        };
                                        asObject(): Record<K, Y_1812>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1811>[K]>[];
                                        map: <Y_1816>(projector: Projector<Record<K, Y_1811>[K], Y_1816>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1816>[];
                                            map: <Y_1817>(projector: Projector<Y_1816, Y_1817>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1816>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1811>[K]>[K]>[];
                                            map: <Y_1818>(projector: Projector<Record<K, Record<K, Y_1811>[K]>[K], Y_1818>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1811>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1811>[K]>;
                                    };
                                    asObject(): Record<K, Y_1811>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1794>[K]>[K]>[];
                                    map: <Y_1819>(projector: Projector<Record<K, Record<K, Y_1794>[K]>[K], Y_1819>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1819>[];
                                        map: <Y_1820>(projector: Projector<Y_1819, Y_1820>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1820>[];
                                            map: <Y_1821>(projector: Projector<Y_1820, Y_1821>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1820>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1819>[K]>[];
                                            map: <Y_1822>(projector: Projector<Record<K, Y_1819>[K], Y_1822>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1819>[K]>;
                                        };
                                        asObject(): Record<K, Y_1819>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K]>[];
                                        map: <Y_1823>(projector: Projector<Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K], Y_1823>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1823>[];
                                            map: <Y_1824>(projector: Projector<Y_1823, Y_1824>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1823>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1825>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K]>[K], Y_1825>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1794>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1794>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1794>[K]>;
                            };
                            asObject(): Record<K, Y_1794>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1793>[K]>[];
                            map: <Y_1826>(projector: Projector<Record<K, Y_1793>[K], Y_1826>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1826>[];
                                map: <Y_1827>(projector: Projector<Y_1826, Y_1827>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1827>[];
                                    map: <Y_1828>(projector: Projector<Y_1827, Y_1828>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1828>[];
                                        map: <Y_1829>(projector: Projector<Y_1828, Y_1829>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1829>[];
                                            map: <Y_1830>(projector: Projector<Y_1829, Y_1830>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1829>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1828>[K]>[];
                                            map: <Y_1831>(projector: Projector<Record<K, Y_1828>[K], Y_1831>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1828>[K]>;
                                        };
                                        asObject(): Record<K, Y_1828>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1827>[K]>[];
                                        map: <Y_1832>(projector: Projector<Record<K, Y_1827>[K], Y_1832>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1832>[];
                                            map: <Y_1833>(projector: Projector<Y_1832, Y_1833>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1832>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1827>[K]>[K]>[];
                                            map: <Y_1834>(projector: Projector<Record<K, Record<K, Y_1827>[K]>[K], Y_1834>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1827>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1827>[K]>;
                                    };
                                    asObject(): Record<K, Y_1827>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1826>[K]>[];
                                    map: <Y_1835>(projector: Projector<Record<K, Y_1826>[K], Y_1835>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1835>[];
                                        map: <Y_1836>(projector: Projector<Y_1835, Y_1836>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1836>[];
                                            map: <Y_1837>(projector: Projector<Y_1836, Y_1837>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1836>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1835>[K]>[];
                                            map: <Y_1838>(projector: Projector<Record<K, Y_1835>[K], Y_1838>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1835>[K]>;
                                        };
                                        asObject(): Record<K, Y_1835>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1826>[K]>[K]>[];
                                        map: <Y_1839>(projector: Projector<Record<K, Record<K, Y_1826>[K]>[K], Y_1839>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1839>[];
                                            map: <Y_1840>(projector: Projector<Y_1839, Y_1840>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1839>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1826>[K]>[K]>[K]>[];
                                            map: <Y_1841>(projector: Projector<Record<K, Record<K, Record<K, Y_1826>[K]>[K]>[K], Y_1841>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1826>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1826>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1826>[K]>;
                                };
                                asObject(): Record<K, Y_1826>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1793>[K]>[K]>[];
                                map: <Y_1842>(projector: Projector<Record<K, Record<K, Y_1793>[K]>[K], Y_1842>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1842>[];
                                    map: <Y_1843>(projector: Projector<Y_1842, Y_1843>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1843>[];
                                        map: <Y_1844>(projector: Projector<Y_1843, Y_1844>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1844>[];
                                            map: <Y_1845>(projector: Projector<Y_1844, Y_1845>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1844>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1843>[K]>[];
                                            map: <Y_1846>(projector: Projector<Record<K, Y_1843>[K], Y_1846>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1843>[K]>;
                                        };
                                        asObject(): Record<K, Y_1843>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1842>[K]>[];
                                        map: <Y_1847>(projector: Projector<Record<K, Y_1842>[K], Y_1847>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1847>[];
                                            map: <Y_1848>(projector: Projector<Y_1847, Y_1848>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1847>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1842>[K]>[K]>[];
                                            map: <Y_1849>(projector: Projector<Record<K, Record<K, Y_1842>[K]>[K], Y_1849>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1842>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1842>[K]>;
                                    };
                                    asObject(): Record<K, Y_1842>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[];
                                    map: <Y_1850>(projector: Projector<Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K], Y_1850>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1850>[];
                                        map: <Y_1851>(projector: Projector<Y_1850, Y_1851>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1851>[];
                                            map: <Y_1852>(projector: Projector<Y_1851, Y_1852>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1851>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1850>[K]>[];
                                            map: <Y_1853>(projector: Projector<Record<K, Y_1850>[K], Y_1853>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1850>[K]>;
                                        };
                                        asObject(): Record<K, Y_1850>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1854>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K], Y_1854>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1854>[];
                                            map: <Y_1855>(projector: Projector<Y_1854, Y_1855>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1854>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1856>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K]>[K], Y_1856>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1793>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1793>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1793>[K]>;
                        };
                        asObject(): Record<K, Y_1793>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Y_1792>[K]>[];
                        map: <Y_1857>(projector: Projector<Record<K, Y_1792>[K], Y_1857>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1857>[];
                            map: <Y_1858>(projector: Projector<Y_1857, Y_1858>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1858>[];
                                map: <Y_1859>(projector: Projector<Y_1858, Y_1859>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1859>[];
                                    map: <Y_1860>(projector: Projector<Y_1859, Y_1860>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1860>[];
                                        map: <Y_1861>(projector: Projector<Y_1860, Y_1861>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1861>[];
                                            map: <Y_1862>(projector: Projector<Y_1861, Y_1862>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1861>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1860>[K]>[];
                                            map: <Y_1863>(projector: Projector<Record<K, Y_1860>[K], Y_1863>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1860>[K]>;
                                        };
                                        asObject(): Record<K, Y_1860>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1859>[K]>[];
                                        map: <Y_1864>(projector: Projector<Record<K, Y_1859>[K], Y_1864>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1864>[];
                                            map: <Y_1865>(projector: Projector<Y_1864, Y_1865>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1864>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1859>[K]>[K]>[];
                                            map: <Y_1866>(projector: Projector<Record<K, Record<K, Y_1859>[K]>[K], Y_1866>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1859>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1859>[K]>;
                                    };
                                    asObject(): Record<K, Y_1859>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1858>[K]>[];
                                    map: <Y_1867>(projector: Projector<Record<K, Y_1858>[K], Y_1867>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1867>[];
                                        map: <Y_1868>(projector: Projector<Y_1867, Y_1868>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1868>[];
                                            map: <Y_1869>(projector: Projector<Y_1868, Y_1869>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1868>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1867>[K]>[];
                                            map: <Y_1870>(projector: Projector<Record<K, Y_1867>[K], Y_1870>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1867>[K]>;
                                        };
                                        asObject(): Record<K, Y_1867>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1858>[K]>[K]>[];
                                        map: <Y_1871>(projector: Projector<Record<K, Record<K, Y_1858>[K]>[K], Y_1871>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1871>[];
                                            map: <Y_1872>(projector: Projector<Y_1871, Y_1872>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1871>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1858>[K]>[K]>[K]>[];
                                            map: <Y_1873>(projector: Projector<Record<K, Record<K, Record<K, Y_1858>[K]>[K]>[K], Y_1873>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1858>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1858>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1858>[K]>;
                                };
                                asObject(): Record<K, Y_1858>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1857>[K]>[];
                                map: <Y_1874>(projector: Projector<Record<K, Y_1857>[K], Y_1874>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1874>[];
                                    map: <Y_1875>(projector: Projector<Y_1874, Y_1875>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1875>[];
                                        map: <Y_1876>(projector: Projector<Y_1875, Y_1876>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1876>[];
                                            map: <Y_1877>(projector: Projector<Y_1876, Y_1877>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1876>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1875>[K]>[];
                                            map: <Y_1878>(projector: Projector<Record<K, Y_1875>[K], Y_1878>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1875>[K]>;
                                        };
                                        asObject(): Record<K, Y_1875>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1874>[K]>[];
                                        map: <Y_1879>(projector: Projector<Record<K, Y_1874>[K], Y_1879>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1879>[];
                                            map: <Y_1880>(projector: Projector<Y_1879, Y_1880>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1879>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1874>[K]>[K]>[];
                                            map: <Y_1881>(projector: Projector<Record<K, Record<K, Y_1874>[K]>[K], Y_1881>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1874>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1874>[K]>;
                                    };
                                    asObject(): Record<K, Y_1874>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1857>[K]>[K]>[];
                                    map: <Y_1882>(projector: Projector<Record<K, Record<K, Y_1857>[K]>[K], Y_1882>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1882>[];
                                        map: <Y_1883>(projector: Projector<Y_1882, Y_1883>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1883>[];
                                            map: <Y_1884>(projector: Projector<Y_1883, Y_1884>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1883>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1882>[K]>[];
                                            map: <Y_1885>(projector: Projector<Record<K, Y_1882>[K], Y_1885>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1882>[K]>;
                                        };
                                        asObject(): Record<K, Y_1882>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K]>[];
                                        map: <Y_1886>(projector: Projector<Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K], Y_1886>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1886>[];
                                            map: <Y_1887>(projector: Projector<Y_1886, Y_1887>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1886>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1888>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K]>[K], Y_1888>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1857>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1857>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1857>[K]>;
                            };
                            asObject(): Record<K, Y_1857>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Y_1792>[K]>[K]>[];
                            map: <Y_1889>(projector: Projector<Record<K, Record<K, Y_1792>[K]>[K], Y_1889>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1889>[];
                                map: <Y_1890>(projector: Projector<Y_1889, Y_1890>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1890>[];
                                    map: <Y_1891>(projector: Projector<Y_1890, Y_1891>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1891>[];
                                        map: <Y_1892>(projector: Projector<Y_1891, Y_1892>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1892>[];
                                            map: <Y_1893>(projector: Projector<Y_1892, Y_1893>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1892>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1891>[K]>[];
                                            map: <Y_1894>(projector: Projector<Record<K, Y_1891>[K], Y_1894>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1891>[K]>;
                                        };
                                        asObject(): Record<K, Y_1891>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1890>[K]>[];
                                        map: <Y_1895>(projector: Projector<Record<K, Y_1890>[K], Y_1895>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1895>[];
                                            map: <Y_1896>(projector: Projector<Y_1895, Y_1896>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1895>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1890>[K]>[K]>[];
                                            map: <Y_1897>(projector: Projector<Record<K, Record<K, Y_1890>[K]>[K], Y_1897>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1890>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1890>[K]>;
                                    };
                                    asObject(): Record<K, Y_1890>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1889>[K]>[];
                                    map: <Y_1898>(projector: Projector<Record<K, Y_1889>[K], Y_1898>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1898>[];
                                        map: <Y_1899>(projector: Projector<Y_1898, Y_1899>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1899>[];
                                            map: <Y_1900>(projector: Projector<Y_1899, Y_1900>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1899>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1898>[K]>[];
                                            map: <Y_1901>(projector: Projector<Record<K, Y_1898>[K], Y_1901>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1898>[K]>;
                                        };
                                        asObject(): Record<K, Y_1898>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1889>[K]>[K]>[];
                                        map: <Y_1902>(projector: Projector<Record<K, Record<K, Y_1889>[K]>[K], Y_1902>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1902>[];
                                            map: <Y_1903>(projector: Projector<Y_1902, Y_1903>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1902>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1889>[K]>[K]>[K]>[];
                                            map: <Y_1904>(projector: Projector<Record<K, Record<K, Record<K, Y_1889>[K]>[K]>[K], Y_1904>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1889>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1889>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1889>[K]>;
                                };
                                asObject(): Record<K, Y_1889>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[];
                                map: <Y_1905>(projector: Projector<Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K], Y_1905>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1905>[];
                                    map: <Y_1906>(projector: Projector<Y_1905, Y_1906>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1906>[];
                                        map: <Y_1907>(projector: Projector<Y_1906, Y_1907>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1907>[];
                                            map: <Y_1908>(projector: Projector<Y_1907, Y_1908>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1907>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1906>[K]>[];
                                            map: <Y_1909>(projector: Projector<Record<K, Y_1906>[K], Y_1909>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1906>[K]>;
                                        };
                                        asObject(): Record<K, Y_1906>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1905>[K]>[];
                                        map: <Y_1910>(projector: Projector<Record<K, Y_1905>[K], Y_1910>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1910>[];
                                            map: <Y_1911>(projector: Projector<Y_1910, Y_1911>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1910>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1905>[K]>[K]>[];
                                            map: <Y_1912>(projector: Projector<Record<K, Record<K, Y_1905>[K]>[K], Y_1912>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1905>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1905>[K]>;
                                    };
                                    asObject(): Record<K, Y_1905>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[];
                                    map: <Y_1913>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K], Y_1913>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1913>[];
                                        map: <Y_1914>(projector: Projector<Y_1913, Y_1914>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1914>[];
                                            map: <Y_1915>(projector: Projector<Y_1914, Y_1915>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1914>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1913>[K]>[];
                                            map: <Y_1916>(projector: Projector<Record<K, Y_1913>[K], Y_1916>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1913>[K]>;
                                        };
                                        asObject(): Record<K, Y_1913>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1917>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K], Y_1917>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1917>[];
                                            map: <Y_1918>(projector: Projector<Y_1917, Y_1918>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1917>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1919>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K]>[K], Y_1919>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Y_1792>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Y_1792>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Y_1792>[K]>;
                    };
                    asObject(): Record<K, Y_1792>;
                };
                pick(...keys: K[]): {
                    keys: () => string[];
                    values: () => unknown[];
                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[];
                    map: <Y_1920>(projector: Projector<Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K], Y_1920>) => {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Y_1920>[];
                        map: <Y_1921>(projector: Projector<Y_1920, Y_1921>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1921>[];
                            map: <Y_1922>(projector: Projector<Y_1921, Y_1922>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1922>[];
                                map: <Y_1923>(projector: Projector<Y_1922, Y_1923>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1923>[];
                                    map: <Y_1924>(projector: Projector<Y_1923, Y_1924>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1924>[];
                                        map: <Y_1925>(projector: Projector<Y_1924, Y_1925>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1925>[];
                                            map: <Y_1926>(projector: Projector<Y_1925, Y_1926>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1925>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1924>[K]>[];
                                            map: <Y_1927>(projector: Projector<Record<K, Y_1924>[K], Y_1927>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1924>[K]>;
                                        };
                                        asObject(): Record<K, Y_1924>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1923>[K]>[];
                                        map: <Y_1928>(projector: Projector<Record<K, Y_1923>[K], Y_1928>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1928>[];
                                            map: <Y_1929>(projector: Projector<Y_1928, Y_1929>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1928>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1923>[K]>[K]>[];
                                            map: <Y_1930>(projector: Projector<Record<K, Record<K, Y_1923>[K]>[K], Y_1930>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1923>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1923>[K]>;
                                    };
                                    asObject(): Record<K, Y_1923>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1922>[K]>[];
                                    map: <Y_1931>(projector: Projector<Record<K, Y_1922>[K], Y_1931>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1931>[];
                                        map: <Y_1932>(projector: Projector<Y_1931, Y_1932>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1932>[];
                                            map: <Y_1933>(projector: Projector<Y_1932, Y_1933>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1932>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1931>[K]>[];
                                            map: <Y_1934>(projector: Projector<Record<K, Y_1931>[K], Y_1934>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1931>[K]>;
                                        };
                                        asObject(): Record<K, Y_1931>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1922>[K]>[K]>[];
                                        map: <Y_1935>(projector: Projector<Record<K, Record<K, Y_1922>[K]>[K], Y_1935>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1935>[];
                                            map: <Y_1936>(projector: Projector<Y_1935, Y_1936>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1935>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1922>[K]>[K]>[K]>[];
                                            map: <Y_1937>(projector: Projector<Record<K, Record<K, Record<K, Y_1922>[K]>[K]>[K], Y_1937>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1922>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1922>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1922>[K]>;
                                };
                                asObject(): Record<K, Y_1922>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1921>[K]>[];
                                map: <Y_1938>(projector: Projector<Record<K, Y_1921>[K], Y_1938>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1938>[];
                                    map: <Y_1939>(projector: Projector<Y_1938, Y_1939>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1939>[];
                                        map: <Y_1940>(projector: Projector<Y_1939, Y_1940>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1940>[];
                                            map: <Y_1941>(projector: Projector<Y_1940, Y_1941>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1940>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1939>[K]>[];
                                            map: <Y_1942>(projector: Projector<Record<K, Y_1939>[K], Y_1942>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1939>[K]>;
                                        };
                                        asObject(): Record<K, Y_1939>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1938>[K]>[];
                                        map: <Y_1943>(projector: Projector<Record<K, Y_1938>[K], Y_1943>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1943>[];
                                            map: <Y_1944>(projector: Projector<Y_1943, Y_1944>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1943>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1938>[K]>[K]>[];
                                            map: <Y_1945>(projector: Projector<Record<K, Record<K, Y_1938>[K]>[K], Y_1945>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1938>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1938>[K]>;
                                    };
                                    asObject(): Record<K, Y_1938>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1921>[K]>[K]>[];
                                    map: <Y_1946>(projector: Projector<Record<K, Record<K, Y_1921>[K]>[K], Y_1946>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1946>[];
                                        map: <Y_1947>(projector: Projector<Y_1946, Y_1947>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1947>[];
                                            map: <Y_1948>(projector: Projector<Y_1947, Y_1948>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1947>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1946>[K]>[];
                                            map: <Y_1949>(projector: Projector<Record<K, Y_1946>[K], Y_1949>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1946>[K]>;
                                        };
                                        asObject(): Record<K, Y_1946>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K]>[];
                                        map: <Y_1950>(projector: Projector<Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K], Y_1950>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1950>[];
                                            map: <Y_1951>(projector: Projector<Y_1950, Y_1951>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1950>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1952>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K]>[K], Y_1952>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1921>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1921>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1921>[K]>;
                            };
                            asObject(): Record<K, Y_1921>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Y_1920>[K]>[];
                            map: <Y_1953>(projector: Projector<Record<K, Y_1920>[K], Y_1953>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1953>[];
                                map: <Y_1954>(projector: Projector<Y_1953, Y_1954>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1954>[];
                                    map: <Y_1955>(projector: Projector<Y_1954, Y_1955>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1955>[];
                                        map: <Y_1956>(projector: Projector<Y_1955, Y_1956>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1956>[];
                                            map: <Y_1957>(projector: Projector<Y_1956, Y_1957>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1956>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1955>[K]>[];
                                            map: <Y_1958>(projector: Projector<Record<K, Y_1955>[K], Y_1958>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1955>[K]>;
                                        };
                                        asObject(): Record<K, Y_1955>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1954>[K]>[];
                                        map: <Y_1959>(projector: Projector<Record<K, Y_1954>[K], Y_1959>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1959>[];
                                            map: <Y_1960>(projector: Projector<Y_1959, Y_1960>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1959>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1954>[K]>[K]>[];
                                            map: <Y_1961>(projector: Projector<Record<K, Record<K, Y_1954>[K]>[K], Y_1961>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1954>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1954>[K]>;
                                    };
                                    asObject(): Record<K, Y_1954>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1953>[K]>[];
                                    map: <Y_1962>(projector: Projector<Record<K, Y_1953>[K], Y_1962>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1962>[];
                                        map: <Y_1963>(projector: Projector<Y_1962, Y_1963>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1963>[];
                                            map: <Y_1964>(projector: Projector<Y_1963, Y_1964>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1963>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1962>[K]>[];
                                            map: <Y_1965>(projector: Projector<Record<K, Y_1962>[K], Y_1965>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1962>[K]>;
                                        };
                                        asObject(): Record<K, Y_1962>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1953>[K]>[K]>[];
                                        map: <Y_1966>(projector: Projector<Record<K, Record<K, Y_1953>[K]>[K], Y_1966>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1966>[];
                                            map: <Y_1967>(projector: Projector<Y_1966, Y_1967>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1966>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1953>[K]>[K]>[K]>[];
                                            map: <Y_1968>(projector: Projector<Record<K, Record<K, Record<K, Y_1953>[K]>[K]>[K], Y_1968>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1953>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1953>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1953>[K]>;
                                };
                                asObject(): Record<K, Y_1953>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Y_1920>[K]>[K]>[];
                                map: <Y_1969>(projector: Projector<Record<K, Record<K, Y_1920>[K]>[K], Y_1969>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1969>[];
                                    map: <Y_1970>(projector: Projector<Y_1969, Y_1970>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1970>[];
                                        map: <Y_1971>(projector: Projector<Y_1970, Y_1971>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1971>[];
                                            map: <Y_1972>(projector: Projector<Y_1971, Y_1972>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1971>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1970>[K]>[];
                                            map: <Y_1973>(projector: Projector<Record<K, Y_1970>[K], Y_1973>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1970>[K]>;
                                        };
                                        asObject(): Record<K, Y_1970>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1969>[K]>[];
                                        map: <Y_1974>(projector: Projector<Record<K, Y_1969>[K], Y_1974>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1974>[];
                                            map: <Y_1975>(projector: Projector<Y_1974, Y_1975>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1974>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1969>[K]>[K]>[];
                                            map: <Y_1976>(projector: Projector<Record<K, Record<K, Y_1969>[K]>[K], Y_1976>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1969>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1969>[K]>;
                                    };
                                    asObject(): Record<K, Y_1969>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[];
                                    map: <Y_1977>(projector: Projector<Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K], Y_1977>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1977>[];
                                        map: <Y_1978>(projector: Projector<Y_1977, Y_1978>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1978>[];
                                            map: <Y_1979>(projector: Projector<Y_1978, Y_1979>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1978>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1977>[K]>[];
                                            map: <Y_1980>(projector: Projector<Record<K, Y_1977>[K], Y_1980>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1977>[K]>;
                                        };
                                        asObject(): Record<K, Y_1977>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K]>[];
                                        map: <Y_1981>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K], Y_1981>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1981>[];
                                            map: <Y_1982>(projector: Projector<Y_1981, Y_1982>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1981>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_1983>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K]>[K], Y_1983>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Y_1920>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Y_1920>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Y_1920>[K]>;
                        };
                        asObject(): Record<K, Y_1920>;
                    };
                    pick(...keys: K[]): {
                        keys: () => string[];
                        values: () => unknown[];
                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[];
                        map: <Y_1984>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K], Y_1984>) => {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Y_1984>[];
                            map: <Y_1985>(projector: Projector<Y_1984, Y_1985>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_1985>[];
                                map: <Y_1986>(projector: Projector<Y_1985, Y_1986>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_1986>[];
                                    map: <Y_1987>(projector: Projector<Y_1986, Y_1987>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1987>[];
                                        map: <Y_1988>(projector: Projector<Y_1987, Y_1988>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1988>[];
                                            map: <Y_1989>(projector: Projector<Y_1988, Y_1989>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1988>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1987>[K]>[];
                                            map: <Y_1990>(projector: Projector<Record<K, Y_1987>[K], Y_1990>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1987>[K]>;
                                        };
                                        asObject(): Record<K, Y_1987>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_1986>[K]>[];
                                        map: <Y_1991>(projector: Projector<Record<K, Y_1986>[K], Y_1991>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1991>[];
                                            map: <Y_1992>(projector: Projector<Y_1991, Y_1992>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1991>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_1986>[K]>[K]>[];
                                            map: <Y_1993>(projector: Projector<Record<K, Record<K, Y_1986>[K]>[K], Y_1993>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_1986>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_1986>[K]>;
                                    };
                                    asObject(): Record<K, Y_1986>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_1985>[K]>[];
                                    map: <Y_1994>(projector: Projector<Record<K, Y_1985>[K], Y_1994>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_1994>[];
                                        map: <Y_1995>(projector: Projector<Y_1994, Y_1995>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1995>[];
                                            map: <Y_1996>(projector: Projector<Y_1995, Y_1996>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1995>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_1994>[K]>[];
                                            map: <Y_1997>(projector: Projector<Record<K, Y_1994>[K], Y_1997>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_1994>[K]>;
                                        };
                                        asObject(): Record<K, Y_1994>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_1985>[K]>[K]>[];
                                        map: <Y_1998>(projector: Projector<Record<K, Record<K, Y_1985>[K]>[K], Y_1998>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_1998>[];
                                            map: <Y_1999>(projector: Projector<Y_1998, Y_1999>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_1998>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1985>[K]>[K]>[K]>[];
                                            map: <Y_2000>(projector: Projector<Record<K, Record<K, Record<K, Y_1985>[K]>[K]>[K], Y_2000>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_1985>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_1985>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_1985>[K]>;
                                };
                                asObject(): Record<K, Y_1985>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Y_1984>[K]>[];
                                map: <Y_2001>(projector: Projector<Record<K, Y_1984>[K], Y_2001>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_2001>[];
                                    map: <Y_2002>(projector: Projector<Y_2001, Y_2002>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2002>[];
                                        map: <Y_2003>(projector: Projector<Y_2002, Y_2003>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2003>[];
                                            map: <Y_2004>(projector: Projector<Y_2003, Y_2004>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2003>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2002>[K]>[];
                                            map: <Y_2005>(projector: Projector<Record<K, Y_2002>[K], Y_2005>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2002>[K]>;
                                        };
                                        asObject(): Record<K, Y_2002>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_2001>[K]>[];
                                        map: <Y_2006>(projector: Projector<Record<K, Y_2001>[K], Y_2006>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2006>[];
                                            map: <Y_2007>(projector: Projector<Y_2006, Y_2007>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2006>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_2001>[K]>[K]>[];
                                            map: <Y_2008>(projector: Projector<Record<K, Record<K, Y_2001>[K]>[K], Y_2008>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_2001>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_2001>[K]>;
                                    };
                                    asObject(): Record<K, Y_2001>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Y_1984>[K]>[K]>[];
                                    map: <Y_2009>(projector: Projector<Record<K, Record<K, Y_1984>[K]>[K], Y_2009>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2009>[];
                                        map: <Y_2010>(projector: Projector<Y_2009, Y_2010>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2010>[];
                                            map: <Y_2011>(projector: Projector<Y_2010, Y_2011>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2010>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2009>[K]>[];
                                            map: <Y_2012>(projector: Projector<Record<K, Y_2009>[K], Y_2012>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2009>[K]>;
                                        };
                                        asObject(): Record<K, Y_2009>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K]>[];
                                        map: <Y_2013>(projector: Projector<Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K], Y_2013>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2013>[];
                                            map: <Y_2014>(projector: Projector<Y_2013, Y_2014>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2013>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K]>[K]>[];
                                            map: <Y_2015>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K]>[K], Y_2015>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Y_1984>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Y_1984>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Y_1984>[K]>;
                            };
                            asObject(): Record<K, Y_1984>;
                        };
                        pick(...keys: K[]): {
                            keys: () => string[];
                            values: () => unknown[];
                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[];
                            map: <Y_2016>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K], Y_2016>) => {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Y_2016>[];
                                map: <Y_2017>(projector: Projector<Y_2016, Y_2017>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_2017>[];
                                    map: <Y_2018>(projector: Projector<Y_2017, Y_2018>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2018>[];
                                        map: <Y_2019>(projector: Projector<Y_2018, Y_2019>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2019>[];
                                            map: <Y_2020>(projector: Projector<Y_2019, Y_2020>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2019>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2018>[K]>[];
                                            map: <Y_2021>(projector: Projector<Record<K, Y_2018>[K], Y_2021>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2018>[K]>;
                                        };
                                        asObject(): Record<K, Y_2018>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_2017>[K]>[];
                                        map: <Y_2022>(projector: Projector<Record<K, Y_2017>[K], Y_2022>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2022>[];
                                            map: <Y_2023>(projector: Projector<Y_2022, Y_2023>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2022>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_2017>[K]>[K]>[];
                                            map: <Y_2024>(projector: Projector<Record<K, Record<K, Y_2017>[K]>[K], Y_2024>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_2017>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_2017>[K]>;
                                    };
                                    asObject(): Record<K, Y_2017>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Y_2016>[K]>[];
                                    map: <Y_2025>(projector: Projector<Record<K, Y_2016>[K], Y_2025>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2025>[];
                                        map: <Y_2026>(projector: Projector<Y_2025, Y_2026>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2026>[];
                                            map: <Y_2027>(projector: Projector<Y_2026, Y_2027>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2026>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2025>[K]>[];
                                            map: <Y_2028>(projector: Projector<Record<K, Y_2025>[K], Y_2028>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2025>[K]>;
                                        };
                                        asObject(): Record<K, Y_2025>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Y_2016>[K]>[K]>[];
                                        map: <Y_2029>(projector: Projector<Record<K, Record<K, Y_2016>[K]>[K], Y_2029>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2029>[];
                                            map: <Y_2030>(projector: Projector<Y_2029, Y_2030>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2029>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Y_2016>[K]>[K]>[K]>[];
                                            map: <Y_2031>(projector: Projector<Record<K, Record<K, Record<K, Y_2016>[K]>[K]>[K], Y_2031>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Y_2016>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Y_2016>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Y_2016>[K]>;
                                };
                                asObject(): Record<K, Y_2016>;
                            };
                            pick(...keys: K[]): {
                                keys: () => string[];
                                values: () => unknown[];
                                entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                map: <Y_2032>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_2032>) => {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Y_2032>[];
                                    map: <Y_2033>(projector: Projector<Y_2032, Y_2033>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2033>[];
                                        map: <Y_2034>(projector: Projector<Y_2033, Y_2034>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2034>[];
                                            map: <Y_2035>(projector: Projector<Y_2034, Y_2035>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2034>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2033>[K]>[];
                                            map: <Y_2036>(projector: Projector<Record<K, Y_2033>[K], Y_2036>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2033>[K]>;
                                        };
                                        asObject(): Record<K, Y_2033>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Y_2032>[K]>[];
                                        map: <Y_2037>(projector: Projector<Record<K, Y_2032>[K], Y_2037>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2037>[];
                                            map: <Y_2038>(projector: Projector<Y_2037, Y_2038>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2037>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Y_2032>[K]>[K]>[];
                                            map: <Y_2039>(projector: Projector<Record<K, Record<K, Y_2032>[K]>[K], Y_2039>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Y_2032>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Y_2032>[K]>;
                                    };
                                    asObject(): Record<K, Y_2032>;
                                };
                                pick(...keys: K[]): {
                                    keys: () => string[];
                                    values: () => unknown[];
                                    entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                    map: <Y_2040>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_2040>) => {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Y_2040>[];
                                        map: <Y_2041>(projector: Projector<Y_2040, Y_2041>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2041>[];
                                            map: <Y_2042>(projector: Projector<Y_2041, Y_2042>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2041>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Y_2040>[K]>[];
                                            map: <Y_2043>(projector: Projector<Record<K, Y_2040>[K], Y_2043>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Y_2040>[K]>;
                                        };
                                        asObject(): Record<K, Y_2040>;
                                    };
                                    pick(...keys: K[]): {
                                        keys: () => string[];
                                        values: () => unknown[];
                                        entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                        map: <Y_2044>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_2044>) => {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Y_2044>[];
                                            map: <Y_2045>(projector: Projector<Y_2044, Y_2045>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Y_2044>;
                                        };
                                        pick(...keys: K[]): {
                                            keys: () => string[];
                                            values: () => unknown[];
                                            entries: () => Tuple<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[];
                                            map: <Y_2046>(projector: Projector<Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K], Y_2046>) => any;
                                            pick(...keys: K[]): any;
                                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                        };
                                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                    };
                                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                                };
                                asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>[K]>;
                            };
                            asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>[K]>;
                        };
                        asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>[K]>;
                    };
                    asObject(): Record<K, Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>[K]>;
                };
                asObject(): Record<K, Record<K, Record<K, Record<K, V>[K]>[K]>[K]>;
            };
            asObject(): Record<K, Record<K, Record<K, V>[K]>[K]>;
        };
        asObject(): Record<K, Record<K, V>[K]>;
    };
    asObject(): Record<K, V>;
};
export {};
