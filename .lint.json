[
	{
		"filePath": "/Users/prmph/Code/Open_Source/ci-checks-action/src/index.ts",
		"messages": [
			{
				"ruleId": "fp/no-rest-parameters",
				"severity": 1,
				"message": "Unallowed use of rest parameters. Use regular function arguments instead",
				"line": 10,
				"column": 26,
				"nodeType": "RestElement",
				"endLine": 10,
				"endColumn": 37
			},
			{
				"ruleId": "@typescript-eslint/no-explicit-any",
				"severity": 1,
				"message": "Unexpected any. Specify a different type.",
				"line": 10,
				"column": 32,
				"nodeType": "TSAnyKeyword",
				"messageId": "unexpectedAny",
				"endLine": 10,
				"endColumn": 35,
				"suggestions": [
					{
						"messageId": "suggestUnknown",
						"fix": {
							"range": [
								249,
								252
							],
							"text": "unknown"
						},
						"desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
					},
					{
						"messageId": "suggestNever",
						"fix": {
							"range": [
								249,
								252
							],
							"text": "never"
						},
						"desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
					}
				]
			},
			{
				"ruleId": "@typescript-eslint/no-explicit-any",
				"severity": 1,
				"message": "Unexpected any. Specify a different type.",
				"line": 10,
				"column": 42,
				"nodeType": "TSAnyKeyword",
				"messageId": "unexpectedAny",
				"endLine": 10,
				"endColumn": 45,
				"suggestions": [
					{
						"messageId": "suggestUnknown",
						"fix": {
							"range": [
								259,
								262
							],
							"text": "unknown"
						},
						"desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
					},
					{
						"messageId": "suggestNever",
						"fix": {
							"range": [
								259,
								262
							],
							"text": "never"
						},
						"desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
					}
				]
			},
			{
				"ruleId": "fp/no-rest-parameters",
				"severity": 1,
				"message": "Unallowed use of rest parameters. Use regular function arguments instead",
				"line": 10,
				"column": 60,
				"nodeType": "RestElement",
				"endLine": 10,
				"endColumn": 73
			},
			{
				"ruleId": "@typescript-eslint/no-explicit-any",
				"severity": 1,
				"message": "Unexpected any. Specify a different type.",
				"line": 10,
				"column": 78,
				"nodeType": "TSAnyKeyword",
				"messageId": "unexpectedAny",
				"endLine": 10,
				"endColumn": 81,
				"suggestions": [
					{
						"messageId": "suggestUnknown",
						"fix": {
							"range": [
								295,
								298
							],
							"text": "unknown"
						},
						"desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
					},
					{
						"messageId": "suggestNever",
						"fix": {
							"range": [
								295,
								298
							],
							"text": "never"
						},
						"desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
					}
				]
			},
			{
				"ruleId": "@typescript-eslint/no-explicit-any",
				"severity": 1,
				"message": "Unexpected any. Specify a different type.",
				"line": 92,
				"column": 25,
				"nodeType": "TSAnyKeyword",
				"messageId": "unexpectedAny",
				"endLine": 92,
				"endColumn": 28,
				"suggestions": [
					{
						"messageId": "suggestUnknown",
						"fix": {
							"range": [
								4297,
								4300
							],
							"text": "unknown"
						},
						"desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
					},
					{
						"messageId": "suggestNever",
						"fix": {
							"range": [
								4297,
								4300
							],
							"text": "never"
						},
						"desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
					}
				]
			},
			{
				"ruleId": "fp/no-let",
				"severity": 1,
				"message": "Unallowed use of `let`. Use `const` instead",
				"line": 103,
				"column": 2,
				"nodeType": "VariableDeclaration",
				"endLine": 103,
				"endColumn": 15
			},
			{
				"ruleId": "fp/no-mutation",
				"severity": 1,
				"message": "Unallowed reassignment",
				"line": 106,
				"column": 3,
				"nodeType": "AssignmentExpression",
				"endLine": 106,
				"endColumn": 14
			},
			{
				"ruleId": "@typescript-eslint/no-explicit-any",
				"severity": 1,
				"message": "Unexpected any. Specify a different type.",
				"line": 112,
				"column": 40,
				"nodeType": "TSAnyKeyword",
				"messageId": "unexpectedAny",
				"endLine": 112,
				"endColumn": 43,
				"suggestions": [
					{
						"messageId": "suggestUnknown",
						"fix": {
							"range": [
								4669,
								4672
							],
							"text": "unknown"
						},
						"desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
					},
					{
						"messageId": "suggestNever",
						"fix": {
							"range": [
								4669,
								4672
							],
							"text": "never"
						},
						"desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
					}
				]
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'runAction' is defined but never used.",
				"line": 119,
				"column": 16,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 119,
				"endColumn": 25
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'GITHUB_EVENT_PATH' is assigned a value but never used.",
				"line": 120,
				"column": 59,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 120,
				"endColumn": 76
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'SOURCE_ROOT' is assigned a value but never used.",
				"line": 120,
				"column": 78,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 120,
				"endColumn": 89
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'repoOwner' is assigned a value but never used.",
				"line": 121,
				"column": 9,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 121,
				"endColumn": 18
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'repoName' is assigned a value but never used.",
				"line": 121,
				"column": 20,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 121,
				"endColumn": 28
			},
			{
				"ruleId": "@typescript-eslint/no-non-null-assertion",
				"severity": 1,
				"message": "Forbidden non-null assertion.",
				"line": 121,
				"column": 32,
				"nodeType": "TSNonNullExpression",
				"messageId": "noNonNull",
				"endLine": 121,
				"endColumn": 50,
				"suggestions": [
					{
						"messageId": "suggestOptionalChain",
						"fix": {
							"range": [
								5003,
								5004
							],
							"text": "?"
						},
						"desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
					}
				]
			},
			{
				"ruleId": "semi",
				"severity": 2,
				"message": "Extra semicolon.",
				"line": 123,
				"column": 57,
				"nodeType": "VariableDeclaration",
				"messageId": "extraSemi",
				"endLine": 123,
				"endColumn": 58,
				"fix": {
					"range": [
						5107,
						5127
					],
					"text": "pull_request\n\tconst"
				}
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'context' is assigned a value but never used.",
				"line": 125,
				"column": 10,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 125,
				"endColumn": 17
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'autoFix' is assigned a value but never used.",
				"line": 127,
				"column": 8,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 127,
				"endColumn": 15
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'gitName' is assigned a value but never used.",
				"line": 128,
				"column": 8,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 128,
				"endColumn": 15
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'gitEmail' is assigned a value but never used.",
				"line": 129,
				"column": 8,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 129,
				"endColumn": 16
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'commitMessage' is assigned a value but never used.",
				"line": 130,
				"column": 8,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 130,
				"endColumn": 21
			},
			{
				"ruleId": "fp/no-let",
				"severity": 1,
				"message": "Unallowed use of `let`. Use `const` instead",
				"line": 141,
				"column": 5,
				"nodeType": "VariableDeclaration",
				"endLine": 141,
				"endColumn": 50
			},
			{
				"ruleId": "prefer-const",
				"severity": 2,
				"message": "'name' is never reassigned. Use 'const' instead.",
				"line": 141,
				"column": 10,
				"nodeType": "Identifier",
				"messageId": "useConst",
				"endLine": 141,
				"endColumn": 14,
				"fix": {
					"range": [
						5737,
						5740
					],
					"text": "const"
				}
			},
			{
				"ruleId": "prefer-const",
				"severity": 2,
				"message": "'outputFileName' is never reassigned. Use 'const' instead.",
				"line": 141,
				"column": 16,
				"nodeType": "Identifier",
				"messageId": "useConst",
				"endLine": 141,
				"endColumn": 30,
				"fix": {
					"range": [
						5737,
						5740
					],
					"text": "const"
				}
			},
			{
				"ruleId": "fp/no-let",
				"severity": 1,
				"message": "Unallowed use of `let`. Use `const` instead",
				"line": 147,
				"column": 3,
				"nodeType": "VariableDeclaration",
				"endLine": 147,
				"endColumn": 52
			},
			{
				"ruleId": "prefer-const",
				"severity": 2,
				"message": "'results' is never reassigned. Use 'const' instead.",
				"line": 147,
				"column": 7,
				"nodeType": "Identifier",
				"messageId": "useConst",
				"endLine": 147,
				"endColumn": 14,
				"fix": {
					"range": [
						5871,
						5874
					],
					"text": "const"
				}
			},
			{
				"ruleId": "fp/no-let",
				"severity": 1,
				"message": "Unallowed use of `let`. Use `const` instead",
				"line": 148,
				"column": 3,
				"nodeType": "VariableDeclaration",
				"endLine": 199,
				"endColumn": 4
			},
			{
				"ruleId": "prefer-const",
				"severity": 2,
				"message": "'info' is never reassigned. Use 'const' instead.",
				"line": 148,
				"column": 7,
				"nodeType": "Identifier",
				"messageId": "useConst",
				"endLine": 148,
				"endColumn": 11,
				"fix": {
					"range": [
						5923,
						5926
					],
					"text": "const"
				}
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'index' is defined but never used.",
				"line": 149,
				"column": 20,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 149,
				"endColumn": 25
			},
			{
				"ruleId": "@typescript-eslint/no-unused-vars",
				"severity": 1,
				"message": "'arr' is defined but never used.",
				"line": 149,
				"column": 27,
				"nodeType": "Identifier",
				"messageId": "unusedVar",
				"endLine": 149,
				"endColumn": 30
			}
		],
		"errorCount": 5,
		"warningCount": 25,
		"fixableErrorCount": 5,
		"fixableWarningCount": 0,
		"source": "/* eslint-disable fp/no-loops */\nimport * as assert from 'assert'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as path from \"path\"\nimport * as fs from 'fs'\n\n\n//#region Types\ntype ArgsType<F extends (...x: any[]) => any> = F extends (...x: infer A) => any ? A : never\ninterface ChecksCreateEndpoint {\n\towner: string;\n\trepo: string;\n    /** The name of the check. For example, \"code-coverage\".\n     */\n\tname: string;\n    /** The SHA of the commit.\n     */\n\thead_sha: string;\n    /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.\n     */\n\tdetails_url?: string;\n    /** A reference for the run on the integrator's system.\n     */\n\texternal_id?: string;\n    /** The current status. Can be one of `queued`, `in_progress`, or `completed`.\n     */\n\tstatus?: \"queued\" | \"in_progress\" | \"completed\";\n    /** The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n     */\n\tstarted_at?: string;\n    /** **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.\n     * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.\n     */\n\tconclusion?: \"success\" | \"failure\" | \"neutral\" | \"cancelled\" | \"skipped\" | \"timed_out\" | \"action_required\";\n    /** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n     */\n\tcompleted_at?: string;\n    /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object) description.\n     */\n\toutput?: {\n\t\ttitle: string;\n\t\tsummary: string;\n\t\ttext?: string;\n\t\tannotations?: GitHubAnnotation[];\n\t\timages?: Array<{\n\t\t\talt: string;\n\t\t\timage_url: string;\n\t\t\tcaption?: string;\n\t\t}>;\n\t};\n    /** Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\" To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"\n     */\n\tactions?: Array<{\n\t\tlabel: string;\n\t\tdescription: string;\n\t\tidentifier: string;\n\t}>;\n}\ntype GitHubAnnotationLevel = 'notice' | 'warning' | 'failure';\ntype CheckConclusion = \"success\" | \"failure\" | \"neutral\" | \"cancelled\" | \"skipped\" | \"timed_out\" | \"action_required\"\ninterface GitHubAnnotation {\n\tpath: string;\n\tannotation_level: GitHubAnnotationLevel;\n\tstart_line: number;\n\tstart_column?: number;\n\tend_line: number;\n\tend_column?: number;\n\tmessage: string;\n\traw_details?: string;\n\ttitle?: string;\n}\ninterface CheckResult {\n\tfilePath: string,\n\tmessages: Array<{\n\t\t\"ruleId\": string,\n\t\t\"severity\": number,\n\t\t\"message\": string,\n\t\t\"messageId\": string,\n\t\t\"nodeType\": \"Identifier\",\n\t\t\"line\": number,\n\t\t\"column\": number,\n\t\t\"endLine\": number,\n\t\t\"endColumn\": number\n\t}>;\n\terrorCount: number;\n\twarningCount: number;\n\n\t\"fixableErrorCount\": number,\n\t\"fixableWarningCount\": number,\n\t\"source\": string,\n\t\"usedDeprecatedRules\": any[]\n}\n\n//#endregion\n\n\n//#region Functions\nfunction getInput(key: string, required = false) {\n\treturn core.getInput(key, { required })\n}\nfunction* chunkArray<T>(arr: T[], chunkSize: number): Iterable<T[]> {\n\tlet index = 0\n\twhile (index < arr.length) {\n\t\tyield (arr.slice(index, index + chunkSize))\n\t\tindex += 50\n\t}\n}\n//#endregion\n\n\nprocess.on(\"unhandledRejection\", (err: any) => {\n\tconsole.error(err, \"error\")\n\tthrow new Error(`Exiting due to unhandled promise rejection`)\n})\n\n\n/** Main function, does not support forks */\nasync function runAction() {\n\tconst { GITHUB_REPOSITORY, GITHUB_WORKSPACE, GITHUB_SHA, GITHUB_EVENT_PATH, SOURCE_ROOT } = process.env\n\tconst [repoOwner, repoName] = GITHUB_REPOSITORY!.split('/')\n\tconst githubToken = getInput('ghToken', true)\n\tconst pullRequest = github.context.payload.pull_request;\n\tconst sha = GITHUB_SHA ?? (pullRequest ? pullRequest.head.sha : github.context.sha)\n\tconst { context } = github\n\n\tconst autoFix = getInput(\"auto_fix\") === \"true\"\n\tconst gitName = getInput(\"git_name\", true)\n\tconst gitEmail = getInput(\"git_email\", true)\n\tconst commitMessage = getInput(\"commit_message\", true)\n\n\t//const options: Options = { repoName, repoOwner, repoPath: GITHUB_WORKSPACE!, sha: GITHUB_SHA! }\n\t//new EslintRunner(githubToken, options).run()\n\n\n\tfunction getChecksToReport() {\n\t\tconst checksInput = core.getInput('checks', { required: true })\n\t\treturn checksInput\n\t\t\t.split(\"|\")\n\t\t\t.map(check => {\n\t\t\t\tlet [name, outputFileName] = check.split(\":\")\n\t\t\t\treturn { name, outputFileName }\n\t\t\t})\n\t}\n\n\tfunction parseOutput(output: string) {\n\t\tlet results = JSON.parse(output) as CheckResult[]\n\t\tlet info = results.reduce<{ errorCount: number, warningCount: number, annotations: GitHubAnnotation[] }>(\n\t\t\t(prev, current, index, arr) => {\n\t\t\t\tcore.info(`Analyzing ${current.filePath}`)\n\n\t\t\t\treturn {\n\t\t\t\t\terrorCount: prev.errorCount + current.errorCount,\n\t\t\t\t\twarningCount: prev.warningCount + current.warningCount,\n\t\t\t\t\tannotations: [...prev.annotations, ...current.messages.map(msg => {\n\t\t\t\t\t\t// Pull out information about the error/warning message\n\t\t\t\t\t\tconst { line, endLine, column, endColumn, severity, ruleId, message } = msg\n\t\t\t\t\t\tconst filePathTrimmed = current.filePath.replace(`${GITHUB_WORKSPACE}/`, '')\n\n\t\t\t\t\t\t// Create GitHub annotation for error/warning (https://developer.github.com/v3/checks/runs/#annotations-object)\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tpath: filePathTrimmed,\n\t\t\t\t\t\t\tstart_line: line,\n\t\t\t\t\t\t\tend_line: endLine ? endLine : line,\n\t\t\t\t\t\t\tstart_column: line === endLine ? column : undefined,\n\t\t\t\t\t\t\tend_column: line === endLine ? endColumn : undefined,\n\t\t\t\t\t\t\tannotation_level: ['notice', 'warning', 'failure'][severity] as GitHubAnnotationLevel,\n\t\t\t\t\t\t\tmessage: `[${ruleId}] ${message}`\n\t\t\t\t\t\t} as GitHubAnnotation\n\n\t\t\t\t\t\t// User-friendly markdown message text for the error/warning\n\t\t\t\t\t\t/*const link = `https://github.com/${OWNER}/${REPO}/blob/${SHA}/${filePathTrimmed}#L${line}:L${endLine}`\n\t\t\t\t\t\tlet messageText = '### [`' + filePathTrimmed + '` line `' + line + '`](' + link + ')\\n';\n\t\t\t\t\t\tmessageText += '- Start Line: `' + line + '`\\n';\n\t\t\t\t\t\tmessageText += '- End Line: `' + endLine + '`\\n';\n\t\t\t\t\t\tmessageText += '- Message: ' + message + '\\n';\n\t\t\t\t\t\tmessageText += '  - From: [`' + ruleId + '`]\\n';\n\t\t\n\t\t\t\t\t\t// Add the markdown text to the appropriate placeholder\n\t\t\t\t\t\tif (isWarning) {\n\t\t\t\t\t\t\twarningText += messageText\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\terrorText += messageText\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/\n\t\t\t\t\t})]\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t{\n\t\t\t\terrorCount: 0,\n\t\t\t\twarningCount: 0,\n\t\t\t\tannotations: [] as GitHubAnnotation[],\n\t\t\t\t// errorText: '',\n\t\t\t\t// warningText: '',\n\t\t\t\t// markdownText: ''\n\t\t\t} as const\n\t\t)\n\n\t\treturn {\n\t\t\t...info,\n\t\t\tsuccess: info.errorCount === 0,\n\t\t\tsummary: `${info.errorCount} error(s) and ${info.warningCount} warning(s) reported`\n\t\t}\n\t}\n\n\tfunction buildCheckInfo(checkName: string, parsedResults: ReturnType<typeof parseOutput>): ChecksCreateEndpoint[] {\n\t\treturn [...chunkArray(parsedResults.annotations, 50)].map(batch => ({\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tstarted_at: new Date().toISOString(),\n\t\t\thead_sha: sha,\n\t\t\tcompleted_at: new Date().toISOString(),\n\t\t\tstatus: 'completed',\n\t\t\tname: checkName,\n\t\t\tconclusion: parsedResults.success ? 'success' : 'failure',\n\t\t\toutput: {\n\t\t\t\ttitle: checkName,\n\t\t\t\tsummary: parsedResults.summary,\n\t\t\t\t//text: parsedCheckResults.markdown,\n\t\t\t\tannotations: batch\n\t\t\t}\n\t\t}))\n\t}\n\n\tconst githubClient = github.getOctokit(githubToken)\n\tgetChecksToReport().forEach(check => {\n\t\tconst outputFilePath = path.resolve(check.outputFileName)\n\t\tif (!fs.existsSync(outputFilePath)) {\n\t\t\tcore.setFailed(`Output file \"${check.outputFileName}\" for the ${check.name} check not be resolved.`)\n\t\t\treturn\n\t\t}\n\t\tconst file = fs.readFileSync(check.outputFileName, 'utf8')\n\t\tconst parsedOutput = parseOutput(file/*, check.type*/)\n\t\tif (parsedOutput.errorCount > 0) {\n\t\t\tcore.setFailed(`${check.name} check failed.`)\n\t\t}\n\t\tconst checkInfoBatches = buildCheckInfo(check.name, parsedOutput)\n\t\ttry {\n\t\t\tcheckInfoBatches.forEach(async batch => {\n\t\t\t\t//let x: ArgsType<typeof githubClient.checks.create>;// = batch\n\t\t\t\tawait githubClient.checks.create({ ...batch })\n\n\t\t\t\t/*\n\t\t\t\t\tasync function createCheck(sha: string, lintResult: Record<string, Result[]>, summary: string) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t//const url = `https://api.github.com/repos/${repoName}/check-runs`\n\t\t\t\t\t\t\tconst url = `https://api.github.com/repos/${owner}/${repoName}/check-runs`\n\n\t\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t\tAccept: \"application/vnd.github.antiope-preview+json\", //required to access Checks API during preview period\n\t\t\t\t\t\t\t\tAuthorization: `Bearer ${githubToken}`,\n\t\t\t\t\t\t\t\t\"User-Agent\": `eslint-annotate_action`,\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\t\tname: \"ESlint\",\n\t\t\t\t\t\t\t\thead_sha: sha,\n\t\t\t\t\t\t\t\tconclusion: lintResult.isSuccess ? \"success\" : \"failure\",\n\t\t\t\t\t\t\t\tstarted_at: new Date(),\n\t\t\t\t\t\t\t\t//completed_at: completed ? new Date() : undefined,\n\t\t\t\t\t\t\t\t//status: completed ? 'completed' : 'in_progress',\n\t\t\t\t\t\t\t\toutput: {\n\t\t\t\t\t\t\t\t\t//title: capitalizeFirstLetter(summary),\n\t\t\t\t\t\t\t\t\t//summary: `${linterName} found ${summary}`,\n\t\t\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//(`Creating GitHub check with ${annotations.length} annotations for ${linterName}…`)\n\t\t\t\t\t\t\tawait request(url, { method: \"POST\", headers, body })\n\t\t\t\t\t\t\t//log(`${linterName} check created successfully`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\t\tlog(err, \"error\")\n\t\t\t\t\t\t\tthrow new Error(`Error trying to create GitHub check for ${linterName}: ${err.message}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t})\n\t\t}\n\t\tcatch (err) {\n\t\t\tcore.setFailed(`Error creating annotations for ${check.name} on Github\\n${err.message}`)\n\t\t}\n\t})\n}\n\n\n\n// interface RequestParameters = {\n//     /**\n//      * Base URL to be used when a relative URL is passed, such as `/orgs/:org`.\n//      * If `baseUrl` is `https://enterprise.acme-inc.com/api/v3`, then the request\n//      * will be sent to `https://enterprise.acme-inc.com/api/v3/orgs/:org`.\n//      */\n// \tbaseUrl ?: Url;\n//     /**\n//      * HTTP headers. Use lowercase keys.\n//      */\n// \theaders ?: RequestHeaders;\n//     /**\n//      * Media type options, see {@link https://developer.github.com/v3/media/|GitHub Developer Guide}\n//      */\n// \tmediaType ?: {\n//         /**\n//          * `json` by default. Can be `raw`, `text`, `html`, `full`, `diff`, `patch`, `sha`, `base64`. Depending on endpoint\n//          */\n// \t\tformat?: string;\n//         /**\n//          * Custom media type names of {@link https://developer.github.com/v3/media/|API Previews} without the `-preview` suffix.\n//          * Example for single preview: `['squirrel-girl']`.\n//          * Example for multiple previews: `['squirrel-girl', 'mister-fantastic']`.\n//          */\n// \t\tpreviews?: string[];\n// \t};\n//     /**\n//      * Pass custom meta information for the request. The `request` object will be returned as is.\n//      */\n// \trequest ?: RequestRequestOptions;\n//     /**\n//      * Any additional parameter will be passed as follows\n//      * 1. URL parameter if `':parameter'` or `{parameter}` is part of `url`\n//      * 2. Query parameter if `method` is `'GET'` or `'HEAD'`\n//      * 3. Request body if `parameter` is `'data'`\n//      * 4. JSON in the request body in the form of `body[parameter]` unless `parameter` key is `'data'`\n//      */\n// \t[parameter: string]: unknown;\n// };\n\n\ndescribe('Index', function () {\n\tdescribe('#chunkArray()', function () {\n\t\tit('should return empty array when given empty array', function () {\n\t\t\tassert.deepEqual([...chunkArray([], 50)], [])\n\t\t})\n\t})\n})",
		"usedDeprecatedRules": []
	}
]